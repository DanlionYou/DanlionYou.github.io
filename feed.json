{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "JavaGuide",
  "home_page_url": "https://javaguide.cn/",
  "feed_url": "https://javaguide.cn/feed.json",
  "description": "「Java 学习指北 + Java 面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，复习 Java 知识点，首选 JavaGuide！  ",
  "favicon": "https://javaguide.cn/favicon.ico",
  "items": [
    {
      "title": "JavaGuide（Java学习&面试指南）",
      "url": "https://javaguide.cn/home.html",
      "id": "https://javaguide.cn/home.html",
      "summary": "友情提示 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量很高，专为面试打造，配合 JavaGuide 食用)。 知识星球：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 （点击链接即可查看星球的详细介绍，一定确定自己真的需要再加入）。 使用建议 ：有水平的面试官都是顺着项目经历挖掘技术问题。一定不要死记硬背技术八股文！详细...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">友情提示</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li>\n<li><strong>知识星球</strong>：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球</a></strong>（点击链接即可查看星球的详细介绍，一定确定自己真的需要再加入）。</li>\n<li><strong>使用建议</strong> ：有水平的面试官都是顺着项目经历挖掘技术问题。一定不要死记硬背技术八股文！详细的学习建议请参考：<a href=\"/javaguide/use-suggestion.html\" target=\"_blank\">JavaGuide 使用建议</a>。</li>\n<li><strong>求个 Star</strong>：如果觉得 JavaGuide 的内容对你有帮助的话，还请点个免费的 Star，这是对我最大的鼓励，感谢各位一起同行，共勉！传送门：<a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a> | <a href=\"https://gitee.com/SnailClimb/JavaGuide\" target=\"_blank\" rel=\"noopener noreferrer\">Gitee</a>。</li>\n<li><strong>转载须知</strong>：以下所有文章如非文首说明为转载皆为 JavaGuide 原创，转载请在文首注明出处。如发现恶意抄袭/搬运，会动用法律武器维护自己的权益。让我们一起维护一个良好的技术创作环境！</li>\n</ul>\n</div>\n<h2>Java</h2>\n<h3>基础</h3>\n<p><strong>知识点/面试题总结</strong> : (必看👍 )：</p>\n<ul>\n<li><a href=\"/java/basis/java-basic-questions-01.html\" target=\"_blank\">Java 基础常见知识点&amp;面试题总结(上)</a></li>\n<li><a href=\"/java/basis/java-basic-questions-02.html\" target=\"_blank\">Java 基础常见知识点&amp;面试题总结(中)</a></li>\n<li><a href=\"/java/basis/java-basic-questions-03.html\" target=\"_blank\">Java 基础常见知识点&amp;面试题总结(下)</a></li>\n</ul>\n<p><strong>重要知识点详解</strong>：</p>\n<ul>\n<li><a href=\"/java/basis/why-there-only-value-passing-in-java.html\" target=\"_blank\">为什么 Java 中只有值传递？</a></li>\n<li><a href=\"/java/basis/serialization.html\" target=\"_blank\">Java 序列化详解</a></li>\n<li><a href=\"/java/basis/generics-and-wildcards.html\" target=\"_blank\">泛型&amp;通配符详解</a></li>\n<li><a href=\"/java/basis/reflection.html\" target=\"_blank\">Java 反射机制详解</a></li>\n<li><a href=\"/java/basis/proxy.html\" target=\"_blank\">Java 代理模式详解</a></li>\n<li><a href=\"/java/basis/bigdecimal.html\" target=\"_blank\">BigDecimal 详解</a></li>\n<li><a href=\"/java/basis/unsafe.html\" target=\"_blank\">Java 魔法类 Unsafe 详解</a></li>\n<li><a href=\"/java/basis/spi.html\" target=\"_blank\">Java SPI 机制详解</a></li>\n<li><a href=\"/java/basis/syntactic-sugar.html\" target=\"_blank\">Java 语法糖详解</a></li>\n</ul>\n<h3>集合</h3>\n<p><strong>知识点/面试题总结</strong>：</p>\n<ul>\n<li><a href=\"/java/collection/java-collection-questions-01.html\" target=\"_blank\">Java 集合常见知识点&amp;面试题总结(上)</a> (必看 👍)</li>\n<li><a href=\"/java/collection/java-collection-questions-02.html\" target=\"_blank\">Java 集合常见知识点&amp;面试题总结(下)</a> (必看 👍)</li>\n<li><a href=\"/java/collection/java-collection-precautions-for-use.html\" target=\"_blank\">Java 集合使用注意事项总结</a></li>\n</ul>\n<p><strong>源码分析</strong>：</p>\n<ul>\n<li><a href=\"/java/collection/arraylist-source-code.html\" target=\"_blank\">ArrayList 核心源码+扩容机制分析</a></li>\n<li><a href=\"/java/collection/linkedlist-source-code.html\" target=\"_blank\">LinkedList 核心源码分析</a></li>\n<li><a href=\"/java/collection/hashmap-source-code.html\" target=\"_blank\">HashMap 核心源码+底层数据结构分析</a></li>\n<li><a href=\"/java/collection/concurrent-hash-map-source-code.html\" target=\"_blank\">ConcurrentHashMap 核心源码+底层数据结构分析</a></li>\n<li><a href=\"/java/collection/linkedhashmap-source-code.html\" target=\"_blank\">LinkedHashMap 核心源码分析</a></li>\n<li><a href=\"/java/collection/copyonwritearraylist-source-code.html\" target=\"_blank\">CopyOnWriteArrayList 核心源码分析</a></li>\n<li><a href=\"/java/collection/arrayblockingqueue-source-code.html\" target=\"_blank\">ArrayBlockingQueue 核心源码分析</a></li>\n<li><a href=\"/java/collection/priorityqueue-source-code.html\" target=\"_blank\">PriorityQueue 核心源码分析</a></li>\n<li><a href=\"/java/collection/priorityqueue-source-code.html\" target=\"_blank\">DelayQueue 核心源码分析</a></li>\n</ul>\n<h3>IO</h3>\n<ul>\n<li><a href=\"/java/io/io-basis.html\" target=\"_blank\">IO 基础知识总结</a></li>\n<li><a href=\"/java/io/io-design-patterns.html\" target=\"_blank\">IO 设计模式总结</a></li>\n<li><a href=\"/java/io/io-model.html\" target=\"_blank\">IO 模型详解</a></li>\n<li><a href=\"/java/io/nio-basis.html\" target=\"_blank\">NIO 核心知识总结</a></li>\n</ul>\n<h3>并发</h3>\n<p><strong>知识点/面试题总结</strong> : (必看 👍)</p>\n<ul>\n<li><a href=\"/java/concurrent/java-concurrent-questions-01.html\" target=\"_blank\">Java 并发常见知识点&amp;面试题总结（上）</a></li>\n<li><a href=\"/java/concurrent/java-concurrent-questions-02.html\" target=\"_blank\">Java 并发常见知识点&amp;面试题总结（中）</a></li>\n<li><a href=\"/java/concurrent/java-concurrent-questions-03.html\" target=\"_blank\">Java 并发常见知识点&amp;面试题总结（下）</a></li>\n</ul>\n<p><strong>重要知识点详解</strong>：</p>\n<ul>\n<li><a href=\"/java/concurrent/optimistic-lock-and-pessimistic-lock.html\" target=\"_blank\">乐观锁和悲观锁详解</a></li>\n<li><a href=\"/java/concurrent/cas.html\" target=\"_blank\">CAS 详解</a></li>\n<li><a href=\"/java/concurrent/jmm.html\" target=\"_blank\">JMM（Java 内存模型）详解</a></li>\n<li><strong>线程池</strong>：<a href=\"/java/concurrent/java-thread-pool-summary.html\" target=\"_blank\">Java 线程池详解</a>、<a href=\"/java/concurrent/java-thread-pool-best-practices.html\" target=\"_blank\">Java 线程池最佳实践</a></li>\n<li><a href=\"/java/concurrent/threadlocal.html\" target=\"_blank\">ThreadLocal 详解</a></li>\n<li><a href=\"/java/concurrent/java-concurrent-collections.html\" target=\"_blank\">Java 并发容器总结</a></li>\n<li><a href=\"/java/concurrent/atomic-classes.html\" target=\"_blank\">Atomic 原子类总结</a></li>\n<li><a href=\"/java/concurrent/aqs.html\" target=\"_blank\">AQS 详解</a></li>\n<li><a href=\"/java/concurrent/completablefuture-intro.html\" target=\"_blank\">CompletableFuture 详解</a></li>\n</ul>\n<h3>JVM (必看 👍)</h3>\n<p>JVM 这部分内容主要参考 <a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">JVM 虚拟机规范-Java8</a> 和周志明老师的<a href=\"https://book.douban.com/subject/34907497/\" target=\"_blank\" rel=\"noopener noreferrer\">《深入理解 Java 虚拟机（第 3 版）》</a> （强烈建议阅读多遍！）。</p>\n<ul>\n<li><strong><a href=\"/java/jvm/memory-area.html\" target=\"_blank\">Java 内存区域</a></strong></li>\n<li><strong><a href=\"/java/jvm/jvm-garbage-collection.html\" target=\"_blank\">JVM 垃圾回收</a></strong></li>\n<li><a href=\"/java/jvm/class-file-structure.html\" target=\"_blank\">类文件结构</a></li>\n<li><strong><a href=\"/java/jvm/class-loading-process.html\" target=\"_blank\">类加载过程</a></strong></li>\n<li><a href=\"/java/jvm/classloader.html\" target=\"_blank\">类加载器</a></li>\n<li><a href=\"/java/jvm/jvm-parameters-intro.html\" target=\"_blank\">【待完成】最重要的 JVM 参数总结（翻译完善了一半）</a></li>\n<li><a href=\"/java/jvm/jvm-intro.html\" target=\"_blank\">【加餐】大白话带你认识 JVM</a></li>\n<li><a href=\"/java/jvm/jdk-monitoring-and-troubleshooting-tools.html\" target=\"_blank\">JDK 监控和故障处理工具</a></li>\n</ul>\n<h3>新特性</h3>\n<ul>\n<li><strong>Java 8</strong>：<a href=\"/java/new-features/java8-tutorial-translate.html\" target=\"_blank\">Java 8 新特性总结（翻译）</a>、<a href=\"/java/new-features/java8-common-new-features.html\" target=\"_blank\">Java8 常用新特性总结</a></li>\n<li><a href=\"/java/new-features/java9.html\" target=\"_blank\">Java 9 新特性概览</a></li>\n<li><a href=\"/java/new-features/java10.html\" target=\"_blank\">Java 10 新特性概览</a></li>\n<li><a href=\"/java/new-features/java11.html\" target=\"_blank\">Java 11 新特性概览</a></li>\n<li><a href=\"/java/new-features/java12-13.html\" target=\"_blank\">Java 12 &amp; 13 新特性概览</a></li>\n<li><a href=\"/java/new-features/java14-15.html\" target=\"_blank\">Java 14 &amp; 15 新特性概览</a></li>\n<li><a href=\"/java/new-features/java16.html\" target=\"_blank\">Java 16 新特性概览</a></li>\n<li><a href=\"/java/new-features/java17.html\" target=\"_blank\">Java 17 新特性概览</a></li>\n<li><a href=\"/java/new-features/java18.html\" target=\"_blank\">Java 18 新特性概览</a></li>\n<li><a href=\"/java/new-features/java19.html\" target=\"_blank\">Java 19 新特性概览</a></li>\n<li><a href=\"/java/new-features/java20.html\" target=\"_blank\">Java 20 新特性概览</a></li>\n<li><a href=\"/java/new-features/java21.html\" target=\"_blank\">Java 21 新特性概览</a></li>\n<li><a href=\"/java/new-features/java22-23.html\" target=\"_blank\">Java 22 &amp; 23 新特性概览</a></li>\n<li><a href=\"/java/new-features/java24.html\" target=\"_blank\">Java 24 新特性概览</a></li>\n</ul>\n<h2>计算机基础</h2>\n<h3>操作系统</h3>\n<ul>\n<li><a href=\"/cs-basics/operating-system/operating-system-basic-questions-01.html\" target=\"_blank\">操作系统常见知识点&amp;面试题总结(上)</a></li>\n<li><a href=\"/cs-basics/operating-system/operating-system-basic-questions-02.html\" target=\"_blank\">操作系统常见知识点&amp;面试题总结(下)</a></li>\n<li><strong>Linux</strong>：\n<ul>\n<li><a href=\"/cs-basics/operating-system/linux-intro.html\" target=\"_blank\">后端程序员必备的 Linux 基础知识总结</a></li>\n<li><a href=\"/cs-basics/operating-system/shell-intro.html\" target=\"_blank\">Shell 编程基础知识总结</a></li>\n</ul>\n</li>\n</ul>\n<h3>网络</h3>\n<p><strong>知识点/面试题总结</strong>：</p>\n<ul>\n<li><a href=\"/cs-basics/network/other-network-questions.html\" target=\"_blank\">计算机网络常见知识点&amp;面试题总结(上)</a></li>\n<li><a href=\"/cs-basics/network/other-network-questions2.html\" target=\"_blank\">计算机网络常见知识点&amp;面试题总结(下)</a></li>\n<li><a href=\"/cs-basics/network/computer-network-xiexiren-summary.html\" target=\"_blank\">谢希仁老师的《计算机网络》内容总结（补充）</a></li>\n</ul>\n<p><strong>重要知识点详解</strong>：</p>\n<ul>\n<li><a href=\"/cs-basics/network/osi-and-tcp-ip-model.html\" target=\"_blank\">OSI 和 TCP/IP 网络分层模型详解（基础）</a></li>\n<li><a href=\"/cs-basics/network/application-layer-protocol.html\" target=\"_blank\">应用层常见协议总结（应用层）</a></li>\n<li><a href=\"/cs-basics/network/http-vs-https.html\" target=\"_blank\">HTTP vs HTTPS（应用层）</a></li>\n<li><a href=\"/cs-basics/network/http1.0-vs-http1.1.html\" target=\"_blank\">HTTP 1.0 vs HTTP 1.1（应用层）</a></li>\n<li><a href=\"/cs-basics/network/http-status-codes.html\" target=\"_blank\">HTTP 常见状态码（应用层）</a></li>\n<li><a href=\"/cs-basics/network/dns.html\" target=\"_blank\">DNS 域名系统详解（应用层）</a></li>\n<li><a href=\"/cs-basics/network/tcp-connection-and-disconnection.html\" target=\"_blank\">TCP 三次握手和四次挥手（传输层）</a></li>\n<li><a href=\"/cs-basics/network/tcp-reliability-guarantee.html\" target=\"_blank\">TCP 传输可靠性保障（传输层）</a></li>\n<li><a href=\"/cs-basics/network/arp.html\" target=\"_blank\">ARP 协议详解(网络层)</a></li>\n<li><a href=\"/cs-basics/network/nat.html\" target=\"_blank\">NAT 协议详解(网络层)</a></li>\n<li><a href=\"/cs-basics/network/network-attack-means.html\" target=\"_blank\">网络攻击常见手段总结（安全）</a></li>\n</ul>\n<h3>数据结构</h3>\n<p><strong>图解数据结构：</strong></p>\n<ul>\n<li><a href=\"/cs-basics/data-structure/linear-data-structure.html\" target=\"_blank\">线性数据结构 :数组、链表、栈、队列</a></li>\n<li><a href=\"/cs-basics/data-structure/graph.html\" target=\"_blank\">图</a></li>\n<li><a href=\"/cs-basics/data-structure/heap.html\" target=\"_blank\">堆</a></li>\n<li><a href=\"/cs-basics/data-structure/tree.html\" target=\"_blank\">树</a>：重点关注<a href=\"/cs-basics/data-structure/red-black-tree.html\" target=\"_blank\">红黑树</a>、B-，B+，B*树、LSM 树</li>\n</ul>\n<p>其他常用数据结构：</p>\n<ul>\n<li><a href=\"/cs-basics/data-structure/bloom-filter.html\" target=\"_blank\">布隆过滤器</a></li>\n</ul>\n<h3>算法</h3>\n<p>算法这部分内容非常重要，如果你不知道如何学习算法的话，可以看下我写的：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/323359308/answer/1545320858\" target=\"_blank\" rel=\"noopener noreferrer\">算法学习书籍+资源推荐</a> 。</li>\n<li><a href=\"https://www.zhihu.com/question/31092580/answer/1534887374\" target=\"_blank\" rel=\"noopener noreferrer\">如何刷 Leetcode?</a></li>\n</ul>\n<p><strong>常见算法问题总结</strong>：</p>\n<ul>\n<li><a href=\"/cs-basics/algorithms/string-algorithm-problems.html\" target=\"_blank\">几道常见的字符串算法题总结</a></li>\n<li><a href=\"/cs-basics/algorithms/linkedlist-algorithm-problems.html\" target=\"_blank\">几道常见的链表算法题总结</a></li>\n<li><a href=\"/cs-basics/algorithms/the-sword-refers-to-offer.html\" target=\"_blank\">剑指 offer 部分编程题</a></li>\n<li><a href=\"/cs-basics/algorithms/10-classical-sorting-algorithms.html\" target=\"_blank\">十大经典排序算法</a></li>\n</ul>\n<p>另外，<a href=\"https://www.geeksforgeeks.org/fundamentals-of-algorithms/\" target=\"_blank\" rel=\"noopener noreferrer\">GeeksforGeeks</a> 这个网站总结了常见的算法 ，比较全面系统。</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiu.png\" alt=\"Banner\"></a></p>\n<h2>数据库</h2>\n<h3>基础</h3>\n<ul>\n<li><a href=\"/database/basis.html\" target=\"_blank\">数据库基础知识总结</a></li>\n<li><a href=\"/database/nosql.html\" target=\"_blank\">NoSQL 基础知识总结</a></li>\n<li><a href=\"/database/character-set.html\" target=\"_blank\">字符集详解</a></li>\n<li>SQL :\n<ul>\n<li><a href=\"/database/sql/sql-syntax-summary.html\" target=\"_blank\">SQL 语法基础知识总结</a></li>\n<li><a href=\"/database/sql/sql-questions-01.html\" target=\"_blank\">SQL 常见面试题总结</a></li>\n</ul>\n</li>\n</ul>\n<h3>MySQL</h3>\n<p><strong>知识点/面试题总结：</strong></p>\n<ul>\n<li><strong><a href=\"/database/mysql/mysql-questions-01.html\" target=\"_blank\">MySQL 常见知识点&amp;面试题总结</a></strong> (必看 👍)</li>\n<li><a href=\"/database/mysql/mysql-high-performance-optimization-specification-recommendations.html\" target=\"_blank\">MySQL 高性能优化规范建议总结</a></li>\n</ul>\n<p><strong>重要知识点：</strong></p>\n<ul>\n<li><a href=\"/database/mysql/mysql-index.html\" target=\"_blank\">MySQL 索引详解</a></li>\n<li><a href=\"/database/mysql/transaction-isolation-level.html\" target=\"_blank\">MySQL 事务隔离级别图文详解)</a></li>\n<li><a href=\"/database/mysql/mysql-logs.html\" target=\"_blank\">MySQL 三大日志(binlog、redo log 和 undo log)详解</a></li>\n<li><a href=\"/database/mysql/innodb-implementation-of-mvcc.html\" target=\"_blank\">InnoDB 存储引擎对 MVCC 的实现</a></li>\n<li><a href=\"/database/mysql/how-sql-executed-in-mysql.html\" target=\"_blank\">SQL 语句在 MySQL 中的执行过程</a></li>\n<li><a href=\"/database/mysql/mysql-query-cache.html\" target=\"_blank\">MySQL 查询缓存详解</a></li>\n<li><a href=\"/database/mysql/mysql-query-execution-plan.html\" target=\"_blank\">MySQL 执行计划分析</a></li>\n<li><a href=\"/database/mysql/mysql-auto-increment-primary-key-continuous.html\" target=\"_blank\">MySQL 自增主键一定是连续的吗</a></li>\n<li><a href=\"/database/mysql/some-thoughts-on-database-storage-time.html\" target=\"_blank\">MySQL 时间类型数据存储建议</a></li>\n<li><a href=\"/database/mysql/index-invalidation-caused-by-implicit-conversion.html\" target=\"_blank\">MySQL 隐式转换造成索引失效</a></li>\n</ul>\n<h3>Redis</h3>\n<p><strong>知识点/面试题总结</strong> : (必看👍 )：</p>\n<ul>\n<li><a href=\"/database/redis/redis-questions-01.html\" target=\"_blank\">Redis 常见知识点&amp;面试题总结(上)</a></li>\n<li><a href=\"/database/redis/redis-questions-02.html\" target=\"_blank\">Redis 常见知识点&amp;面试题总结(下)</a></li>\n</ul>\n<p><strong>重要知识点：</strong></p>\n<ul>\n<li><a href=\"/database/redis/3-commonly-used-cache-read-and-write-strategies.html\" target=\"_blank\">3 种常用的缓存读写策略详解</a></li>\n<li><a href=\"/database/redis/redis-data-structures-01.html\" target=\"_blank\">Redis 5 种基本数据结构详解</a></li>\n<li><a href=\"/database/redis/redis-data-structures-02.html\" target=\"_blank\">Redis 3 种特殊数据结构详解</a></li>\n<li><a href=\"/database/redis/redis-persistence.html\" target=\"_blank\">Redis 持久化机制详解</a></li>\n<li><a href=\"/database/redis/redis-memory-fragmentation.html\" target=\"_blank\">Redis 内存碎片详解</a></li>\n<li><a href=\"/database/redis/redis-common-blocking-problems-summary.html\" target=\"_blank\">Redis 常见阻塞原因总结</a></li>\n<li><a href=\"/database/redis/redis-cluster.html\" target=\"_blank\">Redis 集群详解</a></li>\n</ul>\n<h3>MongoDB</h3>\n<ul>\n<li><a href=\"/database/mongodb/mongodb-questions-01.html\" target=\"_blank\">MongoDB 常见知识点&amp;面试题总结(上)</a></li>\n<li><a href=\"/database/mongodb/mongodb-questions-02.html\" target=\"_blank\">MongoDB 常见知识点&amp;面试题总结(下)</a></li>\n</ul>\n<h2>搜索引擎</h2>\n<p><a href=\"/database/elasticsearch/elasticsearch-questions-01.html\" target=\"_blank\">Elasticsearch 常见面试题总结(付费)</a></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n<h2>开发工具</h2>\n<h3>Maven</h3>\n<ul>\n<li><a href=\"/tools/maven/maven-core-concepts.html\" target=\"_blank\">Maven 核心概念总结</a></li>\n<li><a href=\"/tools/maven/maven-best-practices.html\" target=\"_blank\">Maven 最佳实践</a></li>\n</ul>\n<h3>Gradle</h3>\n<p><a href=\"/tools/gradle/gradle-core-concepts.html\" target=\"_blank\">Gradle 核心概念总结</a>（可选，目前国内还是使用 Maven 普遍一些）</p>\n<h3>Docker</h3>\n<ul>\n<li><a href=\"/tools/docker/docker-intro.html\" target=\"_blank\">Docker 核心概念总结</a></li>\n<li><a href=\"/tools/docker/docker-in-action.html\" target=\"_blank\">Docker 实战</a></li>\n</ul>\n<h3>Git</h3>\n<ul>\n<li><a href=\"/tools/git/git-intro.html\" target=\"_blank\">Git 核心概念总结</a></li>\n<li><a href=\"/tools/git/github-tips.html\" target=\"_blank\">GitHub 实用小技巧总结</a></li>\n</ul>\n<h2>系统设计</h2>\n<ul>\n<li><a href=\"/system-design/system-design-questions.html\" target=\"_blank\">系统设计常见面试题总结</a></li>\n<li><a href=\"/system-design/design-pattern.html\" target=\"_blank\">设计模式常见面试题总结</a></li>\n</ul>\n<h3>基础</h3>\n<ul>\n<li><a href=\"/system-design/basis/RESTfulAPI.html\" target=\"_blank\">RestFul API 简明教程</a></li>\n<li><a href=\"/system-design/basis/software-engineering.html\" target=\"_blank\">软件工程简明教程简明教程</a></li>\n<li><a href=\"/system-design/basis/naming.html\" target=\"_blank\">代码命名指南</a></li>\n<li><a href=\"/system-design/basis/refactoring.html\" target=\"_blank\">代码重构指南</a></li>\n<li><a href=\"/system-design/basis/unit-test.html\" target=\"_blank\">单元测试指南</a></li>\n</ul>\n<h3>常用框架</h3>\n<h4>Spring/SpringBoot (必看 👍)</h4>\n<p><strong>知识点/面试题总结</strong> :</p>\n<ul>\n<li><a href=\"/system-design/framework/spring/spring-knowledge-and-questions-summary.html\" target=\"_blank\">Spring 常见知识点&amp;面试题总结</a></li>\n<li><a href=\"/system-design/framework/spring/springboot-knowledge-and-questions-summary.html\" target=\"_blank\">SpringBoot 常见知识点&amp;面试题总结</a></li>\n<li><a href=\"/system-design/framework/spring/spring-common-annotations.html\" target=\"_blank\">Spring/Spring Boot 常用注解总结</a></li>\n<li><a href=\"https://github.com/Snailclimb/springboot-guide\" target=\"_blank\" rel=\"noopener noreferrer\">SpringBoot 入门指南</a></li>\n</ul>\n<p><strong>重要知识点详解</strong>：</p>\n<ul>\n<li><a href=\"/system-design/framework/spring/ioc-and-aop.html\" target=\"_blank\">IoC &amp; AOP 详解（快速搞懂）</a></li>\n<li><a href=\"/system-design/framework/spring/spring-transaction.html\" target=\"_blank\">Spring 事务详解</a></li>\n<li><a href=\"/system-design/framework/spring/spring-design-patterns-summary.html\" target=\"_blank\">Spring 中的设计模式详解</a></li>\n<li><a href=\"/system-design/framework/spring/spring-boot-auto-assembly-principles.html\" target=\"_blank\">SpringBoot 自动装配原理详解</a></li>\n</ul>\n<h4>MyBatis</h4>\n<p><a href=\"/system-design/framework/mybatis/mybatis-interview.html\" target=\"_blank\">MyBatis 常见面试题总结</a></p>\n<h3>安全</h3>\n<h4>认证授权</h4>\n<ul>\n<li><a href=\"/system-design/security/basis-of-authority-certification.html\" target=\"_blank\">认证授权基础概念详解</a></li>\n<li><a href=\"/system-design/security/jwt-intro.html\" target=\"_blank\">JWT 基础概念详解</a></li>\n<li><a href=\"/system-design/security/advantages-and-disadvantages-of-jwt.html\" target=\"_blank\">JWT 优缺点分析以及常见问题解决方案</a></li>\n<li><a href=\"/system-design/security/sso-intro.html\" target=\"_blank\">SSO 单点登录详解</a></li>\n<li><a href=\"/system-design/security/design-of-authority-system.html\" target=\"_blank\">权限系统设计详解</a></li>\n</ul>\n<h4>数据安全</h4>\n<ul>\n<li><a href=\"/system-design/security/encryption-algorithms.html\" target=\"_blank\">常见加密算法总结</a></li>\n<li><a href=\"/system-design/security/sentive-words-filter.html\" target=\"_blank\">敏感词过滤方案总结</a></li>\n<li><a href=\"/system-design/security/data-desensitization.html\" target=\"_blank\">数据脱敏方案总结</a></li>\n<li><a href=\"/system-design/security/data-validation.html\" target=\"_blank\">为什么前后端都要做数据校验</a></li>\n</ul>\n<h3>定时任务</h3>\n<p><a href=\"/system-design/schedule-task.html\" target=\"_blank\">Java 定时任务详解</a></p>\n<h3>Web 实时消息推送</h3>\n<p><a href=\"/system-design/web-real-time-message-push.html\" target=\"_blank\">Web 实时消息推送详解</a></p>\n<h2>分布式</h2>\n<h3>理论&amp;算法&amp;协议</h3>\n<ul>\n<li><a href=\"/distributed-system/protocol/cap-and-base-theorem.html\" target=\"_blank\">CAP 理论和 BASE 理论解读</a></li>\n<li><a href=\"/distributed-system/protocol/paxos-algorithm.html\" target=\"_blank\">Paxos 算法解读</a></li>\n<li><a href=\"/distributed-system/protocol/raft-algorithm.html\" target=\"_blank\">Raft 算法解读</a></li>\n<li><a href=\"/distributed-system/protocol/gossip-protocl.html\" target=\"_blank\">Gossip 协议详解</a></li>\n</ul>\n<h3>RPC</h3>\n<ul>\n<li><a href=\"/distributed-system/rpc/rpc-intro.html\" target=\"_blank\">RPC 基础知识总结</a></li>\n<li><a href=\"/distributed-system/rpc/dubbo.html\" target=\"_blank\">Dubbo 常见知识点&amp;面试题总结</a></li>\n</ul>\n<h3>ZooKeeper</h3>\n<blockquote>\n<p>这两篇文章可能有内容重合部分，推荐都看一遍。</p>\n</blockquote>\n<ul>\n<li><a href=\"/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.html\" target=\"_blank\">ZooKeeper 相关概念总结(入门)</a></li>\n<li><a href=\"/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.html\" target=\"_blank\">ZooKeeper 相关概念总结(进阶)</a></li>\n</ul>\n<h3>API 网关</h3>\n<ul>\n<li><a href=\"/distributed-system/api-gateway.html\" target=\"_blank\">API 网关基础知识总结</a></li>\n<li><a href=\"/distributed-system/spring-cloud-gateway-questions.html\" target=\"_blank\">Spring Cloud Gateway 常见知识点&amp;面试题总结</a></li>\n</ul>\n<h3>分布式 ID</h3>\n<ul>\n<li><a href=\"/distributed-system/distributed-id.html\" target=\"_blank\">分布式 ID 常见知识点&amp;面试题总结</a></li>\n<li><a href=\"/distributed-system/distributed-id-design.html\" target=\"_blank\">分布式 ID 设计指南</a></li>\n</ul>\n<h3>分布式锁</h3>\n<ul>\n<li><a href=\"https://javaguide.cn/distributed-system/distributed-lock.html\" target=\"_blank\" rel=\"noopener noreferrer\">分布式锁介绍</a></li>\n<li><a href=\"https://javaguide.cn/distributed-system/distributed-lock-implementations.html\" target=\"_blank\" rel=\"noopener noreferrer\">分布式锁常见实现方案总结</a></li>\n</ul>\n<h3>分布式事务</h3>\n<p><a href=\"/distributed-system/distributed-transaction.html\" target=\"_blank\">分布式事务常见知识点&amp;面试题总结</a></p>\n<h3>分布式配置中心</h3>\n<p><a href=\"/distributed-system/distributed-configuration-center.html\" target=\"_blank\">分布式配置中心常见知识点&amp;面试题总结</a></p>\n<h2>高性能</h2>\n<h3>数据库优化</h3>\n<ul>\n<li><a href=\"/high-performance/read-and-write-separation-and-library-subtable.html\" target=\"_blank\">数据库读写分离和分库分表</a></li>\n<li><a href=\"/high-performance/data-cold-hot-separation.html\" target=\"_blank\">数据冷热分离</a></li>\n<li><a href=\"/high-performance/sql-optimization.html\" target=\"_blank\">常见 SQL 优化手段总结</a></li>\n<li><a href=\"/high-performance/deep-pagination-optimization.html\" target=\"_blank\">深度分页介绍及优化建议</a></li>\n</ul>\n<h3>负载均衡</h3>\n<p><a href=\"/high-performance/load-balancing.html\" target=\"_blank\">负载均衡常见知识点&amp;面试题总结</a></p>\n<h3>CDN</h3>\n<p><a href=\"/high-performance/cdn.html\" target=\"_blank\">CDN（内容分发网络）常见知识点&amp;面试题总结</a></p>\n<h3>消息队列</h3>\n<ul>\n<li><a href=\"/high-performance/message-queue/message-queue.html\" target=\"_blank\">消息队列基础知识总结</a></li>\n<li><a href=\"/high-performance/message-queue/disruptor-questions.html\" target=\"_blank\">Disruptor 常见知识点&amp;面试题总结</a></li>\n<li><a href=\"/high-performance/message-queue/rabbitmq-questions.html\" target=\"_blank\">RabbitMQ 常见知识点&amp;面试题总结</a></li>\n<li><a href=\"/high-performance/message-queue/rocketmq-questions.html\" target=\"_blank\">RocketMQ 常见知识点&amp;面试题总结</a></li>\n<li><a href=\"/high-performance/message-queue/kafka-questions-01.html\" target=\"_blank\">Kafka 常常见知识点&amp;面试题总结</a></li>\n</ul>\n<h2>高可用</h2>\n<p><a href=\"/high-availability/high-availability-system-design.html\" target=\"_blank\">高可用系统设计指南</a></p>\n<h3>冗余设计</h3>\n<p><a href=\"/high-availability/redundancy.html\" target=\"_blank\">冗余设计详解</a></p>\n<h3>限流</h3>\n<p><a href=\"/high-availability/limit-request.html\" target=\"_blank\">服务限流详解</a></p>\n<h3>降级&amp;熔断</h3>\n<p><a href=\"/high-availability/fallback-and-circuit-breaker.html\" target=\"_blank\">降级&amp;熔断详解</a></p>\n<h3>超时&amp;重试</h3>\n<p><a href=\"/high-availability/timeout-and-retry.html\" target=\"_blank\">超时&amp;重试详解</a></p>\n<h3>集群</h3>\n<p>相同的服务部署多份，避免单点故障。</p>\n<h3>灾备设计和异地多活</h3>\n<p><strong>灾备</strong> = 容灾 + 备份。</p>\n<ul>\n<li><strong>备份</strong>：将系统所产生的的所有重要数据多备份几份。</li>\n<li><strong>容灾</strong>：在异地建立两个完全相同的系统。当某个地方的系统突然挂掉，整个应用系统可以切换到另一个，这样系统就可以正常提供服务了。</li>\n</ul>\n<p><strong>异地多活</strong> 描述的是将服务部署在异地并且服务同时对外提供服务。和传统的灾备设计的最主要区别在于“多活”，即所有站点都是同时在对外提供服务的。异地多活是为了应对突发状况比如火灾、地震等自然或者人为灾害。</p>\n<h2>Star 趋势</h2>\n<p><img src=\"https://api.star-history.com/svg?repos=Snailclimb/JavaGuide&amp;type=Date\" alt=\"Stars\"></p>\n<h2>公众号</h2>\n<p>如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号“<strong>JavaGuide</strong>”。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/xingqiu.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "个人介绍 Q&A",
      "url": "https://javaguide.cn/about-the-author/",
      "id": "https://javaguide.cn/about-the-author/",
      "summary": "这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 这篇文章我会通过 Q&A 的形式简单介绍一下我自己。 我是什么时候毕业的？ 很多老读者应该比较清楚，我是 ...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>这篇文章我会通过 Q&amp;A 的形式简单介绍一下我自己。</p>\n<h2>我是什么时候毕业的？</h2>\n<p>很多老读者应该比较清楚，我是 19 年本科毕业的，刚毕业就去了某家外企“养老”。</p>\n<p>我的学校背景是比较差的，高考失利，勉强过了一本线 20 来分，去了荆州的一所很普通的双非一本。不过，还好我没有因为学校而放弃自己，反倒是比身边的同学都要更努力，整个大学还算过的比较充实。</p>\n<p>下面这张是当时拍的毕业照（后排最中间的就是我）：</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/个人介绍.png\" alt=\"\"></p>\n<h2>我坚持写了多久博客？</h2>\n<p>时间真快啊！我自己是从大二开始写博客的。那时候就是随意地在博客平台上发发自己的学习笔记和自己写的程序。就比如 <a href=\"/cs-basics/network/computer-network-xiexiren-summary.html\" target=\"_blank\">谢希仁老师的《计算机网络》内容总结</a> 这篇文章就是我在大二学习计算机网络这门课的时候对照着教材总结的。</p>\n<p>身边也有很多小伙伴经常问我：“我现在写博客还晚么？”</p>\n<p>我觉得哈！如果你想做什么事情，尽量少问迟不迟，多问自己值不值得，只要你觉得有意义，就尽快开始做吧！人生很奇妙，我们每一步的重大决定，都会对自己未来的人生轨迹产生影响。是好还是坏，也只有我们自己知道了！</p>\n<p>对我自己来说，坚持写博客这一项决定对我人生轨迹产生的影响是非常正面的！所以，我也推荐大家养成坚持写博客的习惯。</p>\n<h2>我在大学期间赚了多少钱？</h2>\n<p>在校期间，我还通过办培训班、接私活、技术培训、编程竞赛等方式变现 20w+，成功实现“经济独立”。我用自己赚的钱去了重庆、三亚、恩施、青岛等地旅游，还给家里补贴了很多，减轻了父母的负担。</p>\n<p>下面这张是我大一下学期办补习班的时候拍的（离开前的最后一顿饭）：</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/f36bfd719b9b4463b2f1d3edc51faa97~tplv-k3u1fbpfcp-zoom-1.jpeg\" alt=\"补习班的最后一顿晚餐\"></p>\n<p>下面这张是我大三去三亚的时候拍的：</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/psc.jpeg\" alt=\"\"></p>\n<p>其实，我在大学就这么努力地开始赚钱，也主要是因为家庭条件太一般，父母赚钱都太辛苦了！也正是因为我自己迫切地想要减轻父母的负担，所以才会去尝试这么多赚钱的方法。</p>\n<p>我发现做咱们程序员这行的，很多人的家庭条件都挺一般的，选择这个行业的很大原因不是因为自己喜欢，而是为了多赚点钱。</p>\n<p>如果你也想通过接私活变现的话，可以在我的公众号后台回复“<strong>接私活</strong>”来了解一些我的个人经验分享。</p>\n<div style=\"text-align:center\">\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"\"></p>\n</div>\n<h2>为什么自称 Guide？</h2>\n<p>可能是因为我的项目名字叫做 JavaGuide , 所以导致有很多人称呼我为 <strong>Guide 哥</strong>。</p>\n<p>后面，为了读者更方便称呼，我就将自己的笔名改成了 <strong>Guide</strong>。</p>\n<p>我早期写文章用的笔名是 SnailClimb 。很多人不知道这个名字是啥意思，给大家拆解一下就清楚了。SnailClimb=Snail（蜗牛）+Climb(攀登)。我从小就非常喜欢听周杰伦的歌曲，特别是他的《蜗牛》🐌 这首歌曲，另外，当年我高考发挥的算是比较失常，上了大学之后还算是比较“奋青”，所以，我就给自己起的笔名叫做 SnailClimb ，寓意自己要不断向上攀登，嘿嘿 😁</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/37599546f3b34b92a32db579a225aa45~tplv-k3u1fbpfcp-watermark.png\" alt=\"\"></p>\n<h2>后记</h2>\n<p>凡心所向，素履所往，生如逆旅，一苇以航。</p>\n<p>生活本就是有苦有甜。共勉！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/javaguide/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "已经淘汰的 Java 技术，不要再学了！",
      "url": "https://javaguide.cn/about-the-author/deprecated-java-technologies.html",
      "id": "https://javaguide.cn/about-the-author/deprecated-java-technologies.html",
      "summary": "前几天，我在知乎上随手回答了一个问题：“Java 学到 JSP 就学不下去了，怎么办？”。 出于不想让别人走弯路的心态，我回答说：已经淘汰的技术就不要学了，并顺带列举了一些在 Java 开发领域中已经被淘汰的技术。 已经淘汰的 Java 技术 我的回答原内容如下，列举了一些在 Java 开发领域中已经被淘汰的技术： JSP 原因：JSP 已经过时，无法...",
      "content_html": "<p>前几天，我在知乎上随手回答了一个问题：“Java 学到 JSP 就学不下去了，怎么办？”。</p>\n<p>出于不想让别人走弯路的心态，我回答说：已经淘汰的技术就不要学了，并顺带列举了一些在 Java 开发领域中已经被淘汰的技术。</p>\n<h2>已经淘汰的 Java 技术</h2>\n<p>我的回答原内容如下，列举了一些在 Java 开发领域中已经被淘汰的技术：</p>\n<p><strong>JSP</strong></p>\n<ul>\n<li><strong>原因</strong>：JSP 已经过时，无法满足现代 Web 开发需求；前后端分离成为主流。</li>\n<li><strong>替代方案</strong>：模板引擎（如 Thymeleaf、Freemarker）在传统全栈开发中更流行；而在前后端分离架构中，React、Vue、Angular 等现代前端框架已取代 JSP 的角色。</li>\n<li><strong>注意</strong>：一些国企和央企的老项目可能仍然在使用 JSP，但这种情况越来越少见。</li>\n</ul>\n<p><strong>Struts（尤其是 1.x）</strong></p>\n<ul>\n<li><strong>原因</strong>：配置繁琐、开发效率低，且存在严重的安全漏洞（如世界著名的 Apache Struts 2 漏洞）。此外，社区维护不足，生态逐渐萎缩。</li>\n<li><strong>替代方案</strong>：Spring MVC 和 Spring WebFlux 提供了更简洁的开发体验、更强大的功能以及完善的社区支持，完全取代了 Struts。</li>\n</ul>\n<p><strong>EJB (Enterprise JavaBeans)</strong></p>\n<ul>\n<li><strong>原因</strong>：EJB 过于复杂，开发成本高，学习曲线陡峭，在实际项目中逐步被更轻量化的框架取代。</li>\n<li><strong>替代方案</strong>：Spring/Spring Boot 提供了更加简洁且功能强大的企业级开发解决方案，几乎已经成为 Java 企业开发的事实标准。此外，国产的 Solon 和云原生友好的 Quarkus 等框架也非常不错。</li>\n</ul>\n<p><strong>Java Applets</strong></p>\n<ul>\n<li><strong>原因</strong>：现代浏览器（如 Chrome、Firefox、Edge）早已全面移除对 Java Applets 的支持，同时 Applets 存在严重的安全性问题。</li>\n<li><strong>替代方案</strong>：HTML5、WebAssembly 以及现代 JavaScript 框架（如 React、Vue）可以实现更加安全、高效的交互体验，无需插件支持。</li>\n</ul>\n<p><strong>SOAP / JAX-WS</strong></p>\n<ul>\n<li><strong>原因</strong>：SOAP 和 JAX-WS 过于复杂，数据格式冗长（XML），对开发效率和性能不友好。</li>\n<li><strong>替代方案</strong>：RESTful API 和 RPC 更轻量、高效，是现代微服务架构的首选。</li>\n</ul>\n<p><strong>RMI（Remote Method Invocation）</strong></p>\n<ul>\n<li><strong>原因</strong>：RMI 是一种早期的 Java 远程调用技术，但兼容性差、配置繁琐，且性能较差。</li>\n<li><strong>替代方案</strong>：RESTful API 和 PRC 提供了更简单、高效的远程调用解决方案，完全取代了 RMI。</li>\n</ul>\n<p><strong>Swing / JavaFX</strong></p>\n<ul>\n<li><strong>原因</strong>：桌面应用在开发领域的份额大幅减少，Web 和移动端成为主流。Swing 和 JavaFX 的生态不如现代跨平台框架丰富。</li>\n<li><strong>替代方案</strong>：跨平台桌面开发框架（如 Flutter Desktop、Electron）更具现代化体验。</li>\n<li><strong>注意</strong>：一些国企和央企的老项目可能仍然在使用 Swing / JavaFX，但这种情况越来越少见。</li>\n</ul>\n<p><strong>Ant</strong></p>\n<ul>\n<li><strong>原因</strong>：Ant 是一种基于 XML 配置的构建工具，缺乏易用性，配置繁琐。</li>\n<li><strong>替代方案</strong>：Maven 和 Gradle 提供了更高效的项目依赖管理和构建功能，成为现代构建工具的首选。</li>\n</ul>\n<h2>杠精言论</h2>\n<p>没想到，评论区果然出现了一类很常见的杠精：</p>\n<blockquote>\n<p>“学的不是技术，是思想。那爬也是人类不需要的技术吗？为啥你一生下来得先学会爬？如果基础思想都不会就去学各种框架，到最后只能是只会 CV 的废物！”</p>\n</blockquote>\n<img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/prattle/deprecated-java-technologies-zhihu-comments.png\" style=\"zoom:50%;\">\n<p>这句话表面上看似有道理，但实际上却暴露了一个人的<strong>无知和偏执</strong>。</p>\n<p><strong>知识越贫乏的人，相信的东西就越绝对</strong>，因为他们从未认真了解过与自己观点相对立的角度，也缺乏对技术发展的全局认识。</p>\n<p>举个例子，我刚开始学习 Java 后端开发的时候，完全没什么经验，就随便买了一本书开始看。当时看的是**《Java Web 整合开发王者归来》**这本书（梦开始的地方）。</p>\n<p>在我上大学那会儿，这本书的很多内容其实已经过时了，比如它花了大量篇幅介绍 JSP、Struts、Hibernate、EJB 和 SVN 等技术。不过，直到现在，我依然非常感谢这本书，带我走进了 Java 后端开发的大门。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/prattle/java-web-integration-development-king-returns.png\" alt=\"\"></p>\n<p>这本书一共 <strong>1010</strong> 页，我当时可以说是废寝忘食地学，花了很长时间才把整本书完全“啃”下来。</p>\n<p>回头来看，我如果能有意识地避免学习这些已经淘汰的技术，真的可以节省大量时间去学习更加主流和实用的内容。</p>\n<p>那么，这些被淘汰的技术有用吗？说句实话，<strong>屁用没有，纯粹浪费时间</strong>。</p>\n<p><strong>既然都要花时间学习，为什么不去学那些更主流、更有实际价值的技术呢？</strong></p>\n<p>现在本身就很卷，不管是 Java 方向还是其他技术方向，要学习的技术都很多。</p>\n<p>想要理解所谓的“底层思想”，与其浪费时间在 JSP 这种已经不具备实际应用价值的技术上，不如深入学习一下 Servlet，研究 Spring 的 AOP 和 IoC 原理，从源码角度理解 Spring MVC 的工作机制。</p>\n<p>这些内容，不仅能帮助你掌握核心的思想，还能在实际开发中真正派上用场，这难道不比花大量时间在 JSP 上更有意义吗？</p>\n<h2>还有公司在用的技术就要学吗？</h2>\n<p>我把这篇文章的相关言论发表在我的<a href=\"https://mp.weixin.qq.com/s/lf2dXHcrUSU1pn28Ercj0w\" target=\"_blank\" rel=\"noopener noreferrer\">公众号</a>之后，又收到另外一类在我看来非常傻叉的言论：</p>\n<ul>\n<li>“虽然 JSP 很老了，但还是得学学，会用就行，因为我们很多老项目还在用。”</li>\n<li>“很多央企和国企的老项目还在用，肯定得学学啊！”</li>\n</ul>\n<p>这种观点完全是钻牛角尖！如果按这种逻辑，那你还需要去学 Struts2、SVN、JavaFX 等过时技术，因为它们也还有公司在用。我有一位大学同学毕业后去了武汉的一家国企，写了一年 JavaFX 就受不了跑了。他在之前从来没有接触过 JavaFX，招聘时也没被问过相关问题。</p>\n<p>一定不要假设自己要面对的是过时技术栈的项目。你要找工作肯定要用主流技术栈去找，还要尽量找能让自己技术有成长，干着也舒服点。真要是找不到合适的工作，去维护老项目，那都是后话，现学现卖就行了。</p>\n<p><strong>对于初学者来说别人劝了还非要学习淘汰的技术，多少脑子有点不够用，基本可以告别这一行了！</strong></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/about-the-author/prattle/java-web-integration-development-king-returns.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "抄袭狗，你冬天睡觉脚必冷！！！",
      "url": "https://javaguide.cn/about-the-author/dog-that-copies-other-people-essay.html",
      "id": "https://javaguide.cn/about-the-author/dog-that-copies-other-people-essay.html",
      "summary": "抄袭狗真的太烦了。。。 听朋友说我的文章在知乎又被盗了，原封不动地被别人用来引流。 而且！！！这还不是最气的。 这人还在文末注明的原出处还不是我的。。。 也就是说 CSDN 有另外一位抄袭狗盗了我的这篇文章并声明了原创，知乎抄袭狗又原封不动地搬运了这位 CSDN 抄袭狗的文章。 真可谓离谱他妈给离谱开门，离谱到家了。 我打开知乎抄袭狗注明的原出处链接，...",
      "content_html": "<p>抄袭狗真的太烦了。。。</p>\n<p>听朋友说我的文章在知乎又被盗了，原封不动地被别人用来引流。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/39f223bd8d8240b8b7328f7ab6edbc57~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>而且！！！这还不是最气的。</p>\n<p>这人还在文末注明的原出处还不是我的。。。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/fa47e0752f4b4b57af424114bc6bc558~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>也就是说 CSDN 有另外一位抄袭狗盗了我的这篇文章并声明了原创，知乎抄袭狗又原封不动地搬运了这位 CSDN 抄袭狗的文章。</p>\n<p>真可谓离谱他妈给离谱开门，离谱到家了。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/6f8d281579224b13ad235c28e1d7790e~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>我打开知乎抄袭狗注明的原出处链接，好家伙，一模一样的内容，还表明了原创。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/6a6d7b206b6a43ec9b0055a8f47a30be~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>看了一下 CSDN 这位抄袭狗的文章，好家伙，把我高赞回答搬运了一个遍。。。真是很勤奋了。。。</p>\n<p>CSDN 我就不想多说了，就一大型文章垃圾场，都是各种不规范转载，各种收费下载的垃圾资源。这号称国内流量最大的技术网站贼恶心，吃香太难看，能不用就不要用吧！</p>\n<p>像我自己平时用 Google 搜索的时候，都是直接屏蔽掉 CSDN 这个站点的。只需要下载一个叫做 Personal Blocklist 的 Chrome 插件，然后将 <a href=\"http://blog.csdn.net\" target=\"_blank\" rel=\"noopener noreferrer\">blog.csdn.net</a> 添加进黑名单就可以了。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/be151d93cd024c6e911d1a694212d91c~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>我的文章基本被盗完了，关键是我自己发没有什么流量，反而是盗我文章的那些人比我这个原作者流量还大。</p>\n<p>这是什么世道，是人性的扭曲还是道德的沦丧？</p>\n<p>不过，也没啥，CSDN 这垃圾网站不去发文也无妨。</p>\n<p>看看 CSDN 热榜上的文章都是一些什么垃圾，不是各种广告就是一些毫无质量的拼凑文。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/cd07efe86af74ea0a07d29236718ddc8~tplv-k3u1fbpfcp-zoom-1-20230717155426403.png\" alt=\"\"></p>\n<p>当然了，也有极少部分的高质量文章，比如涛哥、二哥、冰河、微观技术等博主的文章。</p>\n<p>还有很多视频平台（比如抖音、哔哩哔哩）上面有很多博主直接把别人的原创拿来做个视频，用来引流或者吸粉。</p>\n<p>今天提到的这篇被盗的文章曾经就被一个培训机构拿去做成了视频用来引流。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/9dda1e36ceff4cbb9b0bf9501b279be5~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>作为个体，咱也没啥办法，只能遇到一个举报一个。。。</p>\n",
      "image": "https://oss.javaguide.cn/p3-juejin/39f223bd8d8240b8b7328f7ab6edbc57~tplv-k3u1fbpfcp-zoom-1.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "入职培训一个月后的感受",
      "url": "https://javaguide.cn/about-the-author/feelings-after-one-month-of-induction-training.html",
      "id": "https://javaguide.cn/about-the-author/feelings-after-one-month-of-induction-training.html",
      "summary": "不知不觉已经入职一个多月了，在入职之前我没有在某个公司实习过或者工作过，所以很多东西刚入职工作的我来说还是比较新颖的。学校到职场的转变，带来了角色的转变，其中的差别因人而异。对我而言，在学校的时候课堂上老师课堂上教的东西，自己会根据自己的兴趣选择性接受，甚至很多课程你不想去上的话，还可以逃掉。到了公司就不一样了，公司要求你会的技能你不得不学，除非你不想...",
      "content_html": "<p>不知不觉已经入职一个多月了，在入职之前我没有在某个公司实习过或者工作过，所以很多东西刚入职工作的我来说还是比较新颖的。学校到职场的转变，带来了角色的转变，其中的差别因人而异。对我而言，在学校的时候课堂上老师课堂上教的东西，自己会根据自己的兴趣选择性接受，甚至很多课程你不想去上的话，还可以逃掉。到了公司就不一样了，公司要求你会的技能你不得不学，除非你不想干了。在学校的时候大部分人编程的目的都是为了通过考试或者找到一份好工作，真正靠自己兴趣支撑起来的很少，到了工作岗位之后我们编程更多的是因为工作的要求，相比于学校的来说会一般会更有挑战而且压力更大。在学校的时候，我们最重要的就是对自己负责，我们不断学习知识去武装自己，但是到了公司之后我们不光要对自己负责，更要对公司负责，毕竟公司出钱请你过来，不是让你一直 on beach 的。</p>\n<p>刚来公司的时候，因为公司要求，我换上了 Mac 电脑。由于之前一直用的是 Windows 系统，所以非常不习惯。刚开始用 Mac 系统的时候笨手笨脚，自己会很明显的感觉自己的编程效率降低了至少 3 成。当时内心还是挺不爽的，心里也总是抱怨为什么不直接用 Windows 系统或者 Linux 系统。不过也挺奇怪，大概一个星期之后，自己就开始慢慢适应使用 Mac 进行编程，甚至非常喜欢。我这里不想对比 Mac 和 Windows 编程体验哪一个更好，我觉得还是因人而异，相同价位的 Mac 的配置相比于 Windows 确实要被甩几条街。不过 Mac 的编程和使用体验确实不错，当然你也可以选择使用 Linux 进行日常开发，相信一定很不错。 另外，Mac 不能玩一些主流网络游戏，对于一些克制不住自己想玩游戏的朋友是一个不错的选择。</p>\n<p>不得不说 ThoughtWorks 的培训机制还是很不错的。应届生入职之后一般都会安排培训，与往年不同的是，今年的培训多了中国本地班（TWU-C）。作为本地班的第一期学员，说句心里话还是很不错。8 周的培训，除了工作需要用到的基本技术比如 ES6、SpringBoot 等等之外，还会增加一些新员工基本技能的培训比如如何高效开会、如何给别人正确的提 Feedback、如何对代码进行重构、如何进行 TDD 等等。培训期间不定期的有活动，比如 Weekend Trip、 City Tour、Cake time 等等。最后三周还会有一个实际的模拟项目，这个项目基本和我们正式工作的实际项目差不多，我个人感觉很不错。目前这个项目已经正式完成了一个迭代，我觉得在做项目的过程中，收获最大的不是项目中使用的技术，而是如何进行团队合作、如何正确使用 Git 团队协同开发、一个完成的迭代是什么样子的、做项目的过程中可能遇到那些问题、一个项目运作的完整流程等等。</p>\n<p>ThoughtWorks 非常提倡分享、提倡帮助他人成长，这一点在公司的这段时间深有感触。培训期间，我们每个人会有一个 Trainer 负责，Trainer 就是日常带我们上课和做项目的同事，一个 Trainer 大概会负责 5 - 6 个人。Trainer 不定期都会给我们最近表现的 Feedback (反馈) ，我个人觉得这个并不是这是走走形式，Trainer 们都很负责，很多时候都是在下班之后找我们聊天。同事们也都很热心，如果你遇到问题，向别人询问，其他人如果知道的话一般都会毫无保留的告诉你，如果遇到大部分都不懂的问题，甚至会组织一次技术 Session 分享。上周五我在我们小组内进行了一次关于 Feign 远程调用的技术分享，因为 team 里面大家对这部分知识都不太熟悉，但是后面的项目进展大概率会用到这部分知识。我刚好研究了这部分内容，所以就分享给了组内的其他同事，以便于项目更好的进行。</p>\n<p>另外，ThoughtWorks 也是一家非常提倡 Feedback (反馈) 文化的公司，反馈是告诉人们我们对他们的表现的看法以及他们应该如何更好地做到这一点。刚开始我并没有太在意，慢慢地自己确实感觉到正确的进行反馈对他人会有很大的帮助。因为人在做很多事情的时候，会很难发现别人很容易看到的一些小问题。就比如一个很有趣的现象一样，假如我们在做项目的时候没有测试这个角色，如果你完成了自己的模块，并且自己对这个模块测试了很多遍，你发现已经没啥问题了。但是，到了实际使用的时候会很大概率出现你之前从来没有注意的问题。解释这个问题的说法是：每个人的视野或多或少都是有盲点的，这与我们的关注点息息相关。对于自己做的东西，很多地方自己测试很多遍都不会发现，但是如果让其他人帮你进行测试的话，就很大可能会发现很多显而易见的问题。</p>\n<p><img src=\"https://oss.javaguide.cn/github/about-the-author/feedback.png\" alt=\"\"></p>\n<p>工作之后，平时更新公众号、专栏还有维护 Github 的时间变少了。实际上，很多时候下班回来后，都有自己的时间来干自己的事情，但是自己也总是找工作太累或者时间比较零散的接口来推掉了。到了今天，翻看 Github 突然发现 14 天前别人在 Github 上给我提的 PR 我还没有处理。这一点确实是自己没有做好的地方，没有合理安排好自己的时间。实际上自己有很多想写的东西，后面会慢慢将他们提上日程。工作之后，更加发现下班后的几个小时如何度过确实很重要 ，如果你觉得自己没有完成好自己白天该做的工作的话，下班后你可以继续忙白天没有忙完的工作，如果白天的工作对于你游刃有余的话，下班回来之后，你大可去干自己感兴趣的事情，学习自己感兴趣的技术。做任何事情都要基于自身的基础，切不可好高骛远。</p>\n<p>工作之后身边也会有很多厉害的人，多从他人身上学习我觉得是每个职场人都应该做的。这一届和我们一起培训的同事中，有一些技术很厉害的，也有一些技术虽然不是那么厉害，但是组织能力以及团队协作能力特别厉害的。有一个特别厉害的同事，在我们还在学 SpringBoot 各种语法的时候，他自己利用业余时间写了一个简化版的 SpringBoot ，涵盖了 Spring 的一些常用注解比如 <code>@RestController</code>、<code>@Autowried</code>、<code>@Pathvairable</code>、<code>@RestquestParam</code>等等（已经联系这位同事，想让他开源一下，后面会第一时间同步到公众号，期待一下吧！）。我觉得这位同事对于编程是真的有兴趣，他好像从初中就开始接触编程了，对于各种底层知识也非常感兴趣，自己写过实现过很多比较底层的东西。他的梦想是在 Github 上造一个 20k Star 以上的轮子。我相信以这位同事的能力一定会达成目标的，在这里祝福这位同事，希望他可以尽快实现这个目标。</p>\n<p>这是我入职一个多月之后的个人感受，很多地方都是一带而过，后面我会抽时间分享自己在公司或者业余学到的比较有用的知识给各位，希望看过的人都能有所收获。</p>\n",
      "image": "https://oss.javaguide.cn/github/about-the-author/feedback.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "从毕业到入职半年的感受",
      "url": "https://javaguide.cn/about-the-author/feelings-of-half-a-year-from-graduation-to-entry.html",
      "id": "https://javaguide.cn/about-the-author/feelings-of-half-a-year-from-graduation-to-entry.html",
      "summary": "如果大家看过我之前的介绍的话，就会知道我是 19 年毕业的几百万应届毕业生中的一员。这篇文章主要讲了一下我入职大半年的感受，文中有很多自己的主观感受，如果你们有任何不认同的地方都可以直接在评论区说出来，会很尊重其他人的想法。 简单说一下自己的情况吧！我目前是在一家外企，每天的工作和大部分人一样就是做开发。毕业到现在，差不多也算是工作半年多了，也已经过了...",
      "content_html": "<p>如果大家看过我之前的介绍的话，就会知道我是 19 年毕业的几百万应届毕业生中的一员。这篇文章主要讲了一下我入职大半年的感受，文中有很多自己的主观感受，如果你们有任何不认同的地方都可以直接在评论区说出来，会很尊重其他人的想法。</p>\n<p>简单说一下自己的情况吧！我目前是在一家外企，每天的工作和大部分人一样就是做开发。毕业到现在，差不多也算是工作半年多了，也已经过了公司 6 个月的试用期。目前在公司做过两个偏向于业务方向的项目，其中一个正在做。你很难想象我在公司做的两个业务项目的后端都没有涉及到分布式/微服务，没有接触到 Redis、Kafka 等等比较“高大上”的技术在项目中的实际运用。</p>\n<p>第一个项目做的是公司的内部项目——员工成长系统。抛去员工成长系统这个名字，实际上这个系统做的就是绩效考核比如你在某个项目组的表现。这个项目的技术是 Spring Boot+ JPA + Spring Security + K8S + Docker + React。第二个目前正在做的是一个集成游戏 (cocos)、Web 管理端 (Spring Boot + Vue) 和小程序 (Taro) 项目。</p>\n<p>是的，我在工作中的大部分时间都和 CRUD 有关，每天也会写前端页面。之前我认识的一个朋友 ，他听说我做的项目中大部分内容都是写业务代码之后就非常纳闷，他觉得单纯写业务代码得不到提升？what?你一个应届生，连业务代码都写不好你给我说这个！所以，<strong>我就很纳闷不知道为什么现在很多连业务代码都写不好的人为什么人听到 CRUD 就会反感？至少我觉得在我工作这段时间我的代码质量得到了提升、定位问题的能力有了很大的改进、对于业务有了更深的认识，自己也可以独立完成一些前端的开发了。</strong></p>\n<p>其实，我个人觉得能把业务代码写好也没那么容易，抱怨自己天天做 CRUD 工作之前，看看自己 CRUD 的代码写好没。再换句话说，单纯写 CRUD 的过程中你搞懂了哪些你常用的注解或者类吗？这就像一个只会 <code>@Service</code>、<code>@Autowired</code>、<code>@RestController</code>等等最简单的注解的人说我已经掌握了 Spring Boot 一样。</p>\n<p>不知道什么时候开始大家都会觉得有实际使用 Redis、MQ 的经验就很牛逼了，这可能和当前的面试环境有关系。你需要和别人有差异，你想进大厂的话，好像就必须要这些技术比较在行，好吧，没有好像，自信点来说对于大部分求职者这些技术都是默认你必备的了。</p>\n<p><strong>实话实说，我在大学的时候就陷入过这个“伪命题”中</strong>。在大学的时候，我大二因为加入了一个学校的偏技术方向的校媒才接触到 Java ，当时我们学习 Java 的目的就是开发一个校园通。 大二的时候，编程相当于才入门水平的我才接触 Java，花了一段时间才掌握 Java 基础。然后，就开始学习安卓开发。</p>\n<p>到了大三上学期，我才真正确定要走 Java 后台的方向，找 Java 后台的开发工作。学习了 3 个月左右的 WEB 开发基础之后，我就开始学习分布式方面内容比如 Redis、Dubbo 这些。我当时是通过看书 + 视频 + 博客的方式学习的，自学过程中通过看视频自己做过两个完整的项目，一个普通的业务系统，一个是分布式的系统。<strong>我当时以为自己做完之后就很牛逼了，我觉得普通的 CRUD 工作已经不符合我当前的水平了。哈哈！现在看来，当时的我过于哈皮！</strong></p>\n<p>这不！到了大三暑假跟着老师一起做项目的时候就出问题了。大三的时候，我们跟着老师做的是一个绩效考核系统，业务复杂程度中等。这个项目的技术用的是：SSM + Shiro + JSP。当时，做这个项目的时候我遇到各种问题，各种我以为我会写的代码都不会写了，甚至我写一个简单的 CRUD 都要花费好几天的时间。所以，那时候我都是边复习边学习边写代码。虽然很累，但是，那时候学到了很多，也让我在技术面前变得更加踏实。我觉得这“<strong>这个项目已经没有维护的可能性</strong>”这句话是我对我过的这个项目最大的否定了。</p>\n<p>技术千变万化，掌握最核心的才是王道。我们前几年可能还在用 Spring 基于传统的 XML 开发，现在几乎大家都会用 Spring Boot 这个开发利器来提升开发速度，再比如几年前我们使用消息队列可能还在用 ActiveMQ，到今天几乎都没有人用它了，现在比较常用的就是 Rocket MQ、Kafka 。技术更新换代这么快的今天，你是无法把每一个框架/工具都学习一遍的。</p>\n<p><strong>很多初学者上来就想通过做项目学习，特别是在公司，我觉得这个是不太可取的。</strong> 如果的 Java 基础或者 Spring Boot 基础不好的话，建议自己先提前学习一下之后再开始看视频或者通过其他方式做项目。 <strong>还有一点就是，我不知道为什么大家都会说边跟着项目边学习做的话效果最好，我觉得这个要加一个前提是你对这门技术有基本的了解或者说你对编程有了一定的了解。</strong></p>\n<p><strong>划重点！！！在自己基础没打牢的情况下，单纯跟着视频做一点用没有。你会发现你看完视频之后，让你自己写代码的时候又不会写了。</strong></p>\n<p>不知道其他公司的程序员是怎么样的？我感觉技术积累很大程度在乎平时，单纯依靠工作绝大部分情况只会加快自己做需求的熟练度，当然，写多了之后或多或少也会提升你对代码质量的认识（前提是你有这个意识）。</p>\n<p>工作之余，我会利用业余时间来学习自己想学的东西。工作中的例子就是我刚进公司的第一个项目用到了 Spring Security + JWT ，因为当时自己对于这个技术不太了解，然后就在工作之外大概花了一周的时间学习写了一个 Demo 分享了出来，GitHub 地址：<a href=\"https://github.com/Snailclimb/spring-security-jwt-guide\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Snailclimb/spring-security-jwt-guide</a> 。以次为契机，我还分享了</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485626&amp;idx=1&amp;sn=3247aa9000693dd692de8a04ccffeec1&amp;chksm=cea24771f9d5ce675ea0203633a95b68bfe412dc6a9d05f22d221161147b76161d1b470d54b3&amp;token=684071313&amp;lang=zh_CN&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《一问带你区分清楚 Authentication、Authorization 以及 Cookie、Session、Token》</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485655&amp;idx=1&amp;sn=583eeeb081ea21a8ec6347c72aa223d6&amp;chksm=cea2471cf9d5ce0aa135f2fb9aa32d98ebb3338292beaccc1aae43d1178b16c0125eb4139ca4&amp;token=1737409938&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">JWT 身份认证优缺点分析以及常见问题解决方案</a></li>\n</ul>\n<p>另外一个最近的例子是因为肺炎疫情在家的这段时间，自学了 Kafka，并且正在准备写一系列的入门文章，目前已经完成了：</p>\n<ol>\n<li>大白话 Kafka 入门；</li>\n<li>Kafka 安装和基本功能体验；</li>\n<li>Spring Boot 整合 Kafka 发送和接受消息；</li>\n<li>Spring Boot 整合 Kafka 发送和接受消息的一些事务、错误消息处理等等。</li>\n</ol>\n<p>还没完成的：</p>\n<ol>\n<li>Kafka 高级特性比如工作流程、Kafka 为什么快等等的分析；</li>\n<li>源码阅读分析；</li>\n<li>……</li>\n</ol>\n<p><strong>所以，我觉得技术的积累和沉淀很大程度在乎工作之外的时间(大佬和一些本身就特别厉害的除外)。</strong></p>\n<p><strong>未来还有很长的路要走，即使再有精力也学不完你想学的所有技术，适当取舍、适当妥协，适当娱乐。</strong></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "我曾经也是网瘾少年",
      "url": "https://javaguide.cn/about-the-author/internet-addiction-teenager.html",
      "id": "https://javaguide.cn/about-the-author/internet-addiction-teenager.html",
      "summary": "这篇文章写于 2021 年高考前夕。 聊到高考，无数人都似乎有很多话说。今天就假借高考的名义，简单来聊聊我的高中求学经历吧！ 说实话，我自己的高中求学经历真的还不算平淡，甚至有点魔幻，所以还是有很多话想要说的。 这篇文章大概会从我的初中一直介绍到高中，每一部分我都不会花太多篇幅，就简单聊聊吧！ 以下所有内容皆是事实，没有任何夸大的地方，稍微有一点点魔幻...",
      "content_html": "<blockquote>\n<p>这篇文章写于 2021 年高考前夕。</p>\n</blockquote>\n<p>聊到高考，无数人都似乎有很多话说。今天就假借高考的名义，简单来聊聊我的高中求学经历吧！</p>\n<p>说实话，我自己的高中求学经历真的还不算平淡，甚至有点魔幻，所以还是有很多话想要说的。</p>\n<p>这篇文章大概会从我的初中一直介绍到高中，每一部分我都不会花太多篇幅，就简单聊聊吧！</p>\n<p><strong>以下所有内容皆是事实，没有任何夸大的地方，稍微有一点点魔幻。</strong></p>\n<h2>刚开始接触电脑</h2>\n<p>最开始接触电脑是在我刚上五年级的时候，那时候家里没电脑，刚开始上网都是在黑网吧玩的。</p>\n<p>黑网吧大概就是下面这样式儿的，一个没有窗户的房间里放了很多台老式电脑，非常拥挤。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/internet-addiction-teenager/heiwangba.png\" alt=\"黑网吧\"></p>\n<p>在黑网吧上网的经历也是一波三折，经常会遇到警察来检查或者碰到大孩子骚扰。在黑网吧上网的一年多中，我一共两次碰到警察来检查，主要是看有没有未成年人（当时黑网吧里几乎全是未成年人），实际感觉像是要问黑网吧老板要点好处。碰到大孩子骚扰的次数就比较多，大孩子经常抢我电脑，还威胁我把身上所有的钱给他们。我当时一个人也比较怂，被打了几次之后，就尽量避开大孩子来玩的时间去黑网吧，身上也只带很少的钱。小时候的性格就比较独立，在外遇到事情我一般也不会给家里人说（因为说了也没什么用，家人给我的安全感很少）。</p>\n<p>我现在已经记不太清当时是被我哥还是我姐带进网吧的，好像是我姐。</p>\n<p>起初的时候，自己就是玩玩流行蝴蝶剑、单机摩托之类的单机游戏。但是，也没有到沉迷的地步，只是觉得这东西确实挺好玩的，一玩就可以玩一下午，恋恋不舍。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books2a6021b9-e7a0-41c4-b69e-a652f7bc3e12-20200802173601289.png\" alt=\"\"></p>\n<h2>小学毕业后开始有网瘾</h2>\n<p>开始有网瘾是在小学毕业的时候，在我玩了一款叫做 <strong>QQ 飞车</strong> 的游戏之后（好像是六年级末就开始玩了）。我艹，当时真的被这游戏吸引了。<strong>每天上课都幻想自己坐在车里面飘逸，没错，当时就觉得秋名山车神就是我啦！</strong></p>\n<p>我当时技术还是挺不错的，整个网吧玩这个游戏的貌似还没有可以打败我的（我们当时经常会开放切磋）。</p>\n<p>QQ 飞车这款戏当时还挺火的，很多 90 后的小伙伴应该比较熟悉。</p>\n<p>我记得，那时候上网还不要身份证，10 元办一张网卡就行了，网费也是一元一小时。我就经常不吃早饭，攒钱用来上网。只要口袋里有钱，我都会和我的小伙伴奔跑到网吧一起玩 QQ 飞车。青回啊！</p>\n<blockquote>\n<p>说到这，我情不自禁地打开自己的 Windows 电脑，下载了 Wegame ，然后下载了 QQ 飞车。</p>\n</blockquote>\n<p>到了初二的时候，就没玩 QQ 飞车了。我的等级也永久定格在了 <strong>120</strong> 级，这个等级在当时那个升级难的一匹的年代，算的上非常高的等级了。</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/b488618c-3c25-4bc9-afd4-7324e27553bd-20200802175534614.png\" alt=\"\"></p>\n<h2>初二网瘾爆发</h2>\n<p>网瘾爆发是在上了初中之后。初二的时候，最为猖狂，自己当时真的是太痴迷于 <strong>穿越火线</strong> 这款游戏了，比 QQ 飞车还要更痴迷一些。每天上课都在想像自己拿起枪横扫地方阵营的场景，心完全不在学习上。</p>\n<p>我经常每天早上起早去玩别人包夜留下的机子，毕竟那时候上学也没什么钱嘛！我几乎每个周五晚上都会趁家人睡着之后，偷偷跑出去通宵。整个初二我通宵了无数次，我的眼睛就是这样近视的。</p>\n<p>有网瘾真的很可怕，为了上网什么都敢做。当时我家住在顶楼的隔热层，我每次晚上偷偷出去上网，为了不被家里人发现，要从我的房间的窗户爬出去，穿过几栋楼，经过几间无人居住的顶楼隔热层之后再下楼。现在想想，还是比较危险的。而且，我天生比较怕黑。当时为了上网，每次穿过这么多没人居住的顶层隔热层都没怕过。你让我现在再去，我都不敢，实在是佩服当年的自己的啊！</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/image-20230429114622340.png\" alt=\"我家楼顶拍的雪景\"></p>\n<p>周五晚上通宵完之后，我会睡到中午，然后下午继续去网吧玩。到了周日，基本都是直接从早上 8 点玩到晚上 9 点 10 点。那时候精力是真旺盛，真的完全不会感觉比较累，反而乐在其中。</p>\n<p>我的最终军衔停留在了两个钻石，玩过的小伙伴应该清楚这在当时要玩多少把（现在升级比较简单）。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/cf.png\" alt=\"\"></p>\n<p>ps: 回坑 CF 快一年了，目前的军衔是到了两颗星中校 3 了。</p>\n<p>那时候成绩挺差的。这样说吧！我当时在很普通的一个县级市的高中，全年级有 500 来人，我基本都是在 280 名左右。而且，整个初二我都没有学物理，上物理课就睡觉，考试就交白卷。</p>\n<p>为什么对物理这么抵触呢？这是因为开学不久的一次物理课，物理老师误会我在上课吃东西还狡辩，扇了我一巴掌。那时候心里一直记仇到大学，想着以后自己早晚有时间把这个物理老师暴打一顿。</p>\n<h2>初三开启学习模式</h2>\n<p>初三上学期的时候突然觉悟，像是开窍了一样，当时就突然意识到自己马上就要升高中了，要开始好好搞搞学习了。</p>\n<p>诶，其实也不算是开窍，主要还是为了让自己能在家附近上学，这样上网容易一些。因为当时我家就在我们当地的二中附近，附近有特别特别多的网吧，上网特别特别容易，加上我又能走读。</p>\n<p>像我初中在的那个学校，年级前 80 的话基本才有可能考得上二中。经过努力，初三上学期的第一次月考，我直接从 280 多名进步到了年级 50 多名，有机会考入二中。当时还因为进步太大，被当作 <strong>进步之星</strong> 在讲台上给整个年级做演讲，分享经验。这也是我第一次在这么多人面前讲话，挺紧张的，但是挺爽的，在暗恋对象面前赚足了面子。</p>\n<p>其实在初三的时候，我的网瘾还是很大。不过，我去玩游戏的前提都是自己把所有任务做完，并且上课听讲也相对比较认真的听。</p>\n<p>初三那会，我通宵的次数变少了一些，但会经常晚上趁着家人睡觉了，偷偷跑出去玩到凌晨 2 点多回来。</p>\n<p>当时，我们当地的高中有一个政策是每个学校的成绩比较优秀的学生可以参加 <strong>高中提前招生考试</strong> ，只要考上了就不用参加中考了。我当时也有幸参加了这次考试并成功进入了我们当地的二中。</p>\n<p>在我参加高中提前考试前的一个晚上，我半夜 12 点趁着妈妈睡着，跑去了网吧玩 CF 到凌晨 3 点多回来。就那一次我被抓了现行，到家之后发现妈妈就坐在客厅等我，训斥一顿后，我就保证以后不再晚上偷偷跑出去了。</p>\n<blockquote>\n<p>这里要说明一点：我的智商我自己有自知之明的，属于比较普通的水平吧！前进很大的主要原因是自己基础还行，特别是英语和物理。英语是因为自己喜欢，加上小学就学了很多初中的英语课程。物理的话就很奇怪，虽然初二也不怎么听物理课，也不会物理，但是到了初三之后自己就突然开窍了。真的！我现在都感觉很奇怪。然后，到了高中之后，我的英语和物理依然是我最好的两门课。大学的兼职，我出去做家教都是教的高中物理。</p>\n</blockquote>\n<h2>高中从小班掉到平行班</h2>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/internet-addiction-teenager/wodegaozhong.png\" alt=\"出高考成绩后回高中母校拍摄\"></p>\n<p>由于参加了高中提前招生考试，我提前 4 个月就来到了高中，进入了小班，开始学习高中的课程。</p>\n<p>上了高中的之后，我上课就偷偷看小说，神印王座、斗罗大陆、斗破苍穹很多小说都是当时看的。中午和晚上回家之后，就在家里玩几把 DNF。当时家里也买了电脑，姥爷给买的，是对自己顺利进入二中的奖励。到我卸载 DNF 的时候，已经练了 4 个满级的号，两个接近满级的号。</p>\n<p>当时我的空间专门有一个相册里面放的全是 DNF 的一些照片和截图，无比痴迷于练级和刷图。</p>\n<p>在高中待了不到一个月，我上体育课的时候不小心把腿摔断了，这也是我第一次感受到骨头断裂的头疼，实在是太难受了！</p>\n<p>于是，我就开始休学养病。直到高中正式开学一个月之后，我才去上学，也没有参加军训。</p>\n<p>由于我耽误了几个月的课程，因此没办法再进入小班，只能转到奥赛班。到了奥赛班之后，我继续把时间和经历都投入在游戏和小说上，于是我的成绩在奥赛班快接近倒数了。等到高二分班的时候，我成功被踢出奥赛班来到了最普通的平行班。</p>\n<p><strong>我成功把自己从学校最好的小班玩到奥赛班，然后再到平行班。有点魔幻吧！</strong></p>\n<h2>高二开始奋起直追</h2>\n<p>高中觉悟是在高二下学期的时候，当时是真的觉悟了，就突然觉得游戏不香了，觉得 DNF 也不好玩了，什么杀怪打装备不过是虚无，练了再多满级的 DNF 账号也屁用没有，没钱都是浮云。</p>\n<p>我妈妈当时还很诧异，还奇怪地问我：“怎么不玩游戏了？”（我妈属于不怎么管我玩游戏的，她觉得这东西还是要靠自觉）。</p>\n<p>于是，我便开始牟足劲学习，每天都沉迷学习无法自拔（豪不夸张），乐在其中。虽然晚自习上完回到家已经差不多 11 点了，但也并不感觉累，反而感觉很快乐，很充实。</p>\n<p><strong>我的付出也很快得到了回报，我顺利返回了奥赛班。</strong> 当时，理科平行班大概有 7 个，每次考试都是平行班之间会单独排一个名次，小班和奥赛班不和我们一起排名次。后面的话，自己基本每次都能在平行班得第一，并且很多时候都是领先第二名 30 来分。由于成绩还算亮眼，高三上学期快结束的时候，我就向年级主任申请去了奥赛班。</p>\n<h2>高考前的失眠</h2>\n<blockquote>\n<p><strong>失败之后，不要抱怨外界因素，自始至终实际都是自己的问题，自己不够强大！</strong> 然后，高考前的失眠也是我自己问题，要怪只能怪自己，别的没有任何接口。</p>\n</blockquote>\n<p>我的高考经历其实还蛮坎坷的，毫不夸张的说，高考那今天可能是我到现在为止，经历的最难熬的时候，特别是在晚上。</p>\n<p>我在高考那几天晚上都经历了失眠，想睡都睡不着那种痛苦想必很多人或许都体验过。</p>\n<p>其实我在之前是从来没有过失眠的经历的。高考前夕，因为害怕自己睡不着，所以，我提前让妈妈去买了几瓶老师推荐的安神补脑液。我到现在还记得这个安神补脑液是敖东牌的。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/internet-addiction-teenager/image-20220625194714247.png\" alt=\"\"></p>\n<p>高考那几天的失眠，我觉得可能和我喝了老师推荐的安神补脑液有关系，又或者是我自己太过于紧张了。因为那几天睡觉总会感觉有很多蚂蚁在身上爬一样，身上还起了一些小痘痘（有点像是过敏）。</p>\n<p>这里要格外说明一点，避免引起误导：<strong>睡不着本身就是自身的问题，上述言论并没有责怪这个补脑液的意思。</strong> 另外， 这款安神补脑液我去各个平台都查了一下，发现大家对他的评价都挺好，和我们老师当时推荐的理由差不多。如果大家需要改善睡眠的话，可以咨询相关医生之后尝试一下。</p>\n<p>高考也确实没发挥好，整个人在考场都是懵的状态。高考成绩出来之后，比我自己预估的还低了几十分，最后只上了一个双非一本。不过，好在专业选的好，吃了一些计算机专业的红利，大学期间也挺努力的。</p>\n<h2>大学生活</h2>\n<p>大学生活过的还是挺丰富的，我会偶尔通宵敲代码，也会偶尔半夜发疯跑出去和同学一起走走古城墙、去网吧锤一夜的 LOL。</p>\n<p>大学生活专门写过一篇文章介绍：<a href=\"/about-the-author/my-college-life.html\" target=\"_blank\">害，毕业三年了！</a> 。</p>\n<h2>总结</h2>\n<p>整个初中我都属于有点网瘾少年的状态，不过初三的时候稍微克制一些。到了高二下学期的时候，自己才对游戏真的没有那么沉迷了。</p>\n<p>对游戏不那么沉迷，也是因为自己意识到游戏终究只是消遣，学习才是当时最重要的事情。而且，我的游戏技术又不厉害，又不能靠游戏吃饭，什么打怪升级到最后不过是电脑中的二进制数据罢了！</p>\n<p><strong>这玩意必须你自己意识到，不然，单纯靠父母监督真的很难改变！如果心不在学习上面的话，那同时是不可能学好的！</strong></p>\n<p>我真的很反对父母过于干涉孩子的生活，强烈谴责很多父母把自己孩子的网瘾归咎于网络游戏，把自己孩子的暴力归咎于影视媒体。</p>\n<p><strong>时刻把自己的孩子保护起来不是一件靠谱的事情，他终究要独自面对越来越多的诱惑。到了大学，很多被父母保护太好的孩子就直接废了。他们没有独立意识，没有抗拒诱惑的定力！</strong></p>\n",
      "image": "https://oss.javaguide.cn/about-the-author/internet-addiction-teenager/heiwangba.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "JavaGuide 开源项目 100K Star 了！",
      "url": "https://javaguide.cn/about-the-author/javaguide-100k-star.html",
      "id": "https://javaguide.cn/about-the-author/javaguide-100k-star.html",
      "summary": "2021-03-21，晚上 12 点，肝完了我正在做的一个项目的前端的某块功能，我随手打开了我的 GitHub 主页。 好家伙！几天没注意，JavaGuide 这个项目直接上了 100K star。 JavaGuide 100k 里程碑 其实，这个真没啥好嘚瑟的。因为，教程类的含金量其实是比较低的，Star 数量比较多主要也是因为受众面比较广，大家觉得...",
      "content_html": "<p>2021-03-21，晚上 12 点，肝完了我正在做的一个项目的前端的某块功能，我随手打开了<a href=\"https://github.com/Snailclimb\" target=\"_blank\" rel=\"noopener noreferrer\">我的 GitHub 主页</a>。</p>\n<p>好家伙！几天没注意，<a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 这个项目直接上了 100K star。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/1&amp;e=1643644799&amp;token=kIxbL07-8jAj8w1n4s9zv64FuZZNEATmlU_Vm6zD:zANqh9HQEvvLPm6smyrjvjAt-Ik=.png\" alt=\"JavaGuide 100k 里程碑\"></p>\n<p>其实，这个真没啥好嘚瑟的。因为，教程类的含金量其实是比较低的，Star 数量比较多主要也是因为受众面比较广，大家觉得不错，点个 star 就相当于收藏了。很多特别优秀的框架，star 数量可能只有几 K。所以，单纯看 star 数量没啥意思，就当看个笑话吧！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/20210323132635635.png\" alt=\"\"></p>\n<p>维护这个项目的过程中，也被某些人 diss 过：“md 项目，没啥含金量，给国人丢脸！”。</p>\n<p>对于说这类话的人，我觉得对我没啥影响，就持续完善，把 JavaGuide 做的更好吧！其实，国外的很多项目也是纯 MD 啊！就比如外国的朋友发起的 awesome 系列、求职面试系列。无需多说，行动自证！凎！</p>\n<p>开源非常重要的一点就是协作。如果你开源了一个项目之后，就不再维护，别人给你提交 issue/pr，你都不处理，那开源也没啥意义了！</p>\n<p>我的公号的小伙伴都是通过这个项目关注我的，趁着午休，简单复盘一下，也算是对关注这个项目的小伙伴负责。</p>\n<p>我在大三开始准备秋招面试的时候，创建了 JavaGuide 这个项目，<strong>2018-05-07</strong> 这一天我提交了<strong>第 1 个 commit</strong>。</p>\n<p>到今天（2021-03-23）为止，这个仓库已经累计有 <strong>2933</strong> 次 commit，累计有 <strong>207</strong> 位朋友参与到了项目中来。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70.png\" alt=\"\"></p>\n<p>累计有 <strong>511</strong> 个 <strong>issue</strong> 和 <strong>575</strong> 个 <strong>PR</strong>。所有的 PR 都已经被处理，仅有 15 个左右的 issue 我还未抽出时间处理。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309224044850.png\" alt=\"\"></p>\n<p>其实，相比于 star 数量，你看看仓库的 issue 和 PR 更能说明你的项目是否有价值。</p>\n<p>那些到处骗 star 甚至是 刷 star 的行为，我就不多说了，有点丢人。人家觉得你的项目还不错，能提供价值，自然就给你点 star 了。</p>\n<p><strong>未来几年，我还是会持续完善 JavaGuide。</strong></p>\n<p><strong>希望自己以后能开源一些有价值的轮子吧！继续加油！</strong></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/1&e=1643644799&token=kIxbL07-8jAj8w1n4s9zv64FuZZNEATmlU_Vm6zD:zANqh9HQEvvLPm6smyrjvjAt-Ik=.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "某培训机构盗我文章做成视频还上了B站热门",
      "url": "https://javaguide.cn/about-the-author/my-article-was-stolen-and-made-into-video-and-it-became-popular.html",
      "id": "https://javaguide.cn/about-the-author/my-article-was-stolen-and-made-into-video-and-it-became-popular.html",
      "summary": "时间回到 2021-02-25，我在刷哔哩哔哩的时候发现，哔哩哔哩某 UP 主（某培训机构），擅自将我在知乎的一个回答做成了视频。 原滋原味啊！我艹。甚至，连我开头的自我调侃还加上了！真的牛皮！ 你盗我原创，视频你用心做好点也行啊！至少也可以让这么优质的内容得到传播嘛！ 结果，好家伙，视频做的像坨屎一样，配音也贼违和! 麻烦这个培训机构看到这篇文章之后...",
      "content_html": "<p>时间回到 2021-02-25，我在刷哔哩哔哩的时候发现，哔哩哔哩某 UP 主（某培训机构），擅自将我在知乎的一个回答做成了视频。</p>\n<p>原滋原味啊！我艹。甚至，连我开头的自我调侃还加上了！真的牛皮！</p>\n<p>你盗我原创，视频你用心做好点也行啊！至少也可以让这么优质的内容得到传播嘛！</p>\n<p>结果，好家伙，视频做的像坨屎一样，配音也贼违和!</p>\n<p>麻烦这个培训机构看到这篇文章之后可以考虑换一个人做类似恶心的事情哈！这人完全没脑子啊！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/up-db6b9cf323930786fa2bec8b1e1bfaad732.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/up-6395603ab441b74511c6eda28efee8937d7.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/up-921f60a5c7cee2c5c2eb30f4f7048f648e1.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/up-acc82a797bd01e27f5b7d5d327b32a21d4e.png\" alt=\"\"></p>\n<p>我随便找了一个视频看，发现也还是盗用别人的原创。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/up-48d0c5ab086265ae19b7396bc59de2c2daf.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/up-366abf0656007ff96551064104e60740a41.png\" alt=\"\"></p>\n<p>其他的视频就不用多看了，是否还是剽窃别人的原创，原封不动地做成视频，大家心里应该有数。</p>\n<p>他们这样做的目的就是一个：<strong>引流到自己的 QQ 群，然后忽悠你买课程。</strong></p>\n<p>我并不认为是这完全都是培训机构的问题。培训机构的员工为了流量而做这种恶心的事情，也导致了现在这种事情被越来越频繁地发生。</p>\n<p>所以，你会发现，哔哩哔哩和知乎上有越来越多培训机构的小号，到处剽窃原创，盗发。</p>\n<p>我身边很多原创号主的文章都经常被某些培训机构盗发。</p>\n<p>有时候真的会比较生气，毕竟你自己辛辛苦苦的原创，别人复制粘贴一下就白嫖了！</p>\n<p>但是，我相信，这种靠剽窃别人原创来吸引流量的行为，终究只是跳梁小丑的行为罢了！</p>\n<p>只有那些用心输出内容的创作者，才能走的更远，更安稳！</p>\n<p>后来，我在我的公众号上发了一篇名为<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247500005&amp;idx=1&amp;sn=7351e22619654492d3cf567bff9d87f0&amp;chksm=cea18f2ef9d606384e0265b9318e004646c03b8a69f2801698d2f9e0e6bdfec0a1185ac3ab17&amp;token=2146952532&amp;lang=zh_CN&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《好家伙！某培训机构盗我文章做成视频还上了热门》</a> 的文章，吐槽自己的原创被某机构白嫖。</p>\n<p>谁能想到，培训机构的人竟然找人来让我删文章了！讲真，这俩人是真的奇葩啊！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/8f8ccafcf5b764a2289a9c276c30728d.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/a0a4a45d7ec7b1a2622b2a38629e9b09.png\" alt=\"\"></p>\n<p>还让我格局大点？我去你丫的！明明就是我的原创，你自己不删，反而找人联系我删除！有脑子不？</p>\n<p>其实，我这人是比较好说话的，现实生活中脾气也是出了名的好（前提是没有触犯到我的原则的情况）。</p>\n<p>搞笑的是！他们在让我删文的同时，他们 B 站盗发的视频还都在，还在继续为他们引流。</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/86f659a93ce5b639526c8d2bd20b2fbe.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/about-the-author/be6e0fd23146de3f6224b4d853c59ce7.png\" alt=\"\"></p>\n<p>如果他们把账号注销了，我或许还能考虑放一手。但是，文章是肯定不会删的。</p>\n<p>现在，看后续情况吧！我随时可以动用法律来维护自己的权益，只是看我想不想，毕竟也挺麻烦对吧！</p>\n<p>大家不用担心，这都是小事，我女朋友就是学法律的，国内的某法学双一流学校。</p>\n<p>咱不怕事！凎！！！</p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/about-the-author/up-db6b9cf323930786fa2bec8b1e1bfaad732.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "害，毕业三年了！",
      "url": "https://javaguide.cn/about-the-author/my-college-life.html",
      "id": "https://javaguide.cn/about-the-author/my-college-life.html",
      "summary": "关于初高中的生活，可以看 2020 年我写的 这篇文章。 2019 年 6 月份毕业，距今已经过去了 3 年。趁着高考以及应届生毕业之际，简单聊聊自己的大学生活。 下面是正文。 我本科毕业于荆州校区的长江大学，一所不起眼的双非一本。 在这里度过的四年大学生活还是过的挺开心的，直到现在，我依然非常怀念！ 在学校的这几年的生活，总体来说，还算是比较丰富多彩...",
      "content_html": "<blockquote>\n<p>关于初高中的生活，可以看 2020 年我写的 <a href=\"/about-the-author/internet-addiction-teenager.html\" target=\"_blank\">我曾经也是网瘾少年</a> 这篇文章。</p>\n</blockquote>\n<p>2019 年 6 月份毕业，距今已经过去了 3 年。趁着高考以及应届生毕业之际，简单聊聊自己的大学生活。</p>\n<p>下面是正文。</p>\n<p>我本科毕业于荆州校区的长江大学，一所不起眼的双非一本。</p>\n<p>在这里度过的四年大学生活还是过的挺开心的，直到现在，我依然非常怀念！</p>\n<p>在学校的这几年的生活，总体来说，还算是比较丰富多彩的。我会偶尔通宵敲代码，也会偶尔半夜发疯跑出去和同学一起走走古城墙、去网吧锤一夜的 LOL。</p>\n<p>写下这篇杂文，记录自己逝去的大学生活！希望未来继续砥砺前行，不忘初心！</p>\n<h2>大一</h2>\n<p>大一那会，我没有把精力放在学习编程上，大部分时间都在参加课外活动。</p>\n<p>或许是因为来到了一座新鲜的城市，对周围的一切都充满了兴趣。又或许是因为当时的我还比较懵懂，也没有任何学习方向。</p>\n<p>这一年，我和班里的一群新同学去逛了荆州的很多地方比如荆州博物馆、长江大桥、张居正故居、关帝庙。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/41239dd7d18642f7af201292ead94f1a~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"大一的一次班级出行\"></p>\n<p>即使如此，我当时还是对未来充满了希望，憧憬着工作之后的生活。</p>\n<p>我还记得当时我们 6 个室友那会一起聊天的时候，其他 5 个室友都觉得说未来找工作能找一个 6k 的就很不错了。我当时就说：“怎么得至少也要 8k 吧！”。他们无言，觉得我的想法太天真。</p>\n<p>其实，我当时内心想的是至少是月薪 1w 起步，只是不太好意思直接说出来。</p>\n<p>我不爱出风头，性格有点内向。刚上大学那会，内心还是有一点不自信，干什么事情都畏畏缩缩，还是迫切希望改变自己的！</p>\n<p>于是，凭借着一腔热血，我尝试了很多我之前从未尝试过的事情：<strong>露营</strong>、<strong>户外烧烤</strong>、<strong>公交车演讲</strong>、<strong>环跑古城墙</strong>、<strong>徒步旅行</strong>、<strong>异地求生</strong>、<strong>圣诞节卖苹果</strong>、<strong>元旦晚会演出</strong>...。</p>\n<p>下面这些都是我和社团的小伙伴利用课外时间自己做的，在圣诞节那周基本都卖完了。我记得，为了能够多卖一些，我们还挨个去每一个寝室推销了一遍。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/7cf1a2da505249a58e1f29834dbac435~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>我还参加了大一元旦晚会，不过，那次演出我还是没放开，说实话，感觉没有表现出应该有的那味。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/850cae1f8c644c5d920140f66ae9303d~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>经过这次演出之后，我发现我是真的没有表演的天赋，很僵硬。并且，这种僵硬呆板是自己付出努力之后也没办法改变的。</p>\n<p>下图是某一次社团聚餐，我喝的有点小醉之后，被朋友拍下的。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/82a503e365354bd1bf190540fbf1039a~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>那时候，还经常和和社团的几位小伙伴一起去夜走荆州古城墙。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/007a83e6d26c43b9aa6e0b0266c3314b~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"某一次要去夜走古城墙的路上我拍的\"></p>\n<p>不知道社团的大家现在过得怎么样呢？</p>\n<p>虽然这些经历对于我未来的工作和发展其实没有任何帮助，但却让我的大学生活更加完整，经历了更多有趣的事情，有了更多可以回忆的经历。</p>\n<p>我的室友们都窝在寝室玩游戏、玩手机的时候，我很庆幸自己做了这些事情。</p>\n<p>个人感觉，大一的时候参加一些不错的社团活动，认识一些志同道合的朋友还是很不错的！</p>\n<p><strong>参加课外活动之余，CS 专业的小伙伴，尽量早一点养成一个好的编程习惯，学好一门编程语言，然后平时没事就刷刷算法题。</strong></p>\n<h3>办补习班</h3>\n<p>大一暑假的时候，我作为负责人，在孝感的小乡镇上办过 5 个补习班（本来是 7 个，后来砍掉了 2 个） 。</p>\n<p>从租房子、租借桌椅再到招生基本都是从零开始做的。</p>\n<p>每个周末我都会从荆州坐车跑到孝感，在各个县城之间来回跑。绝大部分时候，只有我一个人，偶尔也会有几个社团的小伙伴陪我一起。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/6ee6358c236144d8a8a205cc6bc99b9b~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>记忆犹新，那一年孝感也是闹洪水，还挺严重的。</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/image-20210820201908759.png\" alt=\"\"></p>\n<p>有一次我差点回不去学校参加期末考试。虽然没有备考，但是也没有挂过任何一门课，甚至很多科目考的还不错。不过，这还是对我绩点产生了比较大的影响，导致我后面没有机会拿到奖学金。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/3c5fe7af43ba4e348244df1692500fce~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>这次比较赶时间，所以就坐的是火车回学校。在火车上竟然还和别人撞箱子了！</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/570f5791aeb54fa1a76892b69e46fec2~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>当时去小乡镇上的时候，自己最差的时候住过 15 元的旅馆。真的是 15 元，你没看错。就那种老旧民房的小破屋，没有独卫，床上用品也很不卫生，还不能洗澡。</p>\n<p>下面这个还是我住过最豪华的一个，因为当时坐客车去了孝感之后，突然下大雨，我就在车站附近找了一个相对便宜点的。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/687c3ede3f094c65a72d812ca0f06bb4~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>为了以更低的价钱租到房子，我经常和房东砍价砍的面红耳赤。</p>\n<p>说句心里话，这些都是我不太愿意去做的事情，我本身属于比较爱面子而且不那么自信的人。</p>\n<p>当时，我需要在各个乡镇来回跑，每天就直接顶着太阳晒 。每次吃饭都特别香，随便炒个蔬菜都能吃几碗米饭。</p>\n<p>我本身是比较挑食的，这次经历让我真正体会到人饿了之后吃嘛嘛香!</p>\n<p>我一个人给 6 个老师加上 10 来个学生和房东们一家做了一个多月的饭，我的厨艺也因此得到了很大的锻炼。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/2e3b6101abcd46a8a213c08782aeac33~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>这些学生有小学的，也有初中的，都比较听话。有很多还是留守儿童，爸爸妈妈在外打工，跟着爷爷奶奶一起生活。</p>\n<p>加上我的话，我们一共有 4 位老师，我主要讲的是初中和高中的物理课。</p>\n<p>学生们都挺听话，没有出现和我们几个老师闹过矛盾。只有两个调皮的小学生被我训斥之后，怀恨在心，写下了一些让我忍俊不禁的话！哈哈哈哈！太可爱了！</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/3680cead2c0f4165bb4865f038326b61~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>离开之前的前一天的晚上，我和老师们商量请一些近点的同学们来吃饭。我们一大早就出去买菜了，下图是做成后的成品。虽然是比较简单的一顿饭，但我们吃的特别香。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/f36bfd719b9b4463b2f1d3edc51faa97~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"补习班的最后一顿晚餐\"></p>\n<p>那天晚上还有几个家长专门跑过来看我做饭，家长们说他们的孩子非常喜欢我做的饭，哈哈哈！我表面淡然说自己做的不好，实则内心暗暗自喜，就很“闷骚”的一个人，哈哈哈！</p>\n<p>不知道这些学生们，现在怎么样呢？怀念啊！</p>\n<p>培训班结束，我回家之后，我爸妈都以为我是逃荒回来的。</p>\n<h3>自己赚钱去孤儿院</h3>\n<p>大一尾声的时候，还做了一件非常有意义的事情。我和我的朋友们去了一次孤儿院（荆州私立孤儿教养院）。这个孤儿院曾经还被多家电视台报道过，目前也被百度百科收录。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/db8f5c276f4d4a7c9d7bd1e6100de301~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>孤儿院的孩子们，大多是一些无父无母或者本身有一些疾病被父母遗弃的孩子。</p>\n<p>去之前，我们买了很多小孩子的玩具、文具、零食这些东西。这些钱的来源也比较有意义，都是我和社团的一些小伙伴自己去外面兼职赚的一些钱。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/cf43853c49bd489a9fc0ee437a2af432~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"离开之前和创建孤儿院的老爷爷的一张合照\"></p>\n<p>勿以善小而不为！引用《爱的风险》这首歌的一句歌词：“只要人人都献出一点爱，世界将变成美好的人间” 。</p>\n<p>我想看看这个孤儿院的现状，于是在网上有搜了一下，看到了去年 1 月份荆州新闻网的一份报道。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/0ac27206389c498882dd7f6f440c6abb~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>孤儿教养院创办 33 年来，累计收养孤儿 85 人，其中有 5 人参军入伍报效祖国，20 人上大学，有的早已参加工作并成家立业。</p>\n<p>叔叔也慢慢老了，白发越来越多。有点心酸，想哭，希望有机会再回去看看您！一定会的！</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/ea803a99c08149f892ca29e784653503~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<h3>徒步旅行</h3>\n<p>大一那会还有一件让我印象非常深刻的事情——徒步旅行。</p>\n<p>我和一群社团的小伙伴，徒步走了接近 45 公里。我们从学校的西校区，徒步走到了枝江那边的一个沙滩。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/94ca5b6c5ea84dfb9e12b7a718587ea3~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>是真的全程步行，这还是我第一次走这么远。</p>\n<p>走到目的地的时候，我的双腿已经不听使唤，脚底被磨了很多水泡。</p>\n<p>我们在沙滩上露营，烧烤，唱歌跳舞，一直到第二天早上才踏上回学校的路程。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/8120d45d30254c908f9db20b3c00f514~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<h2>大二</h2>\n<p>到了大二，我开始把自己的重点转移到编程知识的学习上。</p>\n<p>不过，我遇到一个让我比较纠结的问题：社团里玩的最好的几个朋友为了能让社团能继续延续下去，希望我和他们一起来继续带这个团队。</p>\n<p>但是，我当时已经规划好了自己大二要做的事情，真的想把精力都放在编程学习上，想要好好沉淀一下自己的技术。</p>\n<p>迫于无奈，我最终还是妥协，选择了和朋友一起带社团。毕竟，遇到几个真心的朋友属实不易！</p>\n<h3>带社团</h3>\n<p>带社团确实需要花费很多业余时间，除了每周要从东校区打车到西校区带着他们跑步之外，我们还需要经常带着他们组织一些活动。</p>\n<p>比如我们一起去了长江边上烧烤露营。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/8a6945ccc087017c1f96ee93f3af8178-20220608154206500.png\" alt=\"\"></p>\n<p>再比如我们一起去环跑了古城墙。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/2cfba22049e8b99e11955bcb7662d790.png\" alt=\"\"></p>\n<p>大学那会，我还是非常热爱运动的！</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/2dd503a60f814a7a953816bc3b5194cd~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>大二那会，我就已经环跑了 3 次古城墙。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/949543b550e847d5a7314b7e1842489b~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<h3>加入长大在线</h3>\n<p>在大二的时候，我还加入了学校党委宣传部下的组织——长大在线。这是一个比较偏技术性质的组织，主要负责帮学校做做网站、APP 啥的。</p>\n<p>在百度上，还能搜索到长大在线的词条。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/34ecf650120a4289a68b7549eb7d00cc~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>莫名其妙还被发了一个记者证，哈哈哈！</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20220606121111042.png\" alt=\"\"></p>\n<p>我选的是安卓组，然后我就开始了学习安卓开发的旅程。</p>\n<p>刚加入这个组织的时候，我连 HTML、CSS、JS、Java、Linux 这些名词都不知道啥意思。</p>\n<p>再到后面，我留下来当了副站长，继续为组织服务了大半年多。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20220608121413761.png\" alt=\"\"></p>\n<h3>第一次参加比赛</h3>\n<p>那会也比较喜欢去参加一些学校的比赛，也获得过一些不错的名次，让我印象最深的是一次 PPT 大赛，这也是我第一次参加学校的比赛。</p>\n<p>参加比赛之前，自己也是一个 PPT 小白，苦心学了一周多之后，我的一个作品竟然顺利获得了第一名。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20220608121446529.png\" alt=\"\"></p>\n<p>也正是因为这次比赛，我免费拥有了自己的第一个机械键盘，这个键盘陪我度过了后面的大学生活。</p>\n<h3>确定技术方向</h3>\n<p>在大二上学期末，我最终确定了自己以后要走的技术方向是走 Java 后端。于是，我就开始制定学习计划，开始了自己的 Java 后端领域的打怪升级之路。</p>\n<p>每次忙到很晚，一个人走在校园的时候还是很爽的！非常喜欢这种安静的感觉。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/336fd489ce314d259d6090194f237e1b~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>当时身体素质真好，熬夜之后第二天照常起来上课学习。现在熬个夜，后面两天直接就废了！</p>\n<p>到了大三，我基本把 Java 后端领域一些必备的技术都给过了一遍，还用自己学的东西做了两个实战项目。</p>\n<p>由于缺少正确的人指导，我当时学的时候也走了很多弯路，浪费了不少时间（我很羡慕大家能有我，就很厚脸皮！）。</p>\n<p>那个时候还贼自恋，没事就喜欢自拍一张。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20210820202341008.png\" alt=\"\"></p>\n<p>国庆节的时候也不回家，继续在学校刷 Java 视频和书籍。</p>\n<p>我记得那次国庆节的时候效率还是非常高的，学习起来也特别有动力。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/WX20210820-203458.png\" alt=\"\"></p>\n<h2>大三</h2>\n<p>整个大三，我依然没有周末，基本没有什么娱乐时间。绝大部分时间都是一个人在寝室默默学习，平时偶尔也会去图书馆和办公室。</p>\n<p>虽然室友经常会玩游戏和看剧什么的，但是我对我并没有什么影响。一个人戴上耳机之后，世界仿佛都是自己的。</p>\n<p>和很多大佬可能不太一样，比起图书馆和办公室，我在寝室的学习效率更高一些。</p>\n<h3>JavaGuide 诞生</h3>\n<p>我的开源项目 JavaGuide 和公众号都是这一年启动的。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/the-birth-of-javaguide.jpeg\" alt=\"\"></p>\n<p>目前的话，JavaGuide 也已经 100k star ，我的公众号也已经有 15w+ 的关注。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20210820211926742.png\" alt=\"\"></p>\n<h3>接私活赚钱</h3>\n<p>一些机遇也让我这一年也接了一些私活赚钱。为了能够顺利交付，偶尔也会熬夜。当时的心态是即使熬夜也还是很开心、充实。每次想到自己通过技术赚到了钱，就会非常有动力。</p>\n<p>我也曾写过文章分享过接私活的经历：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247499539&amp;idx=1&amp;sn=ff153f9bd98bb3109b1f14e58ed9a785&amp;chksm=cea1b0d8f9d639cee4744f845042df6b1fc319f4383b87eba76a944c2648c81a51c28d25e3b6&amp;token=2114015135&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">唠唠嗑！大学那会接私活赚了 3w+</a> 。</p>\n<p>不过，我接的几个私活也是比较杂的，并不太适合作为简历上的项目经历。</p>\n<p>于是，为了能让简历上的项目经历看着更好看一些，我自己也找了两个项目做。一个是我跟着视频一起做的，是一个商城类型的项目。另外一个是自己根据自己的想法做的，是一个视频网站类型的项目。</p>\n<p>商城类型的项目大概的架构图如下（没有找到当时自己画的原图）：</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/206fab84bf5b4c048f8a88bc68c942f6~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>那会商城项目貌似也已经烂大街了，用的人比较多。为了让自己的商城项目更有竞争力，对照着视频教程做完之后，我加入了很多自己的元素比如更换消息队列 ActiveMQ 为 Kafka、增加二级缓存。</p>\n<p>在暑假的时候，还和同学老师一起做了一个员工绩效管理的企业真实项目。这个项目和我刚进公司做的项目，非常非常相似，不过公司做得可能更高级点 ，代码质量也要更高一些。实在是太巧了！</p>\n<p>我记得当时自己独立做项目的时候，遇到了很多问题。<strong>就很多时候，你看书很容易就明白的东西，等到你实践的时候，总是会遇到一些小问题。我一般都是通过 Google 搜索解决的，用好搜索引擎真的能解决自己 99% 的问题。</strong></p>\n<h3>参加软件设计大赛</h3>\n<p>大三这一年也有遗憾吧！我和几位志同道合的朋友一起参加过一个软件设计大赛，我们花了接近两个月做的系统顺利进入了复赛。</p>\n<p>不过，我后面因为自己个人觉得再花时间做这个系统学不到什么东西还浪费时间就直接退出了。然后，整个团队就散了。</p>\n<p>其实，先来回头看也是可以学到东西的，自己当时的心态有点飘了吧，心态有一些好高骛远。</p>\n<p>现在想来，还是挺对不起那些一起奋斗到深夜的小伙伴。</p>\n<p>人生就是这样，一生很长，任何时候你回头看过去的自己，肯定都会有让自己后悔的事情。</p>\n<h3>放弃读研</h3>\n<p>当时，我也有纠结过是否读研，毕竟学校确实一般，读个研确实能够镀点金，提升一下学历。</p>\n<p>不过，我最终还是放弃了读研。当时比较自信，心里就觉得自己不需要读研也能够找到好工作。</p>\n<h3>实习</h3>\n<p>大三还找了一家离学校不远的公司实习，一位老学长创办的。不过，说实话哈，总体实习体验很差，没有学到什么东西不说，还耽误了自己很多已经计划好的事情。</p>\n<p>我记得当时这个公司很多项目还是在用 JSP，用的技术很老。如果是老项目还好，我看几个月前启动的项目也还是用的 JSP，就很离谱。。。</p>\n<p>当时真的很难受，而且一来就想着让你上手干活，活还贼多，干不完还想让你免费加班。。。</p>\n<p>当时也没办法，因为荆州实在是找不到其他公司可以让你实习，你又没办法跑到其他城市去实习。这也是放弃选择一二线城市的学校带来的问题吧！</p>\n<h2>大四</h2>\n<h3>开始找工作</h3>\n<p>找实习找工作时候，才知道大学所在的城市的重要性。</p>\n<p>由于，我的学校在荆州，而且本身学校就很一般，因此，基本没有什么比较好的企业来招人。</p>\n<p>当时，唯一一个还算可以的就是苏宁，不过，我遇到的那个苏宁的 HR 还挺恶心的，第一轮面试的时候就开始压薪资了，问我能不能加班。然后，我也就对苏宁没有了想法。</p>\n<p>秋招我犯了一个比较严重的问题，那就是投递简历开始的太晚。我是把学校的项目差不多做完之后，才开始在网上投递简历。这个时候，暑假差不多已经结束了，秋招基本已经尾声了。</p>\n<p>可能也和学校环境有一些关系，当时，身边的同学没有参加秋招的。大三暑假的时候，都跑去搞学院组织的实习。我是留在学校做项目，没有去参加那次实习。</p>\n<p>我觉得学校还是非常有必要提醒学生们把握住秋招这次不错的机会的！</p>\n<p>在网上投递了一些简历之后，很多笔试我觉得做的还可以的都没有回应。</p>\n<p>我有点慌了！于是，我就从荆州来到武汉，想在武大华科这些不错的学校参加一些宣讲会。</p>\n<p>到了武汉之后，我花了一天时间找了一个蛋壳公寓住下。第二天，我就跑去武汉理工大学参加宣讲会。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20210820204919942.png\" alt=\"\"></p>\n<p>当天，我就面试了自己求职过程中的第一家公司—<strong>玄武科技</strong>。</p>\n<p>就是这样一家中小型的公司，当时来求职面试的很多都是武大华科的学生。不过，他们之中一定有很多人和我一样，就是单纯来刷一波经验，找找信心。</p>\n<p>整个过程也就持续了 3 天左右，我就顺利的拿下了玄武科技的 offer。不过，最终没有签约。</p>\n<h3>拿到 Offer</h3>\n<p>来武汉之前，我实际上已经在网上投递了 <strong>ThoughtWorks</strong>，并且，作业也已经通过了。</p>\n<p>当时，我对 ThoughtWorks 是最有好感的，内心的想法就是：“拿下了 ThoughtWorks，就不再面试其他公司了”。</p>\n<p>奈何 ThoughtWorks 的进度太慢，担心之余，才来武汉面试其他公司留个保底。</p>\n<p>不过，我最终如愿以偿获得了 ThoughtWorks 的 offer。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/9ad97dcc5038499b96239dd826c471b7~tplv-k3u1fbpfcp-zoom-1.image.png\" alt=\"\"></p>\n<p>面试 ThoughtWorks 的过程就不多说了，我在<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484842&amp;idx=1&amp;sn=4489dfab0ef2479122b71407855afc71&amp;chksm=cea24a61f9d5c3774a8ed67c5fcc3234cb0741fbe831152986e5d1c8fb4f36a003f4fb2f247e&amp;scene=178&amp;cur_album_id=1323354342556057602#rd\" target=\"_blank\" rel=\"noopener noreferrer\">《结束了我短暂的秋招，说点自己的感受》</a>这篇文章中有提到。</p>\n<h2>几点建议</h2>\n<p>说几点自己的建议，虽然我不优秀，但毕竟你可以更优秀：</p>\n<ol>\n<li>确定好自己的方向，搞清你是要考研还是要找工作。如果你要考研的话，好好上每一门可能是考研的科目，平时有时间也要敲代码，最好也能做一个项目，对你复试还有能力提升都有帮助。找工作的话，尽早确定好自己的方向，心里有一个规划，搞清自己的优势和劣势。</li>\n<li>尽可能早一点以求职为导向来学习，这样更有针对性，并且可以大概率减己处在迷茫的时间，很大程度上还可以让自己少走很多弯路。</li>\n<li>自学很重要，养成自学的习惯，学会学习。</li>\n<li>不要觉得逃课就是坏学生。我大学逃了很多课，逃课的大部分时间都是在学自己觉得更重要的东西，逃的大部分也是不那么重要并且不会影响我毕业的课。</li>\n<li>大学恋爱还是相对来说很纯粹的，遇到合适的可以尝试去了解一下， 别人不喜欢你的话不要死缠烂打，这种东西强求不来。你不得不承认，你了解一个人欲望还是始于他的长相而并不是有趣的灵魂。</li>\n<li>管理自己的身材，没事去跑跑步，别当油腻男。</li>\n<li>别太看重绩点。我觉得绩点对于找工作还有考研实际的作用都可以忽略不计，不过不挂科还是比较重要的。但是，绩点确实在奖学金评选和保研名额选取上占有最大的分量。</li>\n<li>别太功利性。做事情以及学习知识都不要奢求它能立马带给你什么，坚持和功利往往是成反比的。</li>\n<li>……</li>\n</ol>\n<h2>后记</h2>\n<p>我们在找工作的过程中难免会遇到卡学历的情况，特别是我们这种学校本身就比较一般的。我觉得这真的不可厚非，没有什么不公平，要怪就只能怪自己没有考上好的学校。</p>\n<p><strong>考虑到招聘成本和时间，公司一定更愿意在学校本身比较好的人中选拔人才。</strong></p>\n<p>我也曾抱怨过自己为什么不在 211 或者 985 的学校。但，其实静下心来想一想，本来考不上 211 或者 985 就是自己的问题，而且在我们计算机这个领域，学历本身就相对于其他专业稍微要更加公平一点。</p>\n<p>我身边专科、三本毕业就进大厂的人也比比皆是。我这句话真不是鸡汤，为了鼓励一些学校出身不太好的朋友。</p>\n<p><strong>多行动，少抱怨。</strong></p>\n",
      "image": "https://oss.javaguide.cn/about-the-author/college-life/41239dd7d18642f7af201292ead94f1a~tplv-k3u1fbpfcp-zoom-1.image.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "坚持写技术博客六年了!",
      "url": "https://javaguide.cn/about-the-author/writing-technology-blog-six-years.html",
      "id": "https://javaguide.cn/about-the-author/writing-technology-blog-six-years.html",
      "summary": "坚持写技术博客已经有六年了，也算是一个小小的里程碑了。 一开始，我写技术博客就是简单地总结自己课堂上学习的课程比如网络、操作系统。渐渐地，我开始撰写一些更为系统化的知识点详解和面试常见问题总结。 JavaGuide 首页 许多人都想写技术博客，但却不清楚这对他们有何好处。有些人开始写技术博客，却不知道如何坚持下去，也不知道该写些什么。这篇文章我会认真聊...",
      "content_html": "<p>坚持写技术博客已经有六年了，也算是一个小小的里程碑了。</p>\n<p>一开始，我写技术博客就是简单地总结自己课堂上学习的课程比如网络、操作系统。渐渐地，我开始撰写一些更为系统化的知识点详解和面试常见问题总结。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20230408131717766.png\" alt=\"JavaGuide 首页\"></p>\n<p>许多人都想写技术博客，但却不清楚这对他们有何好处。有些人开始写技术博客，却不知道如何坚持下去，也不知道该写些什么。这篇文章我会认真聊聊我对记录技术博客的一些看法和心得，或许可以帮助你解决这些问题。</p>\n<h2>写技术博客有哪些好处？</h2>\n<h3>学习效果更好，加深知识点的认识</h3>\n<p><strong>费曼学习法</strong> 大家应该已经比较清楚了，这是一个经过实践证明非常有效的学习方式。费曼学习法的命名源自 Richard Feynman，这位物理学家曾获得过诺贝尔物理学奖，也曾参与过曼哈顿计划。</p>\n<p>所谓费曼学习法，就是当你学习了一个新知识之后，想象自己是一个老师：用最简单、最浅显直白的话复述、表达复杂深奥的知识，最好不要使用行业术语，让非行业内的人也能听懂。为了达到这种效果，最好想象你是在给一个 80 多岁或 8 岁的小孩子上课，甚至他们都能听懂。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/v2-19373c2e61873c5083ee4b1d1523f8f5_720w.png\" alt=\"教授别人学习效果最好\"></p>\n<p>看书、看视频这类都属于是被动学习，学习效果比较差。费曼学习方法属于主动学习，学习效果非常好。</p>\n<p><strong>写技术博客实际就是教别人的一种方式。</strong> 不过，记录技术博客的时候是可以有专业术语（除非你的文章群体是非技术人员），只是你需要用自己的话表述出来，尽量让别人一看就懂。<strong>切忌照搬书籍或者直接复制粘贴其他人的总结！</strong></p>\n<p>如果我们被动的学习某个知识点，可能大部分时候都是仅仅满足自己能够会用的层面，你并不会深究其原理，甚至很多关键概念都没搞懂。</p>\n<p>如果你是要将你所学到的知识总结成一篇博客的话，一定会加深你对这个知识点的思考。很多时候，你为了将一个知识点讲清楚，你回去查阅很多资料，甚至需要查看很多源码，这些细小的积累在潜移默化中加深了你对这个知识点的认识。</p>\n<p>甚至，我还经常会遇到这种情况：<strong>写博客的过程中，自己突然意识到自己对于某个知识点的理解存在错误。</strong></p>\n<p><strong>写博客本身就是一个对自己学习到的知识进行总结、回顾、思考的过程。记录博客也是对于自己学习历程的一种记录。随着时间的流逝、年龄的增长，这又何尝不是一笔宝贵的精神财富呢？</strong></p>\n<p>知识星球的一位球友还提到写技术博客有助于完善自己的知识体系：</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20230408121336432.png\" alt=\"写技术博客有助于完善自己的知识体系\"></p>\n<h3>帮助别人的同时获得成就感</h3>\n<p>就像我们程序员希望自己的产品能够得到大家的认可和喜欢一样。我们写技术博客在某一方面当然也是为了能够得到别人的认可。</p>\n<p><strong>当你写的东西对别人产生帮助的时候，你会产生成就感和幸福感。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20230404181906257.png\" alt=\"读者的认可\"></p>\n<p>这种成就感和幸福感会作为 <strong>正向反馈</strong> ，继续激励你写博客。</p>\n<p>但是，即使受到很多读者的赞赏，也要保持谦虚学习的太多。人外有人，比你技术更厉害的读者多了去，一定要虚心学习！</p>\n<p>当然，你可以可能会受到很多非议。可能会有很多人说你写的文章没有深度，还可能会有很多人说你闲的蛋疼，你写的东西网上/书上都有。</p>\n<p><strong>坦然对待这些非议，做好自己，走好自己的路就好！用行动自证！</strong></p>\n<h3>可能会有额外的收入</h3>\n<p>写博客可能还会为你带来经济收入。输出价值的同时，还能够有合理的经济收入，这是最好的状态！</p>\n<p>为什么说是可能呢？ <strong>因为就目前来看，大部分人还是很难短期通过写博客有收入。我也不建议大家一开始写博客就奔着赚钱的目的，这样功利性太强了，效果可能反而不好。就比如说你坚持了写了半年发现赚不到钱，那你可能就会坚持不下去了。</strong></p>\n<p>我自己从大二开始写博客，大三下学期开始将自己的文章发布到公众号上，一直到大四下学期，才通过写博客赚到属于自己的第一笔钱。</p>\n<p>第一笔钱是通过微信公众号接某培训机构的推广获得的。没记错的话，当时通过这个推广为自己带来了大约 <strong>500</strong> 元的收入。虽然这不是很多，但对于还在上大学的我来说，这笔钱非常宝贵。那时我才知道，原来写作真的可以赚钱，这也让我更有动力去分享自己的写作。可惜的是，在接了两次这家培训机构的广告之后，它就倒闭了。</p>\n<p>之后，很长一段时间我都没有接到过广告。直到网易的课程合作找上门，一篇文章 1000 元，每个月接近一篇，发了接近两年，这也算是我在大学期间比较稳定的一份收入来源了。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20230408115720135.png\" alt=\"网易的课程合作\"></p>\n<p>老粉应该大部分都是通过 JavaGuide 这个项目认识我的，这是我在大三开始准备秋招面试时创建的一个项目。没想到这个项目竟然火了一把，一度霸占了 GitHub 榜单。可能当时国内这类开源文档教程类项目太少了，所以这个项目受欢迎程度非常高。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20230408131849198.png\" alt=\"JavaGuide Star 趋势\"></p>\n<p>项目火了之后，有一个国内比较大的云服务公司找到我，说是要赞助 JavaGuide 这个项目。我既惊又喜，担心别人是骗子，反复确认合同之后，最终确定以每月 1000 元的费用在我的项目首页加上对方公司的 banner。</p>\n<p>随着时间的推移，以及自己后来写了一些比较受欢迎、比较受众的文章，我的博客知名度也有所提升，通过写博客的收入也增加了不少。</p>\n<h3>增加个人影响力</h3>\n<p>写技术博客是一种展示自己技术水平和经验的方式，能够让更多的人了解你的专业领域知识和技能。持续分享优质的技术文章，一定能够在技术领域增加个人影响力，这一点是毋庸置疑的。</p>\n<p>有了个人影响力之后，不论是对你后面找工作，还是搞付费知识分享或者出书，都非常有帮助。</p>\n<p>拿我自己来说，已经很多知名出版社的编辑找过我，协商出一本的书的事情。这种机会应该也是很多人梦寐以求的。不过，我都一一拒绝了，因为觉得自己远远没有达到能够写书的水平。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20230408121132211.png\" alt=\"电子工业出版社编辑邀约出书\"></p>\n<p>其实不出书最主要的原因还是自己嫌麻烦，整个流程的事情太多了。我自己又是比较佛系随性的人，平时也不想把时间都留给工作。</p>\n<h2>怎样才能坚持写技术博客？</h2>\n<p><strong>不可否认，人都是有懒性的，这是人的本性。我们需要一个目标/动力来 Push 一下自己。</strong></p>\n<p>就技术写作而言，你的目标可以以技术文章的数量为标准，比如：</p>\n<ul>\n<li>一年写多少篇技术文章。我个人觉得一年的范围还是太长了，不太容易定一个比较合适的目标。</li>\n<li>每月输出一篇高质量的技术文章。这个相对容易实现一些，每月一篇，一年也有十二篇了，也很不错了。</li>\n</ul>\n<p>不过，以技术文章的数量为目标有点功利化，文章的质量同样很重要。一篇高质量的技术文可能需要花费一周甚至半个月的业余时间才能写完。一定要避免自己刻意追求数量，而忽略质量，迷失技术写作的本心。</p>\n<p>我个人给自己定的目标是：<strong>每个月至少写一篇原创技术文章或者认真修改完善过去写的三篇技术文章</strong> （像开源项目推荐、开源项目学习、个人经验分享、面经分享等等类型的文章不会被记入）。</p>\n<p>我的目标对我来说比较容易完成，因此不会出现为了完成目标而应付任务的情况。在我状态比较好，工作也不是很忙的时候，还会经常超额完成任务。下图是我今年 3 月份完成的任务（任务管理工具：Microsoft To-Do）。除了 gossip 协议是去年写的之外，其他都是 3 月份完成的。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20230404181033089.png\" alt=\"\"></p>\n<p>如果觉得以文章数量为标准过于功利的话，也可以比较随性地按照自己的节奏来写作。不过，一般这种情况下，你很可能过段时间就忘了还有这件事，开始慢慢抵触写博客。</p>\n<p>写完一篇技术文章之后，我们不光要同步到自己的博客，还要分发到国内一些常见的技术社区比如博客园、掘金。<strong>分发到其他平台的原因是获得关注进而收获正向反馈（动力来源之一）与建议，这是技术写作能坚持下去的非常重要的一步，一定要重视！！！</strong></p>\n<p>说实话，当你写完一篇自认为还不错的文章的幸福感和成就感还是有的。<strong>但是，让自己去做这件事情还是比较痛苦的。</strong> 就好比你让自己出去玩很简单，为了达到这个目的，你可以有各种借口。但是，想要自己老老实实学习，还是需要某个外力来督促自己的。</p>\n<h2>写哪些方向的博客比较好？</h2>\n<p>通常来说，写下面这些方向的博客会比较好：</p>\n<ol>\n<li><strong>详细讲解某个知识点</strong>：一定要有自己的思考而不是东拼西凑。不仅要介绍知识点的基本概念和原理，还需要适当结合实际案例和应用场景进行举例说明。</li>\n<li><strong>问题排查/性能优化经历</strong>：需要详细描述清楚具体的场景以及解决办法。一定要有足够的细节描述，包括出现问题的具体场景、问题的根本原因、解决问题的思路和具体步骤等等。同时，要注重实践性和可操作性，帮助读者更好地学习理解。</li>\n<li><strong>源码阅读记录</strong>：从一个功能点出发描述其底层源码实现，谈谈你从源码中学到了什么。</li>\n</ol>\n<p>最重要的是一定要重视 Markdown 规范，不然内容再好也会显得不专业。</p>\n<p>详见 <a href=\"/javaguide/contribution-guideline.html\" target=\"_blank\">Markdown 规范</a> （很重要，尽量按照规范来，对你工作中写文档会非常有帮助）</p>\n<h2>有没有什么写作技巧分享？</h2>\n<h3>句子不要过长</h3>\n<p>句子不要过长，尽量使用短句（但也不要太短），这样读者更容易阅读和理解。</p>\n<h3>尽量让文章更加生动有趣</h3>\n<p>尽量让文章更加生动有趣，比如你可以适当举一些形象的例子、用一些有趣的段子、歇后语或者网络热词。</p>\n<p>不过，这个也主要看你的文章风格。</p>\n<h3>使用简单明了的语言</h3>\n<p>避免使用阅读者可能无法理解的行话或复杂语言。</p>\n<p>注重清晰度和说服力，保持简单。简单的写作是有说服力的，一个五句话的好论点会比一百句话的精彩论点更能打动人。为什么格言、箴言这类文字容易让人接受，与简洁、直白也有些关系。</p>\n<h3>使用视觉效果</h3>\n<p>图表、图像等视觉效果可以让朴素的文本内容更容易理解。记得在适当的地方使用视觉效果来增强你的文章的表现力。</p>\n<p><img src=\"https://oss.javaguide.cn/about-the-author/college-life/image-20230404192458759.png\" alt=\"\"></p>\n<h3>技术文章配图色彩要鲜明</h3>\n<p>下面是同样内容的两张图，都是通过 drawio 画的，小伙伴们更喜欢哪一张呢？</p>\n<p>我相信大部分小伙伴都会选择后面一个色彩更鲜明的！</p>\n<p>色彩的调整不过花费了我不到 30s 的时间，带来的阅读体验的上升却是非常之大！</p>\n<p><img src=\"https://oss.javaguide.cn/2021-1/image-20210104182517226.png\" alt=\"\"></p>\n<h3>确定你的读者</h3>\n<p>写作之前，思考一下你的文章的主要受众全体是谁。受众群体确定之后，你可以根据受众的需求和理解水平调整你的写作风格和内容难易程度。</p>\n<h3>审查和修改</h3>\n<p>在发表之前一定要审查和修改你的文章。这将帮助你发现错误、澄清任何令人困惑的信息并提高文档的整体质量。</p>\n<p><strong>好文是改出来的，切记！！！</strong></p>\n<h2>总结</h2>\n<p>总的来说，写技术博客是一件利己利彼的事情。你可能会从中收获到很多东西，你写的东西也可能对别人也有很大的帮助。但是，写技术博客还是比较耗费自己时间的，你需要和工作以及生活做好权衡。</p>\n",
      "image": "https://oss.javaguide.cn/about-the-author/college-life/image-20230408131717766.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近作者"
      ]
    },
    {
      "title": "我的知识星球 4 岁了！",
      "url": "https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html",
      "id": "https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html",
      "summary": "这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 在 2019 年 12 月 29 号，经过了大概一年左右的犹豫期，我正式确定要开始做一个自己的星球，帮助学...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>在 <strong>2019 年 12 月 29 号</strong>，经过了大概一年左右的犹豫期，我正式确定要开始做一个自己的星球，帮助学习 Java 和准备 Java 面试的同学。一转眼，已经四年多了。感谢大家一路陪伴，我会信守承诺，继续认真维护这个纯粹的 Java 知识星球，不让信任我的读者失望。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/640-20230727145252757.png\" alt=\"\"></p>\n<p>我是比较早一批做星球的技术号主，也是坚持做下来的那一少部人（大部分博主割一波韭菜就不维护星球了）。最开始的一两年，纯粹靠爱发电。当初定价非常低（一顿饭钱），加上刚工作的时候比较忙，提供的服务也没有现在这么多。</p>\n<p>慢慢的价格提上来，星球的收入确实慢慢也上来了。不过，考虑到我的受众主要是学生，定价依然比同类星球低很多。另外，我也没有弄训练营的打算，虽然训练营对于我这个流量来说可以赚到更多钱。</p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到他人！</strong></p>\n<h2>什么是知识星球？</h2>\n<p>简单来说，知识星球就是一个私密交流圈子，主要用途是知识创作者连接铁杆读者/粉丝。相比于微信群，知识星球内容沉淀、信息管理更高效。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211223754566.png\" alt=\"\"></p>\n<h2>我的知识星球能为你提供什么？</h2>\n<p>努力做一个最优质的 Java 面试交流星球！加入到我的星球之后，你将获得：</p>\n<ol>\n<li>6 个高质量的专栏永久阅读，内容涵盖面试，源码解析，项目实战等内容！</li>\n<li>多本原创 PDF 版本面试手册免费领取。</li>\n<li>免费的简历修改服务（已经累计帮助 7000+ 位球友修改简历）。</li>\n<li>一对一免费提问交流（专属建议，走心回答）。</li>\n<li>专属求职指南和建议，让你少走弯路，效率翻倍！</li>\n<li>海量 Java 优质面试资源分享。</li>\n<li>打卡活动，读书交流，学习交流，让学习不再孤单，报团取暖。</li>\n<li>不定期福利：节日抽奖、送书送课、球友线下聚会等等。</li>\n<li>……</li>\n</ol>\n<p>其中的任何一项服务单独拎出来价值都远超星球门票了。</p>\n<p>这里再送一个 <strong>30</strong> 元的星球专属优惠券吧，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<h3>专属专栏</h3>\n<p>星球更新了 <strong>《Java 面试指北》</strong>、<strong>《Java 必读源码系列》</strong>（目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot2.1 的源码）、 <strong>《从零开始写一个 RPC 框架》</strong>（已更新完）、<strong>《Kafka 常见面试题/知识点总结》</strong> 等多个优质专栏。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211231206733.png\" alt=\"\"></p>\n<p>《Java 面试指北》内容概览：</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"\"></p>\n<p>进入星球之后，这些专栏即可免费永久阅读，永久同步更新！</p>\n<h3>PDF 面试手册</h3>\n<p>进入星球就免费赠送多本优质 PDF 面试手册。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220723120918434.png\" alt=\"星球 PDF 面试手册\"></p>\n<h3>优质精华主题沉淀</h3>\n<p>星球沉淀了几年的优质精华主题，内容涵盖面经、面试题、工具网站、技术资源、程序员进阶攻略等内容，干货非常多。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20230421154518800.png\" alt=\"\"></p>\n<p>并且，每个月都会整理出当月优质的主题，方便大家阅读学习，避免错过优质的内容。毫不夸张，单纯这些优质主题就足够门票价值了。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20230902091117181.png\" alt=\"星球每月优质主题整理概览\"></p>\n<p>加入星球之后，一定要记得抽时间把星球精华主题看看，相信你一定会有所收货！</p>\n<p>JavaGuide 知识星球优质主题汇总传送门：<a href=\"https://www.yuque.com/snailclimb/rpkqw1/ncxpnfmlng08wlf1\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.yuque.com/snailclimb/rpkqw1/ncxpnfmlng08wlf1</a>（为了避免这里成为知识杂货铺，我会对严格筛选入选的优质主题）。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/Xnip2023-04-21_15-48-13.png\" alt=\"星球优质主题汇总\"></p>\n<h3>简历修改</h3>\n<p>一到面试季，我平均一天晚上至少要看 15 ~30 份简历。过了面试季的话，找我看简历的话会稍微少一些。要不然的话，是真心顶不住！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304123156348.png\" alt=\"\"></p>\n<p>简单统计了一下，到目前为止，我至少帮助 <strong>7000+</strong> 位球友提供了免费的简历修改服务。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/简历修改2.jpg\" alt=\"\"></p>\n<p>我会针对每一份简历给出详细的修改完善建议，用心修改，深受好评！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220725093504807.png\" alt=\"\"></p>\n<h3>一对一提问</h3>\n<p>你可以和我进行一对一免费提问交流，我会很走心地回答你的问题。到目前为止，已经累计回答了 <strong>3000+</strong> 个读者的提问。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/wecom-temp-151578-45e66ccd48b3b5d3baa8673d33c7b664.jpg\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211223559179.png\" alt=\"\"></p>\n<h3>学习打卡</h3>\n<p>星球的学习打卡活动可以督促自己和其他球友们一起学习交流。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220308143815840.png\" alt=\"\"></p>\n<p>看球友们的打卡也能有收货，最重要的是这个学习氛围对于自己自律非常有帮助！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/球友每日打卡也能学到很多东西.jpg\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/确实是学习交流的好地方.jpg\" alt=\"\"></p>\n<h3>读书活动</h3>\n<p>定期会举办读书活动（奖励丰厚），我会带着大家一起读一些优秀的技术书籍！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211233642079.png\" alt=\"\"></p>\n<p>每一期读书活动的获奖率都非常非常非常高！直接超过门票价！！！</p>\n<h3>不定时福利</h3>\n<p>不定时地在星球送书、送专栏、发红包，福利多多，</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/1682063464099.png\" alt=\"\"></p>\n<h2>是否收费？</h2>\n<p>星球是需要付费才能进入的。 <strong>为什么要收费呢？</strong></p>\n<ol>\n<li>维护好星球是一件费时费力的事情，每到面试季，我经常凌晨还在看简历和回答球友问题。市面上单单一次简历修改服务也至少需要 200+，而简历修改也只是我的星球提供的服务的冰山一角。除此之外，我还要抽时间写星球专属的一些专栏，单单是这些专栏的价值就远超星球门票了。</li>\n<li>星球提供的服务比较多，如果我是免费提供这些服务的话，是肯定忙不过来的。付费这个门槛可以帮我筛选出真正需要帮助的那批人。</li>\n<li>免费的东西才是最贵的，加入星球之后无任何其他需要付费的项目，统统免费！</li>\n<li>合理的收费是对我付出劳动的一种正向激励，促进我继续输出！同时，这份收入还可以让我们家人过上更好的生活。虽然累点，但也是值得的！</li>\n</ol>\n<p>另外，这个是一年的，到明年这个时候结束，差不过够用了。如果服务结束的时候你还需要星球服务的话，可以添加我的微信（<strong>javaguide1024</strong>）领取一个续费优惠卷，半价基础再减 10，记得备注 <strong>“续费”</strong> 。</p>\n<h2>如何加入？</h2>\n<p>这里赠送一个 <strong>30</strong> 元的星球专属优惠券吧，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> 。</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/640-20230727145252757.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "技术书籍精选",
      "url": "https://javaguide.cn/books/",
      "id": "https://javaguide.cn/books/",
      "summary": "这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 精选优质计算机书籍。 开源的目的是为了大家能一起完善，如果你觉得内容有任何需要完善/补充的地方，欢迎大家在...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>精选优质计算机书籍。</p>\n<p>开源的目的是为了大家能一起完善，如果你觉得内容有任何需要完善/补充的地方，欢迎大家在项目 <a href=\"https://github.com/CodingDocs/awesome-cs/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issues 区</a> 推荐自己认可的技术书籍，让我们共同维护一个优质的技术书籍精选集！</p>\n<ul>\n<li>GitHub 地址：<a href=\"https://github.com/CodingDocs/awesome-cs\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/CodingDocs/awesome-cs</a></li>\n<li>Gitee 地址：<a href=\"https://gitee.com/SnailClimb/awesome-cs\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/SnailClimb/awesome-cs</a></li>\n</ul>\n<p>如果内容对你有帮助的话，欢迎给本项目点个 Star。我会用我的业余时间持续完善这份书单，感谢！</p>\n<h2>公众号</h2>\n<p>最新更新会第一时间同步在公众号，推荐关注！另外，公众号上有很多干货不会同步在线阅读网站。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机书籍"
      ]
    },
    {
      "title": "计算机基础必读经典书籍",
      "url": "https://javaguide.cn/books/cs-basics.html",
      "id": "https://javaguide.cn/books/cs-basics.html",
      "summary": "考虑到很多同学比较喜欢看视频，因此，这部分内容我不光会推荐书籍，还会顺便推荐一些我觉得不错的视频教程和各大高校的 Project。 操作系统 为什么要学习操作系统？ 从对个人能力方面提升来说，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。比如说我们开发的系统使用的缓存（比如 Redis）和操作系统的...",
      "content_html": "<p>考虑到很多同学比较喜欢看视频，因此，这部分内容我不光会推荐书籍，还会顺便推荐一些我觉得不错的视频教程和各大高校的 Project。</p>\n<h2>操作系统</h2>\n<p><strong>为什么要学习操作系统？</strong></p>\n<p><strong>从对个人能力方面提升来说</strong>，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。比如说我们开发的系统使用的缓存（比如 Redis）和操作系统的高速缓存就很像。CPU 中的高速缓存有很多种，不过大部分都是为了解决 CPU 处理速度和内存处理速度不对等的问题。我们还可以把内存可以看作外存的高速缓存，程序运行的时候我们把外存的数据复制到内存，由于内存的处理速度远远高于外存，这样提高了处理速度。同样地，我们使用的 Redis 缓存就是为了解决程序处理速度和访问常规关系型数据库速度不对等的问题。高速缓存一般会按照局部性原理（2-8 原则）根据相应的淘汰算法保证缓存中的数据是经常会被访问的。我们平常使用的 Redis 缓存很多时候也会按照 2-8 原则去做，很多淘汰算法都和操作系统中的类似。既说了 2-8 原则，那就不得不提命中率了，这是所有缓存概念都通用的。简单来说也就是你要访问的数据有多少能直接在缓存中直接找到。命中率高的话，一般表明你的缓存设计比较合理，系统处理速度也相对较快。</p>\n<p><strong>从面试角度来说</strong>，尤其是校招，对于操作系统方面知识的考察是非常非常多的。</p>\n<p><strong>简单来说，学习操作系统能够提高自己思考的深度以及对技术的理解力，并且，操作系统方面的知识也是面试必备。</strong></p>\n<p>如果你要系统地学习操作系统的话，最硬核最权威的书籍是 <strong><a href=\"https://book.douban.com/subject/33463930/\" target=\"_blank\" rel=\"noopener noreferrer\">《操作系统导论》</a></strong> 。你可以再配套一个 <strong><a href=\"https://book.douban.com/subject/1230413/\" target=\"_blank\" rel=\"noopener noreferrer\">《深入理解计算机系统》</a></strong> 加深你对计算机系统本质的认识，美滋滋！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20201012191645919.png\" alt=\"\"></p>\n<p>另外，去年新出的一本国产的操作系统书籍也很不错：<strong><a href=\"https://book.douban.com/subject/35208251/\" target=\"_blank\" rel=\"noopener noreferrer\">《现代操作系统：原理与实现》</a></strong> （夏老师和陈老师团队的力作，值得推荐）。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210406132050845.png\" alt=\"\"></p>\n<p>如果你比较喜欢动手，对于理论知识比较抵触的话，我推荐你看看 <strong><a href=\"https://book.douban.com/subject/11530329/\" target=\"_blank\" rel=\"noopener noreferrer\">《30 天自制操作系统》</a></strong> ，这本书会手把手教你编写一个操作系统。</p>\n<p>纸上学来终觉浅 绝知此事要躬行！强烈推荐 CS 专业的小伙伴一定要多多实践！！！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409123802972.png\" alt=\"\"></p>\n<p>其他相关书籍推荐：</p>\n<ul>\n<li><strong><a href=\"https://book.douban.com/subject/1422377/\" target=\"_blank\" rel=\"noopener noreferrer\">《自己动手写操作系统》</a></strong>：不光会带着你详细分析操作系统原理的基础，还会用丰富的实例代码，一步一步地指导你用 C 语言和汇编语言编写出一个具备操作系统基本功能的操作系统框架。</li>\n<li><strong><a href=\"https://book.douban.com/subject/3852290/\" target=\"_blank\" rel=\"noopener noreferrer\">《现代操作系统》</a></strong>：内容很不错，不过，翻译的一般。如果你是精读本书的话，建议把课后习题都做了。</li>\n<li><strong><a href=\"https://book.douban.com/subject/26745156/\" target=\"_blank\" rel=\"noopener noreferrer\">《操作系统真象还原》</a></strong>：这本书的作者毕业于北京大学，前百度运维高级工程师。因为在大学期间曾重修操作系统这一科，后对操作系统进行深入研究，著下此书。</li>\n<li><strong><a href=\"https://book.douban.com/subject/25743846/\" target=\"_blank\" rel=\"noopener noreferrer\">《深度探索 Linux 操作系统》</a></strong>：跟着这本书的内容走，可以让你对如何制作一套完善的 GNU/Linux 系统有了清晰的认识。</li>\n<li><strong><a href=\"https://book.douban.com/subject/2044818/\" target=\"_blank\" rel=\"noopener noreferrer\">《操作系统设计与实现》</a></strong>：操作系统的权威教学教材。</li>\n<li><strong><a href=\"https://book.douban.com/subject/3735649/\" target=\"_blank\" rel=\"noopener noreferrer\">《Orange'S:一个操作系统的实现》</a></strong>：从只有二十行的引导扇区代码出发，一步一步地向读者呈现一个操作系统框架的完成过程。配合《操作系统设计与实现》一起食用更佳！</li>\n</ul>\n<p>如果你比较喜欢看视频的话，推荐哈工大李治军老师主讲的慕课 <a href=\"https://www.icourse163.org/course/HIT-1002531008\" target=\"_blank\" rel=\"noopener noreferrer\">《操作系统》</a>，内容质量吊打一众国家精品课程。</p>\n<p>课程的大纲如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220414144527747.png\" alt=\"课程大纲\"></p>\n<p>主要讲了一个基本操作系统中的六个基本模块：CPU 管理、内存管理、外设管理、磁盘管理与文件系统、用户接口和启动模块 。</p>\n<p>课程难度还是比较大的，尤其是课后的 lab。如果大家想要真正搞懂操作系统底层原理的话，对应的 lab 能做尽量做一下。正如李治军老师说的那样：“纸上得来终觉浅，绝知此事要躬行”。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220414145210679.png\" alt=\"\"></p>\n<p>如果你能独立完成几个 lab 的话，我相信你对操作系统的理解绝对要上升几个台阶。当然了，如果你仅仅是为了突击面试的话，那就不需要做 lab 了。</p>\n<p>说点心里话，我本人非常喜欢李治军老师讲的课，我觉得他是国内不可多得的好老师。他知道我们国内的教程和国外的差距在哪里，也知道国内的学生和国外学生的差距在哪里，他自己在努力着通过自己的方式来缩小这个差距。真心感谢，期待李治军老师的下一个课程。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220414145249714.png\" alt=\"\"></p>\n<p>还有下面这个国外的课程 <a href=\"https://www.bilibili.com/video/av31289365?from=search&amp;seid=16298868573410423104\" target=\"_blank\" rel=\"noopener noreferrer\">《深入理解计算机系统 》</a> 也很不错。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20201204140653318.png\" alt=\"\"></p>\n<h2>计算机网络</h2>\n<p>计算机网络是一门系统性比较强的计算机专业课，各大名校的计算机网络课程打磨的应该都比较成熟。</p>\n<p>要想学好计算机网络，首先要了解的就是 OSI 七层模型或 TCP/IP 五层模型，即应用层（应用层、表示层、会话层）、传输层、网络层、数据链路层、物理层。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksosi七层模型2.png\" alt=\"osi七层模型\"></p>\n<p>关于这门课，首先强烈推荐参考书是<strong>机械工业出版社的《计算机网络——自顶向下方法》</strong>。该书目录清晰，按照 TCP/IP 五层模型逐层讲解，对每层涉及的技术都展开了详细讨论，基本上高校里开设的课程的教学大纲就是这本书的目录了。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409123250570.png\" alt=\"\"></p>\n<p>如果你觉得上面这本书看着比较枯燥的话，我强烈推荐+安利你看看下面这两本非常有趣的网络相关的书籍：</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/25863515/\" title=\"《图解 HTTP》\" target=\"_blank\" rel=\"noopener noreferrer\">《图解 HTTP》</a>：讲漫画一样的讲 HTTP，很有意思，不会觉得枯燥，大概也涵盖也 HTTP 常见的知识点。因为篇幅问题，内容可能不太全面。不过，如果不是专门做网络方向研究的小伙伴想研究 HTTP 相关知识的话，读这本书的话应该来说就差不多了。</li>\n<li><a href=\"https://book.douban.com/subject/26941639/\" title=\"《网络是怎样连接的》\" target=\"_blank\" rel=\"noopener noreferrer\">《网络是怎样连接的》</a>：从在浏览器中输入网址开始，一路追踪了到显示出网页内容为止的整个过程，以图配文，讲解了网络的全貌，并重点介绍了实际的网络设备和软件是如何工作的。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20201011215144139.png\" alt=\"\"></p>\n<p>除了理论知识之外，学习计算机网络非常重要的一点就是：“<strong>动手实践</strong>”。这点和我们编程差不多。</p>\n<p>GitHub 上就有一些名校的计算机网络试验/Project：</p>\n<ul>\n<li><a href=\"https://github.com/rccoder/HIT-Computer-Network\" target=\"_blank\" rel=\"noopener noreferrer\">哈工大计算机网络实验</a></li>\n<li><a href=\"https://github.com/moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES\" target=\"_blank\" rel=\"noopener noreferrer\">《计算机网络－自顶向下方法(原书第 6 版)》编程作业，Wireshark 实验文档的翻译和解答。</a></li>\n<li><a href=\"https://github.com/KevinWang15/network-pj-chatroom\" target=\"_blank\" rel=\"noopener noreferrer\">计算机网络的期末 Project，用 Python 编写的聊天室</a></li>\n<li><a href=\"https://computer-networks.github.io/sp19/lectures.html\" target=\"_blank\" rel=\"noopener noreferrer\">CMU 的计算机网络课程</a></li>\n</ul>\n<p>我知道，还有很多小伙伴可能比较喜欢边看视频边学习。所以，我这里再推荐几个顶好的计算机网络视频讲解。</p>\n<p><strong>1、<a href=\"http://www.icourse163.org/course/HIT-154005\" target=\"_blank\" rel=\"noopener noreferrer\">哈工大的计算机网络课程</a></strong>：国家精品课程，截止目前已经开了 10 次课了。大家对这门课的评价都非常高！所以，非常推荐大家看一下！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20201218141241911.png\" alt=\"\"></p>\n<p><strong>2、<a href=\"https://www.bilibili.com/video/BV19E411D78Q?from=search&amp;seid=17198507506906312317\" target=\"_blank\" rel=\"noopener noreferrer\">王道考研的计算机网络</a></strong>：非常适合 CS 专业考研的小朋友！这个视频目前在哔哩哔哩上已经有 1.6w+ 的点赞。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20201218141652837.png\" alt=\"\"></p>\n<h2>算法</h2>\n<p>先来看三本入门书籍。 这三本入门书籍中的任何一本拿来作为入门学习都非常好。</p>\n<ol>\n<li><a href=\"https://book.douban.com/subject/30357170/\" target=\"_blank\" rel=\"noopener noreferrer\">《我的第一本算法书》</a></li>\n<li><a href=\"https://book.douban.com/subject/26979890/\" target=\"_blank\" rel=\"noopener noreferrer\">《算法图解》</a></li>\n<li><a href=\"https://book.douban.com/subject/25894685/\" target=\"_blank\" rel=\"noopener noreferrer\">《啊哈!算法》</a></li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/image-20210327104418851.png\" alt=\"\"></p>\n<p>我个人比较倾向于 <strong><a href=\"https://book.douban.com/subject/30357170/\" target=\"_blank\" rel=\"noopener noreferrer\">《我的第一本算法书》</a></strong> 这本书籍，虽然它相比于其他两本书集它的豆瓣评分略低一点。我觉得它的配图以及讲解是这三本书中最优秀，唯一比较明显的问题就是没有代码示例。但是，我觉得这不影响它是一本好的算法书籍。因为本身下面这三本入门书籍的目的就不是通过代码来让你的算法有多厉害，只是作为一本很好的入门书籍让你进入算法学习的大门。</p>\n<p>再推荐几本比较经典的算法书籍。</p>\n<p><strong><a href=\"https://book.douban.com/subject/19952400/\" target=\"_blank\" rel=\"noopener noreferrer\">《算法》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409123422140.png\" alt=\"\"></p>\n<p>这本书内容非常清晰易懂，适合数据结构和算法小白阅读。书中把一些常用的数据结构和算法都介绍到了！</p>\n<p>我在大二的时候被我们的一个老师强烈安利过！自己也在当时购买了一本放在宿舍，到离开大学的时候自己大概看了一半多一点。因为内容实在太多了！另外，这本书还提供了详细的 Java 代码，非常适合学习 Java 的朋友来看，可以说是 Java 程序员的必备书籍之一了。</p>\n<blockquote>\n<p><strong>下面这些书籍都是经典中的经典，但是阅读起来难度也比较大，不做太多阐述，神书就完事了！</strong></p>\n<p><strong>如果你仅仅是准备算法面试的话，不建议你阅读下面这些书籍。</strong></p>\n</blockquote>\n<p><strong><a href=\"https://book.douban.com/subject/3227098/\" target=\"_blank\" rel=\"noopener noreferrer\">《编程珠玑》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409145334093.png\" alt=\"\"></p>\n<p>经典名著，ACM 冠军、亚军这种算法巨佬都强烈推荐的一本书籍。这本书的作者也非常厉害，Java 之父 James Gosling 就是他的学生。</p>\n<p>很多人都说这本书不是教你具体的算法，而是教你一种编程的思考方式。这种思考方式不仅仅在编程领域适用，在其他同样适用。</p>\n<p><strong><a href=\"https://book.douban.com/subject/4048566/\" target=\"_blank\" rel=\"noopener noreferrer\">《算法设计手册》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409145411049.png\" alt=\"\"></p>\n<p>这是一本被 GitHub 上的爆火的计算机自学项目 <a href=\"https://link.zhihu.com/?target=https%3A//teachyourselfcs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Teach Yourself Computer Science</a> 强烈推荐的一本算法书籍。</p>\n<p>类似的神书还有 <a href=\"https://book.douban.com/subject/20432061/\" target=\"_blank\" rel=\"noopener noreferrer\">《算法导论》</a>、<a href=\"https://book.douban.com/subject/1130500/\" target=\"_blank\" rel=\"noopener noreferrer\">《计算机程序设计艺术（第 1 卷）》</a> 。</p>\n<p><strong>如果说你要准备面试的话，下面这几本书籍或许对你有帮助！</strong></p>\n<p><strong><a href=\"https://book.douban.com/subject/6966465/\" target=\"_blank\" rel=\"noopener noreferrer\">《剑指 Offer》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409145506482.png\" alt=\"\"></p>\n<p>这本面试宝典上面涵盖了很多经典的算法面试题，如果你要准备大厂面试的话一定不要错过这本书。</p>\n<p>《剑指 Offer》 对应的算法编程题部分的开源项目解析：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/gatieme/CodingInterviews\" target=\"_blank\" rel=\"noopener noreferrer\">CodingInterviews</a> 。</p>\n<p><strong><a href=\"https://book.douban.com/subject/30422021/\" target=\"_blank\" rel=\"noopener noreferrer\">《程序员代码面试指南（第 2 版）》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409145622758.png\" alt=\"\"></p>\n<p>《程序员代码面试指南（第 2 版）》里的大部分题目相比于《剑指 offer》 来说要难很多，题目涵盖面相比于《剑指 offer》也更加全面。全书一共有将近 300 道真实出现过的经典代码面试题。</p>\n<p>视频的话，推荐北京大学的国家精品课程—<strong><a href=\"https://www.icourse163.org/course/PKU-1001894005\" target=\"_blank\" rel=\"noopener noreferrer\">程序设计与算法（二）算法基础</a></strong>，讲的非常好！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/22ce4a17dc0c40f6a3e0d58002261b7a.png\" alt=\"\"></p>\n<p>这个课程把七种基本的通用算法（枚举、二分、递归、分治、动态规划、搜索、贪心）都介绍到了。各种复杂算法问题的解决，都可能用到这些基本的思想。并且，这个课程的一部分的例题和 ACM 国际大学生程序设计竞赛中的中等题相当，如果你能够解决这些问题，那你的算法能力将超过绝大部分的高校计算机专业本科毕业生。</p>\n<h2>数据结构</h2>\n<p>其实，上面提到的很多算法类书籍（比如 <strong>《算法》</strong> 和 <strong>《算法导论》</strong>）都详细地介绍了常用的数据结构。</p>\n<p>我这里再另外补充基本和数据结构相关的书籍。</p>\n<p><strong><a href=\"https://book.douban.com/subject/6424904/\" target=\"_blank\" rel=\"noopener noreferrer\">《大话数据结构》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409145803440.png\" alt=\"\"></p>\n<p>入门类型的书籍，读起来比较浅显易懂，适合没有数据结构基础或者说数据结构没学好的小伙伴用来入门数据结构。</p>\n<p><strong><a href=\"https://book.douban.com/subject/3351237/\" target=\"_blank\" rel=\"noopener noreferrer\">《数据结构与算法分析：Java 语言描述》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409145823973.png\" alt=\"\"></p>\n<p>质量很高，介绍了常用的数据结构和算法。</p>\n<p>类似的还有 <strong><a href=\"https://book.douban.com/subject/1139426/\" target=\"_blank\" rel=\"noopener noreferrer\">《数据结构与算法分析：C 语言描述》</a></strong>、<strong><a href=\"https://book.douban.com/subject/1971825/\" target=\"_blank\" rel=\"noopener noreferrer\">《数据结构与算法分析：C++ 描述》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/d9c450ccc5224a5fba77f4fa937f7b9c.png\" alt=\"\"></p>\n<p>视频的话推荐你看浙江大学的国家精品课程—<strong><a href=\"https://www.icourse163.org/course/ZJU-93001#/info\" target=\"_blank\" rel=\"noopener noreferrer\">《数据结构》</a></strong> 。</p>\n<p>姥姥的数据结构讲的非常棒！不过，还是有一些难度的，尤其是课后练习题。</p>\n<h2>计算机专业基础课</h2>\n<p>数学和英语属于通用课，一般在大一和大二两学年就可以全部修完，大二大三逐渐接触专业课。通用课作为许多高中生升入大学的第一门课，算是高中阶段到本科阶段的一个过渡，从职业生涯重要性上来说，远不及专业课重要，但是在本科阶段的学习生活规划中，有着非常重要的地位。由于通用课的课程多，学分重，占据了本科阶段绩点的主要部分，影响到学生在前两年的专业排名，也影响到大三结束时的推免资格分配，也就是保研。而从升学角度来看，对于攻读研究生和博士生的小伙伴来说，数学和英语这两大基础课，还是十分有用的。</p>\n<h3>数学</h3>\n<h4>微积分（高等数学）</h4>\n<p>微积分，即传说中的高数，成为了无数新大一心中的痛。但好在，大学的课程考核没那么严格，期末想要拿高分，也不至于像高中那样刷题刷的那么狠。微积分对于计算机专业学生的重要性，主要体现在计算机图形学中的函数变换，机器学习中的梯度算法，信号处理等领域。</p>\n<p>微积分的知识体系包括微分和积分两部分，一般会先学微分，再学积分，也有的学校把高数分为两个学期。微分就是高中的导数的升级版，对于大一萌新来说还算比较友好。积分恰好是微分的逆运算，思想上对大一萌新来说比较新，一时半会可能接受不了。不过这门课所有的高校都有开设，而且大部分的名校都有配套的网课，教材也都打磨的非常出色，结合网课和教材的“啃书”学习模式，这门课一定不会落下。</p>\n<p>书籍的话，推荐《普林斯顿微积分读本》。这本书详细讲解了微积分基础、极限、连续、微分、导数的应用、积分、无穷级数、泰勒级数与幂级数等内容。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409155056751.png\" alt=\"\"></p>\n<h4>线性代数（高等代数）</h4>\n<p>线性代数的思维模式就更加复杂了一些，它定义了一个全新的数学世界，所有的符号、定理都是全新的，唯一能尝试的去理解的方式，大概就是用几何的方式去理解线性代数了。由于线性代数和几何学有着密不可分的关系，比如空间变换的理论支撑就是线性代数，因此，网上有着各种“可视化学习线性代数”的学习资源，帮助理解线性代数的意义，有助于公式的记忆。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409153940473.png\" alt=\"\"></p>\n<p>书籍的话，推荐中科大李尚志老师的 <strong><a href=\"https://book.douban.com/subject/26390093/\" target=\"_blank\" rel=\"noopener noreferrer\">《线性代数学习指导》</a></strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409155325251.png\" alt=\"\"></p>\n<h4>概率论与数理统计</h4>\n<p>对于计算机专业的小伙伴来说，这门课可能是概率论更有用一点，而非数理统计。可能某些学校只开设概率论课程，也可能数理统计也教，但仅仅是皮毛。概率论的学习路线和微积分相似，就是一个个公式辅以实例，不像线性代数那么抽象，比较贴近生活。在现在的就业形势下，概率论与数理统计专业的学生，应该是数学专业最好就业的了，他们通常到岗位上会做一些数据分析的工作，因此，<strong>这门课程确实是数据分析的重要前置课程，概率论在机器学习中的重要性也就不言而喻了。</strong></p>\n<p>书籍的话，推荐 <strong><a href=\"https://book.douban.com/subject/34897672/\" target=\"_blank\" rel=\"noopener noreferrer\">《概率论与数理统计教程》</a></strong> 。这本书共八章，前四章为概率论部分，主要叙述各种概率分布及其性质，后四章为数理统计部分，主要叙述各种参数估计与假设检验。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409155738505.png\" alt=\"\"></p>\n<h4>离散数学（集合论、图论、近世代数等）</h4>\n<p>离散数学是计算机专业的专属数学，但实际上对于本科毕业找工作的小伙伴来说，离散数学还并没有发挥它的巨大作用。离散数学的作用主要在在图研究等领域，理论性极强，需要读研深造的小伙伴尽可能地扎实掌握。</p>\n<h3>英语</h3>\n<p>英语算是大学里面比较灵活的一项技能了，有的人会说，“英语学的越好，对个人发展越有利”，此话说的没错，但是对于一些有着明确发展目标的小伙伴，可能英语技能并不在他们的技能清单内。接下来的这些话只针对计算机专业的小伙伴们哦。</p>\n<p>英语课在大学本科一般只有前两年开设，小伙伴们可以记住，<strong>想用英语课来提升自己的英语水平的，可以打消这个念头了。</strong> 英语水平的提高全靠自己平时的积累和练习，以及有针对性的刷题。</p>\n<p><strong>英语的大学四六级一定要过。</strong> 这是必备技能，绝大部分就业岗位都要看四六级水平的，最起码要通过的。四级比高中英语稍微难一些，一般的小伙伴可能会卡在六级上，六级需要针对性的训练一下，因为大学期间能接触英语的实在太少了，每学期一门英语课是不足以保持自己的英语水平的。对于一些来自于偏远地区，高中英语基础薄弱的，考四六级会更加吃力。建议考前集中训练一下历年真题，辅以背一下高频词汇，四六级通过只需要 425 分，这个分数线还是比较容易达到的。稍微好一点的小伙伴可能冲一下 500 分，要是能考到 600 分的话，那是非常不错的水平了，算是简历上比较有亮点的一项。</p>\n<p>英语的雅思托福考试只限于想要出国的小伙伴，以及应聘岗位对英语能力有特殊要求的。雅思托福考试裸考不容易通过，花钱去比较靠谱的校外补课班应该是一个比较好的选择。</p>\n<p>对于计算机专业的小伙伴来说，英语能力还是比较重要的，虽然应聘的时候不会因为没有雅思托福成绩卡人，但是你起码要能够：</p>\n<ul>\n<li><strong>熟练使用英文界面的软件、系统等</strong></li>\n<li><strong>对于外网的一些博客、bug 解决方案等，阅读无压力</strong></li>\n<li><strong>熟练阅读英文文献</strong></li>\n<li><strong>具备一定的英文论文的撰写能力</strong></li>\n</ul>\n<p>毕竟计算机语言就是字符语言，听说读写中最起码要满足<strong>读写</strong>这两项不过分吧。</p>\n<h3>编译原理</h3>\n<p>编译原理相比于前面介绍的专业课，地位显得不那么重要了。编译原理的重要性主要体现在：</p>\n<ul>\n<li>底层语言、引擎或高级语言的开发，如 MySQL，Java 等</li>\n<li>操作系统或嵌入式系统的开发</li>\n<li>词法、语法、语义的思想，以及自动机思想</li>\n</ul>\n<p><strong>编译原理的重要前置课程就是形式语言与自动机，自动机的思想在词法分析当中有着重要应用，学习了这门课后，应该就会发现许多场景下，自动机算法的妙用了。</strong></p>\n<p>总的来说，这门课对于各位程序员的职业发展来说，相对不那么重要，但是从难度上来说，学习这门课可以对编程思想有一个较好的巩固。学习资源的话，除了课堂上的幻灯片课件以外，还可以把 《编译原理》 这本书作为参考书，用以辅助自己学不懂的地方（大家口中的龙书，想要啃下来还是有一定难度的）。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210406152148373.png\" alt=\"\"></p>\n<p>其他书籍推荐:</p>\n<ul>\n<li><strong><a href=\"https://book.douban.com/subject/30191414/\" target=\"_blank\" rel=\"noopener noreferrer\">《现代编译原理》</a></strong>：编译原理的入门书。</li>\n<li><strong><a href=\"https://book.douban.com/subject/20436488/\" target=\"_blank\" rel=\"noopener noreferrer\">《编译器设计》</a></strong>：覆盖了编译器从前端到后端的全部主题。</li>\n</ul>\n<p>我上面推荐的书籍的难度还是比较高的，真心很难坚持看完。这里强烈推荐<a href=\"https://www.icourse163.org/course/HIT-1002123007\" target=\"_blank\" rel=\"noopener noreferrer\">哈工大的编译原理视频课程</a>，真心不错，还是国家精品课程，关键还是又漂亮有温柔的美女老师讲的！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210406152847824.png\" alt=\"\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/booksimage-20201012191645919.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机书籍"
      ]
    },
    {
      "title": "数据库必读经典书籍",
      "url": "https://javaguide.cn/books/database.html",
      "id": "https://javaguide.cn/books/database.html",
      "summary": "数据库基础 数据库基础这块，如果你觉得书籍比较枯燥，自己坚持不下来的话，我推荐你可以先看看一些不错的视频，北京师范大学的《数据库系统原理》、哈尔滨工业大学的《数据库系统（下）：管理与技术》就很不错。 《数据库系统原理》这个课程的老师讲的非常详细，而且每一小节的作业设计的也与所讲知识很贴合，后面还有很多配套实验。 如果你比较喜欢动手，对于理论知识比较抵触...",
      "content_html": "<h2>数据库基础</h2>\n<p>数据库基础这块，如果你觉得书籍比较枯燥，自己坚持不下来的话，我推荐你可以先看看一些不错的视频，北京师范大学的<a href=\"https://www.icourse163.org/course/BNU-1002842007\" target=\"_blank\" rel=\"noopener noreferrer\">《数据库系统原理》</a>、哈尔滨工业大学的<a href=\"https://www.icourse163.org/course/HIT-1001578001\" target=\"_blank\" rel=\"noopener noreferrer\">《数据库系统（下）：管理与技术》</a>就很不错。</p>\n<p><a href=\"https://www.icourse163.org/course/BNU-1002842007\" target=\"_blank\" rel=\"noopener noreferrer\">《数据库系统原理》</a>这个课程的老师讲的非常详细，而且每一小节的作业设计的也与所讲知识很贴合，后面还有很多配套实验。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/up-e113c726a41874ef5fb19f7ac14e38e16ce.png\" alt=\"\"></p>\n<p>如果你比较喜欢动手，对于理论知识比较抵触的话，推荐你看看<a href=\"https://cstack.github.io/db_tutorial/\" target=\"_blank\" rel=\"noopener noreferrer\">《如何开发一个简单的数据库》</a> ，这个 project 会手把手教你编写一个简单的数据库。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/up-11de8cb239aa7201cc8d78fa28928b9ec7d.png\" alt=\"\"></p>\n<p>GitHub 上也已经有大佬用 Java 实现过一个简易的数据库，介绍的挺详细的，感兴趣的朋友可以去看看。地址：<a href=\"https://github.com/alchemystar/Freedom\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/alchemystar/Freedom</a> 。</p>\n<p>除了这个用 Java 写的之外，<strong><a href=\"https://github.com/cstack/db_tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">db_tutorial</a></strong> 这个项目是国外的一个大佬用 C 语言写的，朋友们也可以去瞅瞅。</p>\n<p><strong>只要利用好搜索引擎，你可以找到各种语言实现的数据库玩具。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/up-d32d853f847633ac7ed0efdecf56be1f1d2.png\" alt=\"\"></p>\n<p><strong>纸上学来终觉浅 绝知此事要躬行！强烈推荐 CS 专业的小伙伴一定要多多实践！！！</strong></p>\n<h3>《数据库系统概念》</h3>\n<p><a href=\"https://book.douban.com/subject/10548379/\" target=\"_blank\" rel=\"noopener noreferrer\">《数据库系统概念》</a>这本书涵盖了数据库系统的全套概念，知识体系清晰，是学习数据库系统非常经典的教材！不是参考书！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/booksimage-20220409150441742.png\" alt=\"\"></p>\n<h3>《数据库系统实现》</h3>\n<p>如果你也想要研究 MySQL 底层原理的话，我推荐你可以先阅读一下<a href=\"https://book.douban.com/subject/4838430/\" target=\"_blank\" rel=\"noopener noreferrer\">《数据库系统实现》</a>。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/database-system-implementation.png\" alt=\"\"></p>\n<p>不管是 MySQL 还是 Oracle ，它们总体的架子是差不多的，不同的是其内部的实现比如数据库索引的数据结构、存储引擎的实现方式等等。</p>\n<p>这本书有些地方还是翻译的比较蹩脚，有能力看英文版的还是建议上手英文版。</p>\n<p>《数据库系统实现》 这本书是斯坦福的教材，另外还有一本<a href=\"https://book.douban.com/subject/3923575/\" target=\"_blank\" rel=\"noopener noreferrer\">《数据库系统基础教程》</a>是前置课程，可以带你入门数据库。</p>\n<h2>MySQL</h2>\n<p>我们网站或者 APP 的数据都是需要使用数据库来存储数据的。</p>\n<p>一般企业项目开发中，使用 MySQL 比较多。如果你要学习 MySQL 的话，可以看下面这 3 本书籍：</p>\n<ul>\n<li><strong><a href=\"https://book.douban.com/subject/3354490/\" target=\"_blank\" rel=\"noopener noreferrer\">《MySQL 必知必会》</a></strong>：非常薄！非常适合 MySQL 新手阅读，很棒的入门教材。</li>\n<li><strong><a href=\"https://book.douban.com/subject/23008813/\" target=\"_blank\" rel=\"noopener noreferrer\">《高性能 MySQL》</a></strong>：MySQL 领域的经典之作！学习 MySQL 必看！属于进阶内容，主要教你如何更好地使用 MySQL 。既有有理论，又有实践！如果你没时间都看一遍的话，我建议第 5 章（创建高性能的索引）、第 6 章（查询性能优化） 你一定要认真看一下。</li>\n<li><strong><a href=\"https://book.douban.com/subject/24708143/\" target=\"_blank\" rel=\"noopener noreferrer\">《MySQL 技术内幕》</a></strong>：你想深入了解 MySQL 存储引擎的话，看这本书准没错！</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/up-3d31e762933f9e50cc7170b2ebd8433917b.png\" alt=\"\"></p>\n<p>视频的话，你可以看看动力节点的 <a href=\"https://www.bilibili.com/video/BV1fx411X7BD\" target=\"_blank\" rel=\"noopener noreferrer\">《MySQL 数据库教程视频》</a>。这个视频基本上把 MySQL 的相关一些入门知识给介绍完了。</p>\n<p>另外，强推一波 <strong><a href=\"https://book.douban.com/subject/35231266/\" target=\"_blank\" rel=\"noopener noreferrer\">《MySQL 是怎样运行的》</a></strong> 这本书，内容很适合拿来准备面试。讲的很细节，但又不枯燥，内容非常良心！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/20210703120643370.png\" alt=\"\"></p>\n<h2>PostgreSQL</h2>\n<p>和 MySQL 一样，PostgreSQL 也是开源免费且功能强大的关系型数据库。PostgreSQL 的 Slogan 是“<strong>世界上最先进的开源关系型数据库</strong>” 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220702144954370.png\" alt=\"\"></p>\n<p>最近几年，由于 PostgreSQL 的各种新特性过于优秀，使用 PostgreSQL 代替 MySQL 的项目越来越多了。</p>\n<p>如果你还在纠结是否尝试一下 PostgreSQL 的话，建议你看看这个知乎话题：<a href=\"https://www.zhihu.com/question/20010554\" target=\"_blank\" rel=\"noopener noreferrer\">PostgreSQL 与 MySQL 相比，优势何在？ - 知乎</a> 。</p>\n<h3>《PostgreSQL 指南：内幕探索》</h3>\n<p><a href=\"https://book.douban.com/subject/33477094/\" target=\"_blank\" rel=\"noopener noreferrer\">《PostgreSQL 指南：内幕探索》</a>这本书主要介绍了 PostgreSQL 内部的工作原理，包括数据库对象的逻辑组织与物理实现，进程与内存的架构。</p>\n<p>刚工作那会需要用到 PostgreSQL ，看了大概 1/3 的内容，感觉还不错。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/PostgreSQL-Guide.png\" alt=\"\"></p>\n<h3>《PostgreSQL 技术内幕：查询优化深度探索》</h3>\n<p><a href=\"https://book.douban.com/subject/30256561/\" target=\"_blank\" rel=\"noopener noreferrer\">《PostgreSQL 技术内幕：查询优化深度探索》</a>这本书主要讲了 PostgreSQL 在查询优化上的一些技术实现细节，可以让你对 PostgreSQL 的查询优化器有深层次的了解。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/PostgreSQL-TechnologyInsider.png\" alt=\"《PostgreSQL 技术内幕：查询优化深度探索》\"></p>\n<h2>Redis</h2>\n<p><strong>Redis 就是一个使用 C 语言开发的数据库</strong>，不过与传统数据库不同的是 <strong>Redis 的数据是存在内存中的</strong> ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。</p>\n<p>如果你要学习 Redis 的话，强烈推荐下面这两本书：</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/25900156/\" target=\"_blank\" rel=\"noopener noreferrer\">《Redis 设计与实现》</a> ：主要是 Redis 理论知识相关的内容，比较全面。我之前写过一篇文章 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247507030&amp;idx=1&amp;sn=0a5fd669413991b30163ab6f5834a4ad&amp;chksm=cea1939df9d61a8b93925fae92f4cee0838c449534e60731cfaf533369831192e296780b32a6&amp;token=709354671&amp;lang=zh_CN&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《7 年前，24 岁，出版了一本 Redis 神书》</a> 来介绍这本书。</li>\n<li><a href=\"https://book.douban.com/subject/26612779/\" target=\"_blank\" rel=\"noopener noreferrer\">《Redis 核心原理与实践》</a>：主要是结合源码来分析 Redis 的重要知识点比如各种数据结构和高级特性。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/redis-books.png\" alt=\"《Redis 设计与实现》和《Redis 设计与实现》\"></p>\n<p>另外，<a href=\"https://book.douban.com/subject/26971561/\" target=\"_blank\" rel=\"noopener noreferrer\">《Redis 开发与运维》</a> 这本书也非常不错，既有基础介绍，又有一线开发运维经验分享。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/redis-kaifa-yu-yunwei.png\" alt=\"《Redis 开发与运维》\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/books/up-e113c726a41874ef5fb19f7ac14e38e16ce.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机书籍"
      ]
    },
    {
      "title": "分布式必读经典书籍",
      "url": "https://javaguide.cn/books/distributed-system.html",
      "id": "https://javaguide.cn/books/distributed-system.html",
      "summary": "《深入理解分布式系统》 《深入理解分布式系统》 是 2022 年出版的一本分布式中文原创书籍，主要讲的是分布式领域的基本概念、常见挑战以及共识算法。 作者用了大量篇幅来介绍分布式领域中非常重要的共识算法，并且还会基于 Go 语言带着你从零实现了一个共识算法的鼻祖 Paxos 算法。 实话说，我还没有开始看这本书。但是！这本书的作者的博客上的分布式相关的...",
      "content_html": "<h2>《深入理解分布式系统》</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/deep-understanding-of-distributed-system.png\" alt=\"\"></p>\n<p><strong><a href=\"https://book.douban.com/subject/35794814/\" target=\"_blank\" rel=\"noopener noreferrer\">《深入理解分布式系统》</a></strong> 是 2022 年出版的一本分布式中文原创书籍，主要讲的是分布式领域的基本概念、常见挑战以及共识算法。</p>\n<p>作者用了大量篇幅来介绍分布式领域中非常重要的共识算法，并且还会基于 Go 语言带着你从零实现了一个共识算法的鼻祖 Paxos 算法。</p>\n<p>实话说，我还没有开始看这本书。但是！这本书的作者的博客上的分布式相关的文章我几乎每一篇都认真看过。作者从 2019 年开始构思《深入理解分布式系统》，2020 年开始动笔，花了接近两年的时间才最终交稿。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220706121952258.png\" alt=\"\"></p>\n<p>作者专门写了一篇文章来介绍这本书的背后的故事，感兴趣的小伙伴可以自行查阅：<a href=\"https://zhuanlan.zhihu.com/p/487534882\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/487534882</a> 。</p>\n<p>最后，放上这本书的代码仓库和勘误地址：<a href=\"https://github.com/tangwz/DistSysDeepDive\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tangwz/DistSysDeepDive</a> 。</p>\n<h2>《数据密集型应用系统设计》</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/ddia.png\" alt=\"\"></p>\n<p>强推一波 <strong><a href=\"https://book.douban.com/subject/30329536/\" target=\"_blank\" rel=\"noopener noreferrer\">《Designing Data-Intensive Application》</a></strong> （DDIA，数据密集型应用系统设计），值得读很多遍！豆瓣有接近 90% 的人看了这本书之后给了五星好评。</p>\n<p>这本书主要讲了分布式数据库、数据分区、事务、分布式系统等内容。</p>\n<p>书中介绍的大部分概念你可能之前都听过，但是在看了书中的内容之后，你可能会豁然开朗：“哇塞！原来是这样的啊！这不是某技术的原理么？”。</p>\n<p>这本书我之前专门写过知乎回答介绍和推荐，没看过的朋友可以看看：<a href=\"https://www.zhihu.com/question/50408698/answer/2278198495\" target=\"_blank\" rel=\"noopener noreferrer\">有哪些你看了以后大呼过瘾的编程书？</a> 。另外，如果你在阅读这本书的时候感觉难度比较大，很多地方读不懂的话，我这里推荐一下《深入理解分布式系统》作者写的<a href=\"https://ddia.qtmuniao.com\" target=\"_blank\" rel=\"noopener noreferrer\">《DDIA 逐章精读》小册</a>。</p>\n<h2>《深入理解分布式事务》</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/In-depth-understanding-of-distributed-transactions-xiaoyu.png\" alt=\"\"></p>\n<p><strong><a href=\"https://book.douban.com/subject/35626925/\" target=\"_blank\" rel=\"noopener noreferrer\">《深入理解分布式事务》</a></strong> 这本书的其中一位作者是 Apache ShenYu（incubating）网关创始人、Hmily、RainCat、Myth 等分布式事务框架的创始人。</p>\n<p>学习分布式事务的时候，可以参考一下这本书。虽有一些小错误以及逻辑不通顺的地方，但对于各种分布式事务解决方案的介绍，总体来说还是不错的。</p>\n<h2>《从 Paxos 到 Zookeeper》</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20211216161350118.png\" alt=\"\"></p>\n<p><strong><a href=\"https://book.douban.com/subject/26292004/\" target=\"_blank\" rel=\"noopener noreferrer\">《从 Paxos 到 Zookeeper》</a></strong> 是一本带你入门分布式理论的好书。这本书主要介绍几种典型的分布式一致性协议，以及解决分布式一致性问题的思路，其中重点讲解了 Paxos 和 ZAB 协议。</p>\n<p>PS：Zookeeper 现在用的不多，可以不用重点学习，但 Paxos 和 ZAB 协议还是非常值得深入研究的。</p>\n<h2>《深入理解分布式共识算法》</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/deep-dive-into-distributed-consensus-algorithms.png\" alt=\"\"></p>\n<p><strong><a href=\"https://book.douban.com/subject/36335459/\" target=\"_blank\" rel=\"noopener noreferrer\">《深入理解分布式共识算法》</a></strong> 详细剖析了 Paxos、Raft、Zab 等主流分布式共识算法的核心原理和实现细节。如果你想要了解分布式共识算法的话，不妨参考一下这本书的总结。</p>\n<h2>《微服务架构设计模式》</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/microservices-patterns.png\" alt=\"\"></p>\n<p><strong><a href=\"https://book.douban.com/subject/33425123/\" target=\"_blank\" rel=\"noopener noreferrer\">《微服务架构设计模式》</a></strong> 的作者 Chris Richardson 被评为世界十大软件架构师之一、微服务架构先驱。这本书汇集了 44 个经过实践验证的架构设计模式，这些模式用来解决诸如服务拆分、事务管理、查询和跨服务通信等难题。书中的内容不仅理论扎实，还通过丰富的 Java 代码示例，引导读者一步步掌握开发和部署生产级别的微服务架构应用。</p>\n<h2>《凤凰架构》</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/f5bec14d3b404ac4b041d723153658b5.png\" alt=\"\"></p>\n<p><strong><a href=\"https://book.douban.com/subject/35492898/\" target=\"_blank\" rel=\"noopener noreferrer\">《凤凰架构》</a></strong> 这本书是周志明老师多年架构和研发经验的总结，内容非常干货，深度与广度并存，理论结合实践！</p>\n<p>正如书名的副标题“构建可靠的大型分布式系统”所说的那样，这本书的主要内容就是讲：“如何构建一套可靠的分布式大型软件系统” ，涵盖了下面这些方面的内容：</p>\n<ul>\n<li>软件架构从单体到微服务再到无服务的演进之路。</li>\n<li>架构师应该在架构设计时应该注意哪些问题，有哪些比较好的实践。</li>\n<li>分布式的基石比如常见的分布式共识算法 Paxos、Multi Paxos。</li>\n<li>不可变基础设施比如虚拟化容器、服务网格。</li>\n<li>向微服务迈进的避坑指南。</li>\n</ul>\n<p>这本书我推荐过很多次了。详见历史文章：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247505254&amp;idx=1&amp;sn=04faf3093d6002354f06fffbfc2954e0&amp;chksm=cea19aadf9d613bbba7ed0e02ccc4a9ef3a30f4d83530e7ad319c2cc69cd1770e43d1d470046&amp;scene=178&amp;cur_album_id=1646812382221926401#rd\" target=\"_blank\" rel=\"noopener noreferrer\">周志明老师的又一神书！发现宝藏！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/9nbzfZGAWM9_qIMp1r6uUQ\" target=\"_blank\" rel=\"noopener noreferrer\">Java 领域的又一神书！周志明老师 YYDS！</a></li>\n</ul>\n<h2>其他</h2>\n<ul>\n<li><a href=\"https://book.douban.com/subject/21624776/\" target=\"_blank\" rel=\"noopener noreferrer\">《分布式系统 : 概念与设计》</a>：偏教材类型，内容全而无趣，可作为参考书籍；</li>\n<li><a href=\"https://book.douban.com/subject/35689350/\" target=\"_blank\" rel=\"noopener noreferrer\">《分布式架构原理与实践》</a>：2021 年出版的，没什么热度，我也还没看过。</li>\n</ul>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/books/deep-understanding-of-distributed-system.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机书籍"
      ]
    },
    {
      "title": "Java 必读经典书籍",
      "url": "https://javaguide.cn/books/java.html",
      "id": "https://javaguide.cn/books/java.html",
      "summary": "Java 基础 《Head First Java》 《Head First Java》-豆瓣 《Head First Java》这本书的内容很轻松有趣，可以说是我学习编程初期最喜欢的几本书之一了。同时，这本书也是我的 Java 启蒙书籍。我在学习 Java 的初期多亏了这本书的帮助，自己才算是跨进 Java 语言的大门。 我觉得我在 Java 这块能够...",
      "content_html": "<h2>Java 基础</h2>\n<p><strong><a href=\"https://book.douban.com/subject/2000732/\" target=\"_blank\" rel=\"noopener noreferrer\">《Head First Java》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424103035793.png\" alt=\"《Head First Java》-豆瓣\"></p>\n<p>《Head First Java》这本书的内容很轻松有趣，可以说是我学习编程初期最喜欢的几本书之一了。同时，这本书也是我的 Java 启蒙书籍。我在学习 Java 的初期多亏了这本书的帮助，自己才算是跨进 Java 语言的大门。</p>\n<p>我觉得我在 Java 这块能够坚持下来，这本书有很大的功劳。我身边的的很多朋友学习 Java 初期都是看的这本书。</p>\n<p>有很多小伙伴就会问了：<strong>这本书适不适合编程新手阅读呢？</strong></p>\n<p>我个人觉得这本书还是挺适合编程新手阅读的，毕竟是 “Head First” 系列。</p>\n<p><strong><a href=\"https://book.douban.com/subject/34898994/\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 核心技术卷 1 + 卷 2》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424101217849.png\" alt=\"《Java 核心技术卷 1》-豆瓣\"></p>\n<p>这两本书也非常不错。不过，这两本书的内容很多，全看的话比较费时间。我现在是把这两本书当做工具书来用，就比如我平时写文章的时候，碰到一些 Java 基础方面的问题，经常就翻看这两本来当做参考！</p>\n<p>我当时在大学的时候就买了两本放在寝室，没事的时候就翻翻。建议有点 Java 基础之后再读，介绍的还是比较深入和全面的，非常推荐。</p>\n<p><strong><a href=\"https://book.douban.com/subject/2130190/\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 编程思想》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424103124893.png\" alt=\"《Java 编程思想》-豆瓣\"></p>\n<p>另外，这本书的作者去年新出版了<a href=\"https://book.douban.com/subject/35751619/\" target=\"_blank\" rel=\"noopener noreferrer\">《On Java》</a>，我更推荐这本，内容更新，介绍了 Java 的 3 个长期支持版（Java 8、11、17）。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/on-java/6171657600353_.pic_hd.jpg\" alt=\"\"></p>\n<p>毕竟，这是市面上目前唯一一本介绍了 Java 的 3 个长期支持版（Java 8、11、17）的技术书籍。</p>\n<p><strong><a href=\"https://book.douban.com/subject/26772632/\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 8 实战》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424103202625.png\" alt=\"《Java 8实战》-豆瓣\"></p>\n<p>Java 8 算是一个里程碑式的版本，现在一般企业还是用 Java 8 比较多。掌握 Java 8 的一些新特性比如 Lambda、Stream API 还是挺有必要的。这块的话，我推荐 <strong><a href=\"https://book.douban.com/subject/26772632/\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 8 实战》</a></strong> 这本书。</p>\n<p><strong><a href=\"https://book.douban.com/subject/30133440/\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 编程的逻辑》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20230721153650488.png\" alt=\"《Java编程的逻辑》\"></p>\n<p>一本非常低调的好书，相比于入门书来说，内容更有深度。适合初学者，同时也适合大家拿来复习 Java 基础知识。</p>\n<h2>Java 并发</h2>\n<p><strong><a href=\"https://book.douban.com/subject/30351286/\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 并发编程之美》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424112413660.png\" alt=\"《Java 并发编程之美》-豆瓣\"></p>\n<p>这本书还是非常适合我们用来学习 Java 多线程的，讲解非常通俗易懂，作者从并发编程基础到实战都是信手拈来。</p>\n<p>另外，这本书的作者加多自身也会经常在网上发布各种技术文章。这本书也是加多大佬这么多年在多线程领域的沉淀所得的结果吧！他书中的内容基本都是结合代码讲解，非常有说服力！</p>\n<p><strong><a href=\"https://book.douban.com/subject/30358019/\" target=\"_blank\" rel=\"noopener noreferrer\">《实战 Java 高并发程序设计》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424112554830.png\" alt=\"《实战 Java 高并发程序设计》-豆瓣\"></p>\n<p>这个是我第二本要推荐的书籍，比较适合作为多线程入门/进阶书籍来看。这本书内容同样是理论结合实战，对于每个知识点的讲解也比较通俗易懂，整体结构也比较清。</p>\n<p><strong><a href=\"https://github.com/RedSpider1/concurrent\" target=\"_blank\" rel=\"noopener noreferrer\">《深入浅出 Java 多线程》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424112927759.png\" alt=\"《深入浅出 Java 多线程》在线阅读\"></p>\n<p>这本开源书籍是几位大厂的大佬开源的。这几位作者为了写好《深入浅出 Java 多线程》这本书阅读了大量的 Java 多线程方面的书籍和博客，然后再加上他们的经验总结、Demo 实例、源码解析，最终才形成了这本书。</p>\n<p>这本书的质量也是非常过硬！给作者们点个赞！这本书有统一的排版规则和语言风格、清晰的表达方式和逻辑。并且每篇文章初稿写完后，作者们就会互相审校，合并到主分支时所有成员会再次审校，最后再通篇修订了三遍。</p>\n<p>在线阅读：<a href=\"https://redspider.gitbook.io/concurrent/\" target=\"_blank\" rel=\"noopener noreferrer\">https://redspider.gitbook.io/concurrent/</a>。</p>\n<p><strong><a href=\"https://book.douban.com/subject/35013531/\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 并发实现原理：JDK 源码剖析》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/0b1b046af81f4c94a03e292e66dd6f7d.png\" alt=\"《Java 并发实现原理：JDK 源码剖析》-豆瓣\"></p>\n<p>这本书主要是对 Java Concurrent 包中一些比较重要的源码进行了讲解，另外，像 JMM、happen-before、CAS 等等比较重要的并发知识这本书也都会一并介绍到。</p>\n<p>不论是你想要深入研究 Java 并发，还是说要准备面试，你都可以看看这本书。</p>\n<h2>JVM</h2>\n<p><strong><a href=\"https://book.douban.com/subject/34907497/\" target=\"_blank\" rel=\"noopener noreferrer\">《深入理解 Java 虚拟机》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210710104655705.png\" alt=\"《深入理解 Java 虚拟机》-豆瓣\"></p>\n<p>这本书就一句话形容：<strong>国产书籍中的战斗机，实实在在的优秀！</strong> （真心希望国内能有更多这样的优质书籍出现！加油！💪）</p>\n<p>这本书的第 3 版 2019 年底已经出来了，新增了很多实在的内容比如 ZGC 等新一代 GC 的原理剖析。目前豆瓣上是 9.5 的高分，🐂 不 🐂 我就不多说了！</p>\n<p>不论是你面试还是你想要在 Java 领域学习的更深，你都离不开这本书籍。这本书不光要看，你还要多看几遍，里面都是干货。这本书里面还有一些需要自己实践的东西，我建议你也跟着实践一下。</p>\n<p>类似的书籍还有 <strong><a href=\"https://book.douban.com/subject/26354292/\" target=\"_blank\" rel=\"noopener noreferrer\">《实战 Java 虚拟机》</a></strong>、<strong><a href=\"https://book.douban.com/subject/34935105/\" target=\"_blank\" rel=\"noopener noreferrer\">《虚拟机设计与实现:以 JVM 为例》</a></strong> ，这两本都是非常不错的！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113158144.png\" alt=\"《实战 Java 虚拟机》-豆瓣\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113210153.png\" alt=\"《虚拟机设计与实现:以 JVM 为例》-豆瓣\"></p>\n<p>如果你对实战比较感兴趣，想要自己动手写一个简易的 JVM 的话，可以看看 <strong><a href=\"https://book.douban.com/subject/26802084/\" target=\"_blank\" rel=\"noopener noreferrer\">《自己动手写 Java 虚拟机》</a></strong> 这本书。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113445246.png\" alt=\"《自己动手写 Java 虚拟机》-豆瓣\"></p>\n<p>书中的代码是基于 Go 语言实现的，搞懂了原理之后，你可以使用 Java 语言模仿着写一个，也算是练练手！ 如果你当前没有能力独立使用 Java 语言模仿着写一个的话，你也可以在网上找到很多基于 Java 语言版本的实现，比如<a href=\"https://zachaxy.github.io/tags/JVM/\" target=\"_blank\" rel=\"noopener noreferrer\">《zachaxy 的手写 JVM 系列》</a> 。</p>\n<p>这本书目前在豆瓣有 8.2 的评分，我个人觉得张秀宏老师写的挺好的，这本书值得更高的评分。</p>\n<p>另外，R 大在豆瓣发的<a href=\"https://www.douban.com/doulist/2545443/\" target=\"_blank\" rel=\"noopener noreferrer\">《从表到里学习 JVM 实现》</a>这篇文章中也推荐了很多不错的 JVM 相关的书籍，推荐小伙伴们去看看。</p>\n<p>再推荐两个视频给喜欢看视频学习的小伙伴。</p>\n<p>第 1 个是尚硅谷的宋红康老师讲的<a href=\"https://www.bilibili.com/video/BV1PJ411n7xZ\" target=\"_blank\" rel=\"noopener noreferrer\">《JVM 全套教程》</a>。这个课程的内容非常硬，一共有接近 400 小节。</p>\n<p>课程的内容分为 3 部分：</p>\n<ol>\n<li>《内存与垃圾回收篇》</li>\n<li>《字节码与类的加载篇》</li>\n<li>《性能监控与调优篇》</li>\n</ol>\n<p>第 2 个是你假笨大佬的 <strong><a href=\"https://club.perfma.com/course/438755/list\" target=\"_blank\" rel=\"noopener noreferrer\">《JVM 参数【Memory 篇】》</a></strong> 教程，很厉害了！</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70.png\" alt=\"\"></p>\n<h2>常用工具</h2>\n<p>非常重要！非常重要！特别是 Git 和 Docker。</p>\n<ul>\n<li><strong>IDEA</strong>：熟悉基本操作以及常用快捷。相关资料： <a href=\"https://github.com/judasn/IntelliJ-IDEA-Tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">《IntelliJ IDEA 简体中文专题教程》</a> 。</li>\n<li><strong>Maven</strong>：强烈建议学习常用框架之前可以提前花几天时间学习一下<strong>Maven</strong>的使用。（到处找 Jar 包，下载 Jar 包是真的麻烦费事，使用 Maven 可以为你省很多事情）。相关阅读：<a href=\"https://javaguide.cn/tools/maven/maven-core-concepts.html\" target=\"_blank\" rel=\"noopener noreferrer\">Maven 核心概念总结</a>。</li>\n<li><strong>Git</strong>：基本的 Git 技能也是必备的，试着在学习的过程中将自己的代码托管在 Github 上。相关阅读：<a href=\"https://javaguide.cn/tools/git/git-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git 核心概念总结</a>。</li>\n<li><strong>Docker</strong>：学着用 Docker 安装学习中需要用到的软件比如 MySQL ,这样方便很多，可以为你节省不少时间。相关资料：<a href=\"https://yeasy.gitbook.io/docker_practice/\" target=\"_blank\" rel=\"noopener noreferrer\">《Docker - 从入门到实践》</a> 。</li>\n</ul>\n<p>除了这些工具之外，我强烈建议你一定要搞懂 GitHub 的使用。一些使用 GitHub 的小技巧，你可以看<a href=\"https://javaguide.cn/tools/git/github-tips.html\" target=\"_blank\" rel=\"noopener noreferrer\">Github 实用小技巧总结</a>这篇文章。</p>\n<h2>常用框架</h2>\n<p>框架部分建议找官方文档或者博客来看。</p>\n<h3>Spring/SpringBoot</h3>\n<p><strong>Spring 和 SpringBoot 真的很重要！</strong></p>\n<p>一定要搞懂 AOP 和 IOC 这两个概念。Spring 中 bean 的作用域与生命周期、SpringMVC 工作原理详解等等知识点都是非常重要的，一定要搞懂。</p>\n<p>企业中做 Java 后端，你一定离不开 SpringBoot ，这个是必备的技能了！一定一定一定要学好！</p>\n<p>像 SpringBoot 和一些常见技术的整合你也要知识怎么做，比如 SpringBoot 整合 MyBatis、 ElasticSearch、SpringSecurity、Redis 等等。</p>\n<p>下面是一些比较推荐的书籍/专栏。</p>\n<p><strong><a href=\"https://book.douban.com/subject/34949443/\" target=\"_blank\" rel=\"noopener noreferrer\">《Spring 实战》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113512453.png\" alt=\"《Spring 实战》-豆瓣\"></p>\n<p>不建议当做入门书籍读，入门的话可以找点国人的书或者视频看。这本定位就相当于是关于 Spring 的一个概览，只有一些基本概念的介绍和示例，涵盖了 Spring 的各个方面，但都不够深入。就像作者在最后一页写的那样：“学习 Spring，这才刚刚开始”。</p>\n<p><strong><a href=\"https://book.douban.com/subject/30452637/\" target=\"_blank\" rel=\"noopener noreferrer\">《Spring 5 高级编程》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210328171223638.png\" alt=\"\"></p>\n<p>对于 Spring5 的新特性介绍的比较详细，也说不上好。另外，感觉全书翻译的有一点蹩脚的味道，还有一点枯燥。全书的内容比较多，我一般拿来当做工具书参考。</p>\n<p><strong><a href=\"https://book.douban.com/subject/33390560/\" target=\"_blank\" rel=\"noopener noreferrer\">《Spring Boot 编程思想（核心篇）》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113546513.png\" alt=\"《Spring Boot 编程思想（核心篇）》-豆瓣\"></p>\n<p><em>稍微有点啰嗦，但是原理介绍的比较清楚。</em></p>\n<p>SpringBoot 解析，不适合初学者。我是去年入手的，现在就看了几章，后面没看下去。书很厚，感觉很多很多知识点的讲解过于啰嗦和拖沓，不过，这本书对于 SpringBoot 内部原理讲解的还是很清楚。</p>\n<p><strong><a href=\"https://book.douban.com/subject/26857423/\" target=\"_blank\" rel=\"noopener noreferrer\">《Spring Boot 实战》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113614768.png\" alt=\"《Spring Boot 实战》-豆瓣\"></p>\n<p>比较一般的一本书，可以简单拿来看一下。</p>\n<h3>MyBatis</h3>\n<p>MyBatis 国内用的挺多的，我的建议是不需要花太多时间在上面。当然了，MyBatis 的源码还是非常值得学习的，里面有很多不错的编码实践。这里推荐两本讲解 MyBatis 源码的书籍。</p>\n<p><strong><a href=\"https://book.douban.com/subject/36243250/\" target=\"_blank\" rel=\"noopener noreferrer\">《手写 MyBatis：渐进式源码实践》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20230724123402784.png\" alt=\"《手写MyBatis：渐进式源码实践》\"></p>\n<p>我的好朋友小傅哥出版的一本书。这本书以实践为核心，摒弃 MyBatis 源码中繁杂的内容，聚焦于 MyBaits 中的核心逻辑，简化代码实现过程，以渐进式的开发方式，逐步实现 MyBaits 中的核心功能。</p>\n<p>这本书的配套项目的仓库地址：<a href=\"https://github.com/fuzhengwei/small-mybatis\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/fuzhengwei/small-mybatis</a> 。</p>\n<p><strong><a href=\"https://book.douban.com/subject/35138963/\" target=\"_blank\" rel=\"noopener noreferrer\">《通用源码阅读指导书――MyBatis 源码详解》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20230724123416741.png\" alt=\"《通用源码阅读指导书――MyBatis源码详解》\"></p>\n<p>这本书通过 MyBatis 开源代码讲解源码阅读的流程和方法！一共对 MyBatis 源码中的 300 多个类进行了详细解析，包括其背景知识、组织方式、逻辑结构、实现细节。</p>\n<p>这本书的配套示例仓库地址：<a href=\"https://github.com/yeecode/MyBatisDemo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/yeecode/MyBatisDemo</a> 。</p>\n<h3>Netty</h3>\n<p><strong><a href=\"https://book.douban.com/subject/27038538/\" target=\"_blank\" rel=\"noopener noreferrer\">《Netty 实战》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113715369.png\" alt=\"《Netty 实战》-豆瓣\"></p>\n<p>这本书可以用来入门 Netty ，内容从 BIO 聊到了 NIO、之后才详细介绍为什么有 Netty、Netty 为什么好用以及 Netty 重要的知识点讲解。</p>\n<p>这本书基本把 Netty 一些重要的知识点都介绍到了，而且基本都是通过实战的形式讲解。</p>\n<p><strong><a href=\"https://book.douban.com/subject/30381214/\" target=\"_blank\" rel=\"noopener noreferrer\">《Netty 进阶之路：跟着案例学 Netty》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113747345.png\" alt=\"《Netty 进阶之路：跟着案例学 Netty》-豆瓣\"></p>\n<p>内容都是关于使用 Netty 的实践案例比如内存泄露这些东西。如果你觉得你的 Netty 已经完全入门了，并且你想要对 Netty 掌握的更深的话，推荐你看一下这本书。</p>\n<p><strong><a href=\"https://book.douban.com/subject/35752082/\" target=\"_blank\" rel=\"noopener noreferrer\">《跟闪电侠学 Netty：Netty 即时聊天实战与底层原理》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/open-source-project/image-20220503085034268.png\" alt=\"\"></p>\n<p>2022 年 3 月出版的一本书。这本书分为上下两篇，上篇通过一个即时聊天系统的实战案例带你入门 Netty，下篇通过 Netty 源码分析带你搞清 Netty 比较重要的底层原理。</p>\n<h2>性能调优</h2>\n<p><strong><a href=\"https://book.douban.com/subject/26740520/\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 性能权威指南》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/image-20220424113809644.png\" alt=\"《Java 性能权威指南》-豆瓣\"></p>\n<p><em>希望能有更多这 Java 性能优化方面的好书！</em></p>\n<p>O'Reilly 家族书，性能调优的入门书，我个人觉得性能调优是每个 Java 从业者必备知识。</p>\n<p>这本书介绍的实战内容很不错，尤其是 JVM 调优，缺点也比较明显，就是内容稍微有点老。市面上这种书很少。这本书不适合初学者，建议对 Java 语言已经比价掌握了再看。另外，阅读之前，最好先看看周志明大佬的《深入理解 Java 虚拟机》。</p>\n<h2>网站架构</h2>\n<p>看过很多网站架构方面的书籍，比如《大型网站技术架构：核心原理与案例分析》、《亿级流量网站架构核心技术》、《架构修炼之道——亿级网关、平台开放、分布式、微服务、容错等核心技术修炼实践》等等。</p>\n<p>目前我觉得能推荐的只有李运华老师的 <strong><a href=\"https://book.douban.com/subject/30335935/\" target=\"_blank\" rel=\"noopener noreferrer\">《从零开始学架构》</a></strong> 和 余春龙老师的 <strong><a href=\"https://book.douban.com/subject/30443578/\" title=\"《软件架构设计：大型网站技术架构与业务架构融合之道》\" target=\"_blank\" rel=\"noopener noreferrer\">《软件架构设计：大型网站技术架构与业务架构融合之道》</a></strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210412224443177.png\" alt=\"\"></p>\n<p>《从零开始学架构》这本书对应的有一个极客时间的专栏—《从零开始学架构》，里面的很多内容都是这个专栏里面的，两者买其一就可以了。我看了很小一部分，内容挺全面的，是一本真正在讲如何做架构的书籍。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210412232441459.png\" alt=\"\"></p>\n<p>事务与锁、分布式（CAP、分布式事务……）、高并发、高可用 《软件架构设计：大型网站技术架构与业务架构融合之道》 这本书都有介绍到。</p>\n<h2>面试</h2>\n<p><strong>《JavaGuide 面试突击版》</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide-mianshituji/image-20220830103023493.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide-mianshituji/image-20220830102925775.png\" alt=\"\"></p>\n<p><a href=\"https://javaguide.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的面试版本，涵盖了 Java 后端方面的大部分知识点比如 集合、JVM、多线程还有数据库 MySQL 等内容。</p>\n<p>公众号后台回复：“<strong>面试突击</strong>” 即可免费获取，无任何套路。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/books/image-20220424103035793.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机书籍"
      ]
    },
    {
      "title": "搜索引擎必读经典书籍",
      "url": "https://javaguide.cn/books/search-engine.html",
      "id": "https://javaguide.cn/books/search-engine.html",
      "summary": "Lucene Elasticsearch 在 Apache Lucene 的基础上开发而成，学习 ES 之前，建议简单了解一下 Lucene 的相关概念。 《Lucene 实战》 是国内为数不多的中文版本讲 Lucene 的书籍，适合用来学习和了解 Lucene 相关的概念和常见操作。 《Lucene实战》-实战 Elasticsearch 《一本书讲...",
      "content_html": "<h2>Lucene</h2>\n<p>Elasticsearch 在 Apache Lucene 的基础上开发而成，学习 ES 之前，建议简单了解一下 Lucene 的相关概念。</p>\n<p><strong><a href=\"https://book.douban.com/subject/6440615/\" target=\"_blank\" rel=\"noopener noreferrer\">《Lucene 实战》</a></strong> 是国内为数不多的中文版本讲 Lucene 的书籍，适合用来学习和了解 Lucene 相关的概念和常见操作。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/vAJkdYEyol4e6Nr.png\" alt=\"《Lucene实战》-实战\"></p>\n<h2>Elasticsearch</h2>\n<p><strong><a href=\"https://book.douban.com/subject/36716996/\" target=\"_blank\" rel=\"noopener noreferrer\">《一本书讲透 Elasticsearch：原理、进阶与工程实践》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/one-book-guide-to-elasticsearch.png\" alt=\"\"></p>\n<p>基于 8.x 版本编写，目前全网最新的 Elasticsearch 讲解书籍。内容覆盖 Elastic 官方认证的核心知识点，源自真实项目案例和企业级问题解答。</p>\n<p><strong><a href=\"http://gk.link/a/10bcT\" title=\"《Elasticsearch 核心技术与实战》\" target=\"_blank\" rel=\"noopener noreferrer\">《Elasticsearch 核心技术与实战》</a></strong></p>\n<p>极客时间的这门课程基于 Elasticsearch 7.1 版本讲解，还算比较新。并且，作者是 eBay 资深技术专家，有 20 年的行业经验，课程质量有保障！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/20210420231125225.png\" alt=\"《Elasticsearch 核心技术与实战》-极客时间\"></p>\n<p><strong><a href=\"https://book.douban.com/subject/30386800/\" target=\"_blank\" rel=\"noopener noreferrer\">《Elasticsearch 源码解析与优化实战》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/f856485931a945639d5c23aaed74fb38~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"《Elasticsearch 源码解析与优化实战》-豆瓣\"></p>\n<p>如果你想进一步深入研究 Elasticsearch 原理的话，可以看看张超老师的这本书。这是市面上唯一一本写 Elasticsearch 源码的书。</p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/books/vAJkdYEyol4e6Nr.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机书籍"
      ]
    },
    {
      "title": "软件质量必读经典书籍",
      "url": "https://javaguide.cn/books/software-quality.html",
      "id": "https://javaguide.cn/books/software-quality.html",
      "summary": "下面推荐都是我看过并且我觉得值得推荐的书籍。 不过，这些书籍都比较偏理论，只能帮助你建立一个写优秀代码的意识标准。 如果你想要编写更高质量的代码、更高质量的软件，还是应该多去看优秀的源码，多去学习优秀的代码实践。 代码整洁之道 《重构》 必看书籍！无需多言。编程书籍领域的瑰宝。 世界顶级、国宝级别的 Martin Fowler 的书籍，可以说是软件开发...",
      "content_html": "<p>下面推荐都是我看过并且我觉得值得推荐的书籍。</p>\n<p>不过，这些书籍都比较偏理论，只能帮助你建立一个写优秀代码的意识标准。 如果你想要编写更高质量的代码、更高质量的软件，还是应该多去看优秀的源码，多去学习优秀的代码实践。</p>\n<h2>代码整洁之道</h2>\n<p><strong><a href=\"https://book.douban.com/subject/30468597/\" target=\"_blank\" rel=\"noopener noreferrer\">《重构》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210328174841577.png\" alt=\"\"></p>\n<p>必看书籍！无需多言。编程书籍领域的瑰宝。</p>\n<p>世界顶级、国宝级别的 Martin Fowler 的书籍，可以说是软件开发领域最经典的几本书之一。目前已经出了第二版。</p>\n<p>这是一本值得你看很多遍的书籍。</p>\n<p><strong><a href=\"https://book.douban.com/subject/4199741/\" target=\"_blank\" rel=\"noopener noreferrer\">《Clean Code》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210328174824891.png\" alt=\"\"></p>\n<p>《Clean Code》是 Bob 大叔的一本经典著作，强烈建议小伙伴们一定要看看。</p>\n<p>Bob 大叔将自己对整洁代码的理解浓缩在了这本书中，真可谓是对后生的一大馈赠。</p>\n<p><strong><a href=\"https://book.douban.com/subject/30412517/\" target=\"_blank\" rel=\"noopener noreferrer\">《Effective Java 》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/82d510c951384383b325080428af6c0a.png\" alt=\"\"></p>\n<p>《Effective Java 》这本书是 Java 领域国宝级别的书，非常经典。Java 程序员必看！</p>\n<p>这本书主要介绍了在 Java 编程中很多极具实用价值的经验规则，这些经验规则涵盖了大多数开发人员每天所面临的问题的解决方案。这篇文章能够非常实际地帮助你写出更加清晰、健壮和高效的代码。本书中的每条规则都以简短、独立的小文章形式出现，并通过例子代码加以进一步说明。</p>\n<p><strong><a href=\"https://book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"noopener noreferrer\">《代码大全》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210314173253221.png\" alt=\"\"></p>\n<p>其实，《代码大全（第 2 版）》这本书我本身是不太想推荐给大家了。但是，看在它的豆瓣评分这么高的份上，还是拿出来说说吧！</p>\n<p>这也是一本非常经典的书籍，第二版对第一版进行了重写。</p>\n<p>我简单地浏览过全书的内容，感觉内容总体比较虚，对于大部分程序员的作用其实不大。如果你想要切实地提高自己的代码质量，《Clean Code》和 《编写可读代码的艺术》我觉得都要比《代码大全》这本书更好。</p>\n<p>不过，最重要的还是要多看优秀的源码，多学习优秀的代码实践。</p>\n<p><strong><a href=\"https://book.douban.com/subject/10797189/\" target=\"_blank\" rel=\"noopener noreferrer\">《编写可读代码的艺术》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210314175536443.png\" alt=\"\"></p>\n<p>《编写可读代码的艺术》这本书要表达的意思和《Clean Code》很像，你看它俩的目录就可以看出来了。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309230739963.png\" alt=\"\"></p>\n<p>在我看来，如果你看过 《Clean Code》 的话，就不需要再看这本书了。当然，如果你有时间和精力，也可以快速过一遍。</p>\n<p>另外，我这里还要推荐一个叫做 <strong><a href=\"https://github.com/biezhi/write-readable-code\" target=\"_blank\" rel=\"noopener noreferrer\">write-readable-code</a></strong> 的仓库。这个仓库的作者免费分享了一系列基于《编写可读代码的艺术》这本书的视频。这一系列视频会基于 Java 语言来教你如何优化咱们的代码。</p>\n<p>在实践中学习的效果肯定会更好！推荐小伙伴们都抓紧学起来啊！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309230743258.png\" alt=\"\"></p>\n<h2>程序员职业素养</h2>\n<p><strong><a href=\"https://book.douban.com/subject/26919457/\" target=\"_blank\" rel=\"noopener noreferrer\">《The Clean Coder》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/20210314191210273.png\" alt=\"\"></p>\n<p>《 The Clean Coder》是 Bob 大叔的又一经典著作。</p>\n<p>《Clean Code》和《 The Clean Coder》这两本书在国内都翻译为 《代码整洁之道》，我觉得这个翻译还是不够优雅的。</p>\n<p>另外，两者的内容差异也很大。《Clean Code》这本书从代码层面来讲解如何提高自己的代码质量。而《The Clean Coder》这本书则是从如何成为一名更优秀的开发者的角度来写的，比如这书会教你如何在自己的领域更专业、如何说不、如何做时间管理、如何处理压力等等。</p>\n<h2>架构整洁之道</h2>\n<p><strong><a href=\"https://book.douban.com/subject/30333919/\" target=\"_blank\" rel=\"noopener noreferrer\">《架构整洁之道》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books/2021031412342771.png\" alt=\"\"></p>\n<p>你没看错，《架构整洁之道》这本书又是 Bob 大叔的经典之作。</p>\n<p>这本书我强烈安利！认真读完之后，我保证你对编程本质、编程语言的本质、软件设计、架构设计可以有进一步的认识。</p>\n<p>国内的很多书籍和专栏都借鉴了《架构整洁之道》 这本书。毫不夸张地说，《架构整洁之道》就是架构领域最经典的书籍之一。</p>\n<p>正如作者说的那样：</p>\n<blockquote>\n<p>如果深入研究计算机编程的本质，我们就会发现这 50 年来，计算机编程基本没有什么大的变化。编程语言稍微进步了一点，工具的质量大大提升了，但是计算机程序的基本构造没有什么变化。</p>\n<p>虽然我们有了新的编程语言、新的编程框架、新的编程范式，但是软件架构的规则仍然和 1946 年阿兰·图灵写下第一行机器代码的时候一样。</p>\n<p>这本书就是为了把这些永恒不变的软件架构规则展现出来。</p>\n</blockquote>\n<h2>项目管理</h2>\n<p><strong><a href=\"https://book.douban.com/subject/1102259/\" target=\"_blank\" rel=\"noopener noreferrer\">《人月神话》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/2021/03/8ece325c-4491-4ffd-9d3d-77e95159ec40.png\" alt=\"\"></p>\n<p>这本书主要描述了软件开发的基本定律：<strong>一个需要 10 天才能干完的活，不可能让 10 个人在 1 天干完！</strong></p>\n<p>看书名的第一眼，感觉不像是技术类的书籍。但是，就是这样一个看似和编程不沾边的书名，却成了编程领域长久相传的经典。</p>\n<p><strong>这本书对于现代软件尤其是复杂软件的开发的规范化有深刻的意义。</strong></p>\n<p><strong><a href=\"https://book.douban.com/subject/5344973/\" target=\"_blank\" rel=\"noopener noreferrer\">《领域驱动设计:软件核心复杂性应对之道》</a></strong></p>\n<p><img src=\"https://oss.javaguide.cn/2021/03/7e80418d-20b1-4066-b9af-cfe434b1bf1a.png\" alt=\"\"></p>\n<p>这本领域驱动设计方面的经典之作一直被各种推荐，但是我还来及读。</p>\n<h2>其他</h2>\n<ul>\n<li><a href=\"https://book.douban.com/subject/24536403/\" target=\"_blank\" rel=\"noopener noreferrer\">《代码的未来》</a>：这本书的作者是 Ruby 之父松本行弘，算是一本年代比较久远的书籍（13 年出版），不过，还是非常值得一读。这本书的内容主要介绍是编程/编程语言的本质。我个人还是比较喜欢松本行弘的文字风格，并且，你看他的文章也确实能够有所收获。</li>\n<li><a href=\"https://book.douban.com/subject/1488876/\" target=\"_blank\" rel=\"noopener noreferrer\">《深入浅出设计模式》</a>：比较有趣的风格，适合设计模式入门。</li>\n<li><a href=\"https://book.douban.com/subject/30443578/\" target=\"_blank\" rel=\"noopener noreferrer\">《软件架构设计:大型网站技术架构与业务架构融合之道》</a>：内容非常全面。适合面试前突击一些比较重要的理论知识，也适合拿来扩充/完善自己的技术广度。</li>\n<li><a href=\"https://book.douban.com/subject/33425123/\" target=\"_blank\" rel=\"noopener noreferrer\">《微服务架构设计模式》</a>：这本书是世界十大软件架构师之一、微服务架构先驱 Chris Richardson 亲笔撰写，豆瓣评分 9.6。示例代码使用 Java 语言和 Spring 框架。帮助你设计、实现、测试和部署基于微服务的应用程序。</li>\n</ul>\n<p>最后再推荐两个相关的文档：</p>\n<ul>\n<li><strong>阿里巴巴 Java 开发手册</strong>：<a href=\"https://github.com/alibaba/p3c\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/alibaba/p3c</a></li>\n<li><strong>Google Java 编程风格指南</strong>：<a href=\"http://www.hawstein.com/posts/google-java-style.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.hawstein.com/posts/google-java-style.html</a></li>\n</ul>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/books/20210328174841577.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机书籍"
      ]
    },
    {
      "title": "数据库基础知识总结",
      "url": "https://javaguide.cn/database/basis.html",
      "id": "https://javaguide.cn/database/basis.html",
      "summary": "这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 数据库知识基础，这部分内容一定要理解记忆。虽然这部分内容只是理论知识，但是非常重要，这是后面学习 MySQ...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>数据库知识基础，这部分内容一定要理解记忆。虽然这部分内容只是理论知识，但是非常重要，这是后面学习 MySQL 数据库的基础。PS: 这部分内容由于涉及太多概念性内容，所以参考了维基百科和百度百科相应的介绍。</p>\n<h2>什么是数据库, 数据库管理系统, 数据库系统, 数据库管理员?</h2>\n<ul>\n<li><strong>数据库</strong> : 数据库(DataBase 简称 DB)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。</li>\n<li><strong>数据库管理系统</strong> : 数据库管理系统(Database Management System 简称 DBMS)是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。</li>\n<li><strong>数据库系统</strong> : 数据库系统(Data Base System，简称 DBS)通常由软件、数据库和数据管理员(DBA)组成。</li>\n<li><strong>数据库管理员</strong> : 数据库管理员(Database Administrator, 简称 DBA)负责全面管理和控制数据库系统。</li>\n</ul>\n<h2>什么是元组, 码, 候选码, 主码, 外码, 主属性, 非主属性？</h2>\n<ul>\n<li><strong>元组</strong>：元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。 在二维表里，元组也称为行。</li>\n<li><strong>码</strong>：码就是能唯一标识实体的属性，对应表中的列。</li>\n<li><strong>候选码</strong>：若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何、子集都不能再标识，则称该属性组为候选码。例如：在学生实体中，“学号”是能唯一的区分学生实体的，同时又假设“姓名”、“班级”的属性组合足以区分学生实体，那么{学号}和{姓名，班级}都是候选码。</li>\n<li><strong>主码</strong> : 主码也叫主键。主码是从候选码中选出来的。 一个实体集中只能有一个主码，但可以有多个候选码。</li>\n<li><strong>外码</strong> : 外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码。</li>\n<li><strong>主属性</strong>：候选码中出现过的属性称为主属性。比如关系 工人（工号，身份证号，姓名，性别，部门）. 显然工号和身份证号都能够唯一标示这个关系，所以都是候选码。工号、身份证号这两个属性就是主属性。如果主码是一个属性组，那么属性组中的属性都是主属性。</li>\n<li><strong>非主属性：</strong> 不包含在任何一个候选码中的属性称为非主属性。比如在关系——学生（学号，姓名，年龄，性别，班级）中，主码是“学号”，那么其他的“姓名”、“年龄”、“性别”、“班级”就都可以称为非主属性。</li>\n</ul>\n<h2>什么是 ER 图？</h2>\n<p>我们做一个项目的时候一定要试着画 ER 图来捋清数据库设计，这个也是面试官问你项目的时候经常会被问到的。</p>\n<p><strong>ER 图</strong> 全称是 Entity Relationship Diagram（实体联系图），提供了表示实体类型、属性和联系的方法。</p>\n<p>ER 图由下面 3 个要素组成：</p>\n<ul>\n<li><strong>实体</strong>：通常是现实世界的业务对象，当然使用一些逻辑对象也可以。比如对于一个校园管理系统，会涉及学生、教师、课程、班级等等实体。在 ER 图中，实体使用矩形框表示。</li>\n<li><strong>属性</strong>：即某个实体拥有的属性，属性用来描述组成实体的要素，对于产品设计来说可以理解为字段。在 ER 图中，属性使用椭圆形表示。</li>\n<li><strong>联系</strong>：即实体与实体之间的关系，在 ER 图中用菱形表示，这个关系不仅有业务关联关系，还能通过数字表示实体之间的数量对照关系。例如，一个班级会有多个学生就是一种实体间的联系。</li>\n</ul>\n<p>下图是一个学生选课的 ER 图，每个学生可以选若干门课程，同一门课程也可以被若干人选择，所以它们之间的关系是多对多（M: N）。另外，还有其他两种实体之间的关系是：1 对 1（1:1）、1 对多（1: N）。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/c745c87f6eda9a439e0eea52012c7f4a.png\" alt=\"学生与课程之间联系的E-R图\"></p>\n<h2>数据库范式了解吗?</h2>\n<p>数据库范式有 3 种：</p>\n<ul>\n<li>1NF(第一范式)：属性不可再分。</li>\n<li>2NF(第二范式)：1NF 的基础之上，消除了非主属性对于码的部分函数依赖。</li>\n<li>3NF(第三范式)：3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。</li>\n</ul>\n<h3>1NF(第一范式)</h3>\n<p>属性（对应于表中的字段）不能再被分割，也就是这个字段只能是一个值，不能再分为多个其他的字段了。<strong>1NF 是所有关系型数据库的最基本要求</strong> ，也就是说关系型数据库中创建的表一定满足第一范式。</p>\n<h3>2NF(第二范式)</h3>\n<p>2NF 在 1NF 的基础之上，消除了非主属性对于码的部分函数依赖。如下图所示，展示了第一范式到第二范式的过渡。第二范式在第一范式的基础上增加了一个列，这个列称为主键，非主属性都依赖于主键。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/bd1d31be3779342427fc9e462bf7f05c.png\" alt=\"第二范式\"></p>\n<p>一些重要的概念：</p>\n<ul>\n<li><strong>函数依赖（functional dependency）</strong>：若在一张表中，在属性（或属性组）X 的值确定的情况下，必定能确定属性 Y 的值，那么就可以说 Y 函数依赖于 X，写作 X → Y。</li>\n<li><strong>部分函数依赖（partial functional dependency）</strong>：如果 X→Y，并且存在 X 的一个真子集 X0，使得 X0→Y，则称 Y 对 X 部分函数依赖。比如学生基本信息表 R 中（学号，身份证号，姓名）当然学号属性取值是唯一的，在 R 关系中，（学号，身份证号）-&gt;（姓名），（学号）-&gt;（姓名），（身份证号）-&gt;（姓名）；所以姓名部分函数依赖于（学号，身份证号）；</li>\n<li><strong>完全函数依赖(Full functional dependency)</strong>：在一个关系中，若某个非主属性数据项依赖于全部关键字称之为完全函数依赖。比如学生基本信息表 R（学号，班级，姓名）假设不同的班级学号有相同的，班级内学号不能相同，在 R 关系中，（学号，班级）-&gt;（姓名），但是（学号）-&gt;(姓名)不成立，（班级）-&gt;(姓名)不成立，所以姓名完全函数依赖与（学号，班级）；</li>\n<li><strong>传递函数依赖</strong>：在关系模式 R(U)中，设 X，Y，Z 是 U 的不同的属性子集，如果 X 确定 Y、Y 确定 Z，且有 X 不包含 Y，Y 不确定 X，（X∪Y）∩Z=空集合，则称 Z 传递函数依赖(transitive functional dependency) 于 X。传递函数依赖会导致数据冗余和异常。传递函数依赖的 Y 和 Z 子集往往同属于某一个事物，因此可将其合并放到一个表中。比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖。</li>\n</ul>\n<h3>3NF(第三范式)</h3>\n<p>3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。符合 3NF 要求的数据库设计，<strong>基本</strong>上解决了数据冗余过大，插入异常，修改异常，删除异常的问题。比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖，所以该表的设计，不符合 3NF 的要求。</p>\n<h2>主键和外键有什么区别?</h2>\n<ul>\n<li><strong>主键(主码)</strong>：主键用于唯一标识一个元组，不能有重复，不允许为空。一个表只能有一个主键。</li>\n<li><strong>外键(外码)</strong>：外键用来和其他表建立联系用，外键是另一表的主键，外键是可以有重复的，可以是空值。一个表可以有多个外键。</li>\n</ul>\n<h2>为什么不推荐使用外键与级联？</h2>\n<p>对于外键和级联，阿里巴巴开发手册这样说到：</p>\n<blockquote>\n<p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</p>\n<p>说明: 以学生和成绩的关系为例，学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度</p>\n</blockquote>\n<p>为什么不要用外键呢？大部分人可能会这样回答：</p>\n<ol>\n<li><strong>增加了复杂性：</strong> a. 每次做 DELETE 或者 UPDATE 都必须考虑外键约束，会导致开发的时候很痛苦, 测试数据极为不方便; b. 外键的主从关系是定的，假如哪天需求有变化，数据库中的这个字段根本不需要和其他表有关联的话就会增加很多麻烦。</li>\n<li><strong>增加了额外工作</strong>：数据库需要增加维护外键的工作，比如当我们做一些涉及外键字段的增，删，更新操作之后，需要触发相关操作去检查，保证数据的的一致性和正确性，这样会不得不消耗数据库资源。如果在应用层面去维护的话，可以减小数据库压力；</li>\n<li><strong>对分库分表不友好</strong>：因为分库分表下外键是无法生效的。</li>\n<li>……</li>\n</ol>\n<p>我个人觉得上面这种回答不是特别的全面，只是说了外键存在的一个常见的问题。实际上，我们知道外键也是有很多好处的，比如：</p>\n<ol>\n<li>保证了数据库数据的一致性和完整性；</li>\n<li>级联操作方便，减轻了程序代码量；</li>\n<li>……</li>\n</ol>\n<p>所以说，不要一股脑的就抛弃了外键这个概念，既然它存在就有它存在的道理，如果系统不涉及分库分表，并发量不是很高的情况还是可以考虑使用外键的。</p>\n<h2>什么是存储过程?</h2>\n<p>我们可以把存储过程看成是一些 SQL 语句的集合，中间加了点逻辑控制语句。存储过程在业务比较复杂的时候是非常实用的，比如很多时候我们完成一个操作可能需要写一大串 SQL 语句，这时候我们就可以写有一个存储过程，这样也方便了我们下一次的调用。存储过程一旦调试完成通过后就能稳定运行，另外，使用存储过程比单纯 SQL 语句执行要快，因为存储过程是预编译过的。</p>\n<p>存储过程在互联网公司应用不多，因为存储过程难以调试和扩展，而且没有移植性，还会消耗数据库资源。</p>\n<p>阿里巴巴 Java 开发手册里要求禁止使用存储过程。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/0fa082bc4d4f919065767476a41b2156.png\" alt=\"阿里巴巴Java开发手册: 禁止存储过程\"></p>\n<h2>drop、delete 与 truncate 区别？</h2>\n<h3>用法不同</h3>\n<ul>\n<li><code>drop</code>(丢弃数据): <code>drop table 表名</code> ，直接将表都删除掉，在删除表的时候使用。</li>\n<li><code>truncate</code> (清空数据) : <code>truncate table 表名</code> ，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。</li>\n<li><code>delete</code>（删除数据） : <code>delete from 表名 where 列名=值</code>，删除某一行的数据，如果不加 <code>where</code> 子句和<code>truncate table 表名</code>作用类似。</li>\n</ul>\n<p><code>truncate</code> 和不带 <code>where</code>子句的 <code>delete</code>、以及 <code>drop</code> 都会删除表内的数据，但是 <strong><code>truncate</code> 和 <code>delete</code> 只删除数据不删除表的结构(定义)，执行 <code>drop</code> 语句，此表的结构也会删除，也就是执行<code>drop</code> 之后对应的表不复存在。</strong></p>\n<h3>属于不同的数据库语言</h3>\n<p><code>truncate</code> 和 <code>drop</code> 属于 DDL(数据定义语言)语句，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。而 <code>delete</code> 语句是 DML (数据库操作语言)语句，这个操作会放到 rollback segment 中，事务提交之后才生效。</p>\n<p><strong>DML 语句和 DDL 语句区别：</strong></p>\n<ul>\n<li>DML 是数据库操作语言（Data Manipulation Language）的缩写，是指对数据库中表记录的操作，主要包括表记录的插入、更新、删除和查询，是开发人员日常使用最频繁的操作。</li>\n<li>DDL （Data Definition Language）是数据定义语言的缩写，简单来说，就是对数据库内部的对象进行创建、删除、修改的操作语言。它和 DML 语言的最大区别是 DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，更不会涉及到其他对象。DDL 语句更多的被数据库管理员（DBA）所使用，一般的开发人员很少使用。</li>\n</ul>\n<p>另外，由于<code>select</code>不会对表进行破坏，所以有的地方也会把<code>select</code>单独区分开叫做数据库查询语言 DQL（Data Query Language）。</p>\n<h3>执行速度不同</h3>\n<p>一般来说：<code>drop</code> &gt; <code>truncate</code> &gt; <code>delete</code>（这个我没有实际测试过）。</p>\n<ul>\n<li><code>delete</code>命令执行的时候会产生数据库的<code>binlog</code>日志，而日志记录是需要消耗时间的，但是也有个好处方便数据回滚恢复。</li>\n<li><code>truncate</code>命令执行的时候不会产生数据库日志，因此比<code>delete</code>要快。除此之外，还会把表的自增值重置和索引恢复到初始大小等。</li>\n<li><code>drop</code>命令会把表占用的空间全部释放掉。</li>\n</ul>\n<p>Tips：你应该更多地关注在使用场景上，而不是执行效率。</p>\n<h2>数据库设计通常分为哪几步?</h2>\n<ol>\n<li><strong>需求分析</strong> : 分析用户的需求，包括数据、功能和性能需求。</li>\n<li><strong>概念结构设计</strong> : 主要采用 E-R 模型进行设计，包括画 E-R 图。</li>\n<li><strong>逻辑结构设计</strong> : 通过将 E-R 图转换成表，实现从 E-R 模型到关系模型的转换。</li>\n<li><strong>物理结构设计</strong> : 主要是为所设计的数据库选择合适的存储结构和存取路径。</li>\n<li><strong>数据库实施</strong> : 包括编程、测试和试运行</li>\n<li><strong>数据库的运行和维护</strong> : 系统的运行与数据库的日常维护。</li>\n</ol>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/rl529014/article/details/48391465\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/rl529014/article/details/48391465</a></li>\n<li><a href=\"https://www.zhihu.com/question/24696366/answer/29189700\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.zhihu.com/question/24696366/answer/29189700</a></li>\n<li><a href=\"https://blog.csdn.net/bieleyang/article/details/77149954\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/bieleyang/article/details/77149954</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/csdn/c745c87f6eda9a439e0eea52012c7f4a.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "数据库"
      ]
    },
    {
      "title": "字符集详解",
      "url": "https://javaguide.cn/database/character-set.html",
      "id": "https://javaguide.cn/database/character-set.html",
      "summary": "MySQL 字符编码集中有两套 UTF-8 编码实现：utf8 和 utf8mb4。 如果使用 utf8 的话，存储 emoji 符号和一些比较复杂的汉字、繁体字就会出错。 为什么会这样呢？这篇文章可以从源头给你解答。 字符集是什么？ 字符是各种文字和符号的统称，包括各个国家文字、标点符号、表情、数字等等。 字符集 就是一系列字符的集合。字符集的种类较...",
      "content_html": "<p>MySQL 字符编码集中有两套 UTF-8 编码实现：<strong><code>utf8</code></strong> 和 <strong><code>utf8mb4</code></strong>。</p>\n<p>如果使用 <strong><code>utf8</code></strong> 的话，存储 emoji 符号和一些比较复杂的汉字、繁体字就会出错。</p>\n<p>为什么会这样呢？这篇文章可以从源头给你解答。</p>\n<h2>字符集是什么？</h2>\n<p>字符是各种文字和符号的统称，包括各个国家文字、标点符号、表情、数字等等。 <strong>字符集</strong> 就是一系列字符的集合。字符集的种类较多，每个字符集可以表示的字符范围通常不同，就比如说有些字符集是无法表示汉字的。</p>\n<p><strong>计算机只能存储二进制的数据，那英文、汉字、表情等字符应该如何存储呢？</strong></p>\n<p>我们要将这些字符和二进制的数据一一对应起来，比如说字符“a”对应“01100001”，反之，“01100001”对应 “a”。我们将字符对应二进制数据的过程称为\"<strong>字符编码</strong>\"，反之，二进制数据解析成字符的过程称为“<strong>字符解码</strong>”。</p>\n<h2>字符编码是什么？</h2>\n<p>字符编码是一种将字符集中的字符与计算机中的二进制数据相互转换的方法，可以看作是一种映射规则。也就是说，字符编码的目的是为了让计算机能够存储和传输各种文字信息。</p>\n<p>每种字符集都有自己的字符编码规则，常用的字符集编码规则有 ASCII 编码、 GB2312 编码、GBK 编码、GB18030 编码、Big5 编码、UTF-8 编码、UTF-16 编码等。</p>\n<h2>有哪些常见的字符集？</h2>\n<p>常见的字符集有：ASCII、GB2312、GB18030、GBK、Unicode……。</p>\n<p>不同的字符集的主要区别在于：</p>\n<ul>\n<li>可以表示的字符范围</li>\n<li>编码方式</li>\n</ul>\n<h3>ASCII</h3>\n<p><strong>ASCII</strong> (<strong>A</strong>merican <strong>S</strong>tandard <strong>C</strong>ode for <strong>I</strong>nformation <strong>I</strong>nterchange，美国信息交换标准代码) 是一套主要用于现代美国英语的字符集（这也是 ASCII 字符集的局限性所在）。</p>\n<p><strong>为什么 ASCII 字符集没有考虑到中文等其他字符呢？</strong> 因为计算机是美国人发明的，当时，计算机的发展还处于比较雏形的时代，还未在其他国家大规模使用。因此，美国发布 ASCII 字符集的时候没有考虑兼容其他国家的语言。</p>\n<p>ASCII 字符集至今为止共定义了 128 个字符，其中有 33 个控制字符（比如回车、删除）无法显示。</p>\n<p>一个 ASCII 码长度是一个字节也就是 8 个 bit，比如“a”对应的 ASCII 码是“01100001”。不过，最高位是 0 仅仅作为校验位，其余 7 位使用 0 和 1 进行组合，所以，ASCII 字符集可以定义 128（2^7）个字符。</p>\n<p>由于，ASCII 码可以表示的字符实在是太少了。后来，人们对其进行了扩展得到了 <strong>ASCII 扩展字符集</strong> 。ASCII 扩展字符集使用 8 位（bits）表示一个字符，所以，ASCII 扩展字符集可以定义 256（2^8）个字符。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/c1c6375d08ca268690cef2b13591a5b4.png\" alt=\"ASCII字符编码\"></p>\n<h3>GB2312</h3>\n<p>我们上面说了，ASCII 字符集是一种现代美国英语适用的字符集。因此，很多国家都捣鼓了一个适合自己国家语言的字符集。</p>\n<p>GB2312 字符集是一种对汉字比较友好的字符集，共收录 6700 多个汉字，基本涵盖了绝大部分常用汉字。不过，GB2312 字符集不支持绝大部分的生僻字和繁体字。</p>\n<p>对于英语字符，GB2312 编码和 ASCII 码是相同的，1 字节编码即可。对于非英字符，需要 2 字节编码。</p>\n<h3>GBK</h3>\n<p>GBK 字符集可以看作是 GB2312 字符集的扩展，兼容 GB2312 字符集，共收录了 20000 多个汉字。</p>\n<p>GBK 中 K 是汉语拼音 Kuo Zhan（扩展）中的“Kuo”的首字母。</p>\n<h3>GB18030</h3>\n<p>GB18030 完全兼容 GB2312 和 GBK 字符集，纳入中国国内少数民族的文字，且收录了日韩汉字，是目前为止最全面的汉字字符集，共收录汉字 70000 多个。</p>\n<h3>BIG5</h3>\n<p>BIG5 主要针对的是繁体中文，收录了 13000 多个汉字。</p>\n<h3>Unicode &amp; UTF-8</h3>\n<p>为了更加适合本国语言，诞生了很多种字符集。</p>\n<p>我们上面也说了不同的字符集可以表示的字符范围以及编码规则存在差异。这就导致了一个非常严重的问题：<strong>使用错误的编码方式查看一个包含字符的文件就会产生乱码现象。</strong></p>\n<p>就比如说你使用 UTF-8 编码方式打开 GB2312 编码格式的文件就会出现乱码。示例：“牛”这个汉字 GB2312 编码后的十六进制数值为 “C5A3”，而 “C5A3” 用 UTF-8 解码之后得到的却是 “ţ”。</p>\n<p>你可以通过这个网站在线进行编码和解码：<a href=\"https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan</a></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/836c49b117ee4408871b0020b74c991d.png\" alt=\"\"></p>\n<p>这样我们就搞懂了乱码的本质：<strong>编码和解码时用了不同或者不兼容的字符集</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/a8808cbabeea49caa3af27d314fa3c02-1.jpg\" alt=\"\"></p>\n<p>为了解决这个问题，人们就想：“如果我们能够有一种字符集将世界上所有的字符都纳入其中就好了！”。</p>\n<p>然后，<strong>Unicode</strong> 带着这个使命诞生了。</p>\n<p>Unicode 字符集中包含了世界上几乎所有已知的字符。不过，Unicode 字符集并没有规定如何存储这些字符（也就是如何使用二进制数据表示这些字符）。</p>\n<p>然后，就有了 <strong>UTF-8</strong>（<strong>8</strong>-bit <strong>U</strong>nicode <strong>T</strong>ransformation <strong>F</strong>ormat）。类似的还有 UTF-16、 UTF-32。</p>\n<p>UTF-8 使用 1 到 4 个字节为每个字符编码， UTF-16 使用 2 或 4 个字节为每个字符编码，UTF-32 固定位 4 个字节为每个字符编码。</p>\n<p>UTF-8 可以根据不同的符号自动选择编码的长短，像英文字符只需要 1 个字节就够了，这一点 ASCII 字符集一样 。因此，对于英语字符，UTF-8 编码和 ASCII 码是相同的。</p>\n<p>UTF-32 的规则最简单，不过缺陷也比较明显，对于英文字母这类字符消耗的空间是 UTF-8 的 4 倍之多。</p>\n<p><strong>UTF-8</strong> 是目前使用最广的一种字符编码。</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/1280px-Utf8webgrowth.svg.png\" alt=\"\"></p>\n<h2>MySQL 字符集</h2>\n<p>MySQL 支持很多种字符集的方式，比如 GB2312、GBK、BIG5、多种 Unicode 字符集（UTF-8 编码、UTF-16 编码、UCS-2 编码、UTF-32 编码等等）。</p>\n<h3>查看支持的字符集</h3>\n<p>你可以通过 <code>SHOW CHARSET</code> 命令来查看，支持 like 和 where 子句。</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/image-20211008164229671.png\" alt=\"\"></p>\n<h3>默认字符集</h3>\n<p>在 MySQL5.7 中，默认字符集是 <code>latin1</code> ；在 MySQL8.0 中，默认字符集是 <code>utf8mb4</code></p>\n<h3>字符集的层次级别</h3>\n<p>MySQL 中的字符集有以下的层次级别：</p>\n<ul>\n<li><code>server</code>（MySQL 实例级别）</li>\n<li><code>database</code>（库级别）</li>\n<li><code>table</code>（表级别）</li>\n<li><code>column</code>（字段级别）</li>\n</ul>\n<p>它们的优先级可以简单的认为是从上往下依次增大，也即 <code>column</code> 的优先级会大于 <code>table</code> 等其余层次的。如指定 MySQL 实例级别字符集是<code>utf8mb4</code>，指定某个表字符集是<code>latin1</code>，那么这个表的所有字段如果不指定的话，编码就是<code>latin1</code>。</p>\n<h4>server</h4>\n<p>不同版本的 MySQL 其 <code>server</code> 级别的字符集默认值不同，在 MySQL5.7 中，其默认值是 <code>latin1</code> ；在 MySQL8.0 中，其默认值是 <code>utf8mb4</code> 。</p>\n<p>当然也可以通过在启动 <code>mysqld</code> 时指定 <code>--character-set-server</code> 来设置 <code>server</code> 级别的字符集。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mysqld</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mysqld</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --character-set-server=utf8mb4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mysqld</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --character-set-server=utf8mb4</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">  --collation-server=utf8mb4_0900_ai_ci</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>或者如果你是通过源码构建的方式启动的 MySQL，你可以在 <code>cmake</code> 命令中指定选项：</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">cmake</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -DDEFAULT_CHARSET=latin1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">cmake</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -DDEFAULT_CHARSET=latin1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">  -DDEFAULT_COLLATION=latin1_german1_ci</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此外，你也可以在运行时改变 <code>character_set_server</code> 的值，从而达到修改 <code>server</code> 级别的字符集的目的。</p>\n<p><code>server</code> 级别的字符集是 MySQL 服务器的全局设置，它不仅会作为创建或修改数据库时的默认字符集（如果没有指定其他字符集），还会影响到客户端和服务器之间的连接字符集，具体可以查看 <a href=\"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-charsets.html\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL Connector/J 8.0 - 6.7 Using Character Sets and Unicode</a>。</p>\n<h4>database</h4>\n<p><code>database</code> 级别的字符集是我们在创建数据库和修改数据库时指定的：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> DATABASE</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> db_name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    [[DEFAULT]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> charset_name]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    [[DEFAULT]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> COLLATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> collation_name]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">ALTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> DATABASE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> db_name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    [[DEFAULT]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> charset_name]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    [[DEFAULT]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> COLLATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> collation_name]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如前面所说，如果在执行上述语句时未指定字符集，那么 MySQL 将会使用 <code>server</code> 级别的字符集。</p>\n<p>可以通过下面的方式查看某个数据库的字符集：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">USE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> db_name;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @@character_set_database, @@collation_database;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> INFORMATION_SCHEMA</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">SCHEMATA</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> WHERE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> SCHEMA_NAME </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'db_name'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>table</h4>\n<p><code>table</code> 级别的字符集是在创建表和修改表时指定的：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TABLE</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> tbl_name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (column_list)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    [[DEFAULT]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> charset_name]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    [COLLATE collation_name]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">ALTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TABLE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> tbl_name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    [[DEFAULT]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> charset_name]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    [COLLATE collation_name]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果在创建表和修改表时未指定字符集，那么将会使用 <code>database</code> 级别的字符集。</p>\n<h4>column</h4>\n<p><code>column</code> 级别的字符集同样是在创建表和修改表时指定的，只不过它是定义在列中。下面是个例子：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TABLE</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> t1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    col1 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">VARCHAR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> latin1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      COLLATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> latin1_german1_ci</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果未指定列级别的字符集，那么将会使用表级别的字符集。</p>\n<h3>连接字符集</h3>\n<p>前面说到了字符集的层次级别，它们是和存储相关的。而连接字符集涉及的是和 MySQL 服务器的通信。</p>\n<p>连接字符集与下面这几个变量息息相关：</p>\n<ul>\n<li><code>character_set_client</code> ：描述了客户端发送给服务器的 SQL 语句使用的是什么字符集。</li>\n<li><code>character_set_connection</code> ：描述了服务器接收到 SQL 语句时使用什么字符集进行翻译。</li>\n<li><code>character_set_results</code> ：描述了服务器返回给客户端的结果使用的是什么字符集。</li>\n</ul>\n<p>它们的值可以通过下面的 SQL 语句查询：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> performance_schema</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">session_variables</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">WHERE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> VARIABLE_NAME </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">IN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'character_set_client'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'character_set_connection'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'character_set_results'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'collation_connection'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">ORDER BY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> VARIABLE_NAME;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">SHOW </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SESSION</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> VARIABLES </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">LIKE</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'character\\_set\\_%'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>如果要想修改前面提到的几个变量的值，有以下方式：</p>\n<p>1、修改配置文件</p>\n<div class=\"language-properties line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"properties\" data-title=\"properties\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">[mysql]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 只针对MySQL客户端程序</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">default-character-set</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">utf8mb4</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、使用 SQL 语句</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">set</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> names utf8mb4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># 或者一个个进行修改</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> character_set_client </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> utf8mb4;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> character_set_results </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> utf8mb4;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> collation_connection </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> utf8mb4;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>JDBC 对连接字符集的影响</h3>\n<p>不知道你们有没有碰到过存储 emoji 表情正常，但是使用类似 Navicat 之类的软件的进行查询的时候，发现 emoji 表情变成了问号的情况。这个问题很有可能就是 JDBC 驱动引起的。</p>\n<p>根据前面的内容，我们知道连接字符集也是会影响我们存储的数据的，而 JDBC 驱动会影响连接字符集。</p>\n<p><code>mysql-connector-java</code> （JDBC 驱动）主要通过这几个属性影响连接字符集：</p>\n<ul>\n<li><code>characterEncoding</code></li>\n<li><code>characterSetResults</code></li>\n</ul>\n<p>以 <code>DataGrip 2023.1.2</code> 来说，在它配置数据源的高级对话框中，可以看到 <code>characterSetResults</code> 的默认值是 <code>utf8</code> ，在使用 <code>mysql-connector-java 8.0.25</code> 时，连接字符集最后会被设置成 <code>utf8mb3</code> 。那么这种情况下 emoji 表情就会被显示为问号，并且当前版本驱动还不支持把 <code>characterSetResults</code> 设置为 <code>utf8mb4</code> ，不过换成 <code>mysql-connector-java driver 8.0.29</code> 却是允许的。</p>\n<p>具体可以看一下 StackOverflow 的 <a href=\"https://stackoverflow.com/questions/54815419/datagrip-mysql-stores-emojis-correctly-but-displays-them-as\" target=\"_blank\" rel=\"noopener noreferrer\">DataGrip MySQL stores emojis correctly but displays them as?</a>这个回答。</p>\n<h3>UTF-8 使用</h3>\n<p>通常情况下，我们建议使用 UTF-8 作为默认的字符编码方式。</p>\n<p>不过，这里有一个小坑。</p>\n<p>MySQL 字符编码集中有两套 UTF-8 编码实现：</p>\n<ul>\n<li><strong><code>utf8</code></strong>：<code>utf8</code>编码只支持<code>1-3</code>个字节 。 在 <code>utf8</code> 编码中，中文是占 3 个字节，其他数字、英文、符号占一个字节。但 emoji 符号占 4 个字节，一些较复杂的文字、繁体字也是 4 个字节。</li>\n<li><strong><code>utf8mb4</code></strong>：UTF-8 的完整实现，正版！最多支持使用 4 个字节表示字符，因此，可以用来存储 emoji 符号。</li>\n</ul>\n<p><strong>为什么有两套 UTF-8 编码实现呢？</strong> 原因如下：</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/image-20211008164542347.png\" alt=\"\"></p>\n<p>因此，如果你需要存储<code>emoji</code>类型的数据或者一些比较复杂的文字、繁体字到 MySQL 数据库的话，数据库的编码一定要指定为<code>utf8mb4</code> 而不是<code>utf8</code> ，要不然存储的时候就会报错了。</p>\n<p>演示一下吧！（环境：MySQL 5.7+）</p>\n<p>建表语句如下，我们指定数据库 CHARSET 为 <code>utf8</code> 。</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TABLE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> `</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">user</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">` (</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `id`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> varchar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">66</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> utf8mb3 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `name`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> varchar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">33</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> utf8mb3 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `phone`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> varchar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">33</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> utf8mb3 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">DEFAULT</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `password`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> varchar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CHARACTER</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> utf8mb3 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">DEFAULT</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> NULL</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) ENGINE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">InnoDB </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">DEFAULT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> CHARSET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">utf8;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当我们执行下面的 insert 语句插入数据到数据库时，果然报错！</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">INSERT INTO</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `user`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`id`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`name`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`phone`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`password`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">VALUES</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'A00003'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'guide哥😘😘😘'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'181631312312'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'123456'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>报错信息如下：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>Incorrect string value: '\\xF0\\x9F\\x98\\x98\\xF0\\x9F...' for column 'name' at row 1</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h2>参考</h2>\n<ul>\n<li>字符集和字符编码（Charset &amp; Encoding）：<a href=\"https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html</a></li>\n<li>十分钟搞清字符集和字符编码：<a href=\"http://cenalulu.github.io/linux/character-encoding/\" target=\"_blank\" rel=\"noopener noreferrer\">http://cenalulu.github.io/linux/character-encoding/</a></li>\n<li>Unicode-维基百科：<a href=\"https://zh.wikipedia.org/wiki/Unicode\" target=\"_blank\" rel=\"noopener noreferrer\">https://zh.wikipedia.org/wiki/Unicode</a></li>\n<li>GB2312-维基百科：<a href=\"https://zh.wikipedia.org/wiki/GB_2312\" target=\"_blank\" rel=\"noopener noreferrer\">https://zh.wikipedia.org/wiki/GB_2312</a></li>\n<li>UTF-8-维基百科：<a href=\"https://zh.wikipedia.org/wiki/UTF-8\" target=\"_blank\" rel=\"noopener noreferrer\">https://zh.wikipedia.org/wiki/UTF-8</a></li>\n<li>GB18030-维基百科: <a href=\"https://zh.wikipedia.org/wiki/GB_18030\" target=\"_blank\" rel=\"noopener noreferrer\">https://zh.wikipedia.org/wiki/GB_18030</a></li>\n<li>MySQL8 文档：<a href=\"https://dev.mysql.com/doc/refman/8.0/en/charset.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://dev.mysql.com/doc/refman/8.0/en/charset.html</a></li>\n<li>MySQL5.7 文档：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/charset.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://dev.mysql.com/doc/refman/5.7/en/charset.html</a></li>\n<li>MySQL Connector/J 文档：<a href=\"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-charsets.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-charsets.html</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/csdn/c1c6375d08ca268690cef2b13591a5b4.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "数据库"
      ]
    },
    {
      "title": "NoSQL基础知识总结",
      "url": "https://javaguide.cn/database/nosql.html",
      "id": "https://javaguide.cn/database/nosql.html",
      "summary": "NoSQL 是什么？ NoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。 一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。NoSQL 数据库可以存储关...",
      "content_html": "<h2>NoSQL 是什么？</h2>\n<p>NoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。</p>\n<p>一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。NoSQL 数据库可以存储关系型数据—它们与关系型数据库的存储方式不同。</p>\n<p>NoSQL 数据库代表：HBase、Cassandra、MongoDB、Redis。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/database/mongodb/sql-nosql-tushi.png\" alt=\"\"></p>\n<h2>SQL 和 NoSQL 有什么区别？</h2>\n<p>|              | SQL 数据库                                                                 | NoSQL 数据库                                                                                                                            |<br>\n| :</p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/database/mongodb/sql-nosql-tushi.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "数据库"
      ]
    },
    {
      "title": "API网关基础知识总结",
      "url": "https://javaguide.cn/distributed-system/api-gateway.html",
      "id": "https://javaguide.cn/distributed-system/api-gateway.html",
      "summary": "什么是网关？ 微服务背景下，一个系统被拆分为多个服务，但是像安全认证，流量控制，日志，监控等功能是每个服务都需要的，没有网关的话，我们就需要在每个服务中单独实现，这使得我们做了很多重复的事情并且没有一个全局的视图来统一管理这些功能。 网关示意图 一般情况下，网关可以为我们提供请求转发、安全认证（身份/权限认证）、流量控制、负载均衡、降级熔断、日志、监控...",
      "content_html": "<h2>什么是网关？</h2>\n<p>微服务背景下，一个系统被拆分为多个服务，但是像安全认证，流量控制，日志，监控等功能是每个服务都需要的，没有网关的话，我们就需要在每个服务中单独实现，这使得我们做了很多重复的事情并且没有一个全局的视图来统一管理这些功能。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway-overview.png\" alt=\"网关示意图\"></p>\n<p>一般情况下，网关可以为我们提供请求转发、安全认证（身份/权限认证）、流量控制、负载均衡、降级熔断、日志、监控、参数校验、协议转换等功能。</p>\n<p>上面介绍了这么多功能，实际上，网关主要做了两件事情：<strong>请求转发</strong> + <strong>请求过滤</strong>。</p>\n<p>由于引入网关之后，会多一步网络转发，因此性能会有一点影响（几乎可以忽略不计，尤其是内网访问的情况下）。 另外，我们需要保障网关服务的高可用，避免单点风险。</p>\n<p>如下图所示，网关服务外层通过 Nginx（其他负载均衡设备/软件也行） 进⾏负载转发以达到⾼可⽤。Nginx 在部署的时候，尽量也要考虑高可用，避免单点风险。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/server-load-balancing.png\" alt=\"基于 Nginx 的服务端负载均衡\"></p>\n<h2>网关能提供哪些功能？</h2>\n<p>绝大部分网关可以提供下面这些功能（有一些功能需要借助其他框架或者中间件）：</p>\n<ul>\n<li><strong>请求转发</strong>：将请求转发到目标微服务。</li>\n<li><strong>负载均衡</strong>：根据各个微服务实例的负载情况或者具体的负载均衡策略配置对请求实现动态的负载均衡。</li>\n<li><strong>安全认证</strong>：对用户请求进行身份验证并仅允许可信客户端访问 API，并且还能够使用类似 RBAC 等方式来授权。</li>\n<li><strong>参数校验</strong>：支持参数映射与校验逻辑。</li>\n<li><strong>日志记录</strong>：记录所有请求的行为日志供后续使用。</li>\n<li><strong>监控告警</strong>：从业务指标、机器指标、JVM 指标等方面进行监控并提供配套的告警机制。</li>\n<li><strong>流量控制</strong>：对请求的流量进行控制，也就是限制某一时刻内的请求数。</li>\n<li><strong>熔断降级</strong>：实时监控请求的统计信息，达到配置的失败阈值后，自动熔断，返回默认值。</li>\n<li><strong>响应缓存</strong>：当用户请求获取的是一些静态的或更新不频繁的数据时，一段时间内多次请求获取到的数据很可能是一样的。对于这种情况可以将响应缓存起来。这样用户请求可以直接在网关层得到响应数据，无需再去访问业务服务，减轻业务服务的负担。</li>\n<li><strong>响应聚合</strong>：某些情况下用户请求要获取的响应内容可能会来自于多个业务服务。网关作为业务服务的调用方，可以把多个服务的响应整合起来，再一并返回给用户。</li>\n<li><strong>灰度发布</strong>：将请求动态分流到不同的服务版本（最基本的一种灰度发布）。</li>\n<li><strong>异常处理</strong>：对于业务服务返回的异常响应，可以在网关层在返回给用户之前做转换处理。这样可以把一些业务侧返回的异常细节隐藏，转换成用户友好的错误提示返回。</li>\n<li><strong>API 文档：</strong> 如果计划将 API 暴露给组织以外的开发人员，那么必须考虑使用 API 文档，例如 Swagger 或 OpenAPI。</li>\n<li><strong>协议转换</strong>：通过协议转换整合后台基于 REST、AMQP、Dubbo 等不同风格和实现技术的微服务，面向 Web Mobile、开放平台等特定客户端提供统一服务。</li>\n<li><strong>证书管理</strong>：将 SSL 证书部署到 API 网关，由一个统一的入口管理接口，降低了证书更换时的复杂度。</li>\n</ul>\n<p>下图来源于<a href=\"https://mp.weixin.qq.com/s/iITqdIiHi3XGKq6u6FRVdg\" target=\"_blank\" rel=\"noopener noreferrer\">百亿规模 API 网关服务 Shepherd 的设计与实现 - 美团技术团队 - 2021</a>这篇文章。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/api-gateway/up-35e102c633bbe8e0dea1e075ea3fee5dcfb.png\" alt=\"\"></p>\n<h2>有哪些常见的网关系统？</h2>\n<h3>Netflix Zuul</h3>\n<p>Zuul 是 Netflix 开发的一款提供动态路由、监控、弹性、安全的网关服务，基于 Java 技术栈开发，可以和 Eureka、Ribbon、Hystrix 等组件配合使用。</p>\n<p>Zuul 核心架构如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/api-gateway/zuul-core-architecture.webp\" alt=\"Zuul 核心架构\"></p>\n<p>Zuul 主要通过过滤器（类似于 AOP）来过滤请求，从而实现网关必备的各种功能。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/zuul-request-lifecycle.webp\" alt=\"Zuul 请求声明周期\"></p>\n<p>我们可以自定义过滤器来处理请求，并且，Zuul 生态本身就有很多现成的过滤器供我们使用。就比如限流可以直接用国外朋友写的 <a href=\"https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit\" target=\"_blank\" rel=\"noopener noreferrer\">spring-cloud-zuul-ratelimit</a> (这里只是举例说明，一般是配合 hystrix 来做限流)：</p>\n<div class=\"language-xml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;org.springframework.cloud&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;spring-cloud-starter-netflix-zuul&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;com.marcosbarbero.cloud&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;spring-cloud-zuul-ratelimit&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;2.2.0.RELEASE&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://netflixtechblog.com/announcing-zuul-edge-service-in-the-cloud-ab3af5be08ee\" target=\"_blank\" rel=\"noopener noreferrer\">Zuul 1.x</a> 基于同步 IO，性能较差。<a href=\"https://netflixtechblog.com/open-sourcing-zuul-2-82ea476cb2b3\" target=\"_blank\" rel=\"noopener noreferrer\">Zuul 2.x</a> 基于 Netty 实现了异步 IO，性能得到了大幅改进。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/api-gateway/zuul2-core-architecture.png\" alt=\"Zuul2 架构\"></p>\n<ul>\n<li>GitHub 地址： <a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Netflix/zuul</a></li>\n<li>官方 Wiki： <a href=\"https://github.com/Netflix/zuul/wiki\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Netflix/zuul/wiki</a></li>\n</ul>\n<h3>Spring Cloud Gateway</h3>\n<p>SpringCloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 <strong>Zuul</strong>。准确点来说，应该是 Zuul 1.x。SpringCloud Gateway 起步要比 Zuul 2.x 更早。</p>\n<p>为了提升网关的性能，SpringCloud Gateway 基于 Spring WebFlux 。Spring WebFlux 使用 Reactor 库来实现响应式编程模型，底层基于 Netty 实现同步非阻塞的 I/O。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway- demo.png\" alt=\"\"></p>\n<p>Spring Cloud Gateway 不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，限流。</p>\n<p>Spring Cloud Gateway 和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。不过，目前更加推荐使用 Spring Cloud Gateway 而非 Zuul，Spring Cloud 生态对其支持更加友好。</p>\n<ul>\n<li>Github 地址： <a href=\"https://github.com/spring-cloud/spring-cloud-gateway\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/spring-cloud/spring-cloud-gateway</a></li>\n<li>官网： <a href=\"https://spring.io/projects/spring-cloud-gateway\" target=\"_blank\" rel=\"noopener noreferrer\">https://spring.io/projects/spring-cloud-gateway</a></li>\n</ul>\n<h3>OpenResty</h3>\n<p>根据官方介绍：</p>\n<blockquote>\n<p>OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gatewaynginx-lua-openresty.png\" alt=\"OpenResty 和 Nginx 以及 Lua 的关系\"></p>\n<p>OpenResty 基于 Nginx，主要还是看中了其优秀的高并发能力。不过，由于 Nginx 采用 C 语言开发，二次开发门槛较高。如果想在 Nginx 上实现一些自定义的逻辑或功能，就需要编写 C 语言的模块，并重新编译 Nginx。</p>\n<p>为了解决这个问题，OpenResty 通过实现 <code>ngx_lua</code> 和 <code>stream_lua</code> 等 Nginx 模块，把 Lua/LuaJIT 完美地整合进了 Nginx，从而让我们能够在 Nginx 内部里嵌入 Lua 脚本，使得可以通过简单的 Lua 语言来扩展网关的功能，比如实现自定义的路由规则、过滤器、缓存策略等。</p>\n<blockquote>\n<p>Lua 是一种非常快速的动态脚本语言，它的运行速度接近于 C 语言。LuaJIT 是 Lua 的一个即时编译器，它可以显著提高 Lua 代码的执行效率。LuaJIT 将一些常用的 Lua 函数和工具库预编译并缓存，这样在下次调用时就可以直接使用缓存的字节码，从而大大加快了执行速度。</p>\n</blockquote>\n<p>关于 OpenResty 的入门以及网关安全实战推荐阅读这篇文章：<a href=\"https://mp.weixin.qq.com/s/3HglZs06W95vF3tSa3KrXw\" target=\"_blank\" rel=\"noopener noreferrer\">每个后端都应该了解的 OpenResty 入门以及网关安全实战</a>。</p>\n<ul>\n<li>Github 地址： <a href=\"https://github.com/openresty/openresty\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/openresty/openresty</a></li>\n<li>官网地址： <a href=\"https://openresty.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://openresty.org/</a></li>\n</ul>\n<h3>Kong</h3>\n<p>Kong 是一款基于 <a href=\"https://github.com/openresty/\" target=\"_blank\" rel=\"noopener noreferrer\">OpenResty</a> （Nginx + Lua）的高性能、云原生、可扩展、生态丰富的网关系统，主要由 3 个组件组成：</p>\n<ul>\n<li>Kong Server：基于 Nginx 的服务器，用来接收 API 请求。</li>\n<li>Apache Cassandra/PostgreSQL：用来存储操作数据。</li>\n<li>Kong Dashboard：官方推荐 UI 管理工具，当然，也可以使用 RESTful 方式 管理 Admin api。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/kong-way.webp\" alt=\"\"></p>\n<p>由于默认使用 Apache Cassandra/PostgreSQL 存储数据，Kong 的整个架构比较臃肿，并且会带来高可用的问题。</p>\n<p>Kong 提供了插件机制来扩展其功能，插件在 API 请求响应循环的生命周期中被执行。比如在服务上启用 Zipkin 插件：</p>\n<div class=\"language-shell line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"shell\" data-title=\"shell\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> curl</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -X</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> POST</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> http://kong:8001/services/{service}/plugins</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">    --data</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"name=zipkin\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">    --data</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"config.http_endpoint=http://your.zipkin.collector:9411/api/v2/spans\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">    --data</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"config.sample_ratio=0.001\"</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Kong 本身就是一个 Lua 应用程序，并且是在 Openresty 的基础之上做了一层封装的应用。归根结底就是利用 Lua 嵌入 Nginx 的方式，赋予了 Nginx 可编程的能力，这样以插件的形式在 Nginx 这一层能够做到无限想象的事情。例如限流、安全访问策略、路由、负载均衡等等。编写一个 Kong 插件，就是按照 Kong 插件编写规范，写一个自己自定义的 Lua 脚本，然后加载到 Kong 中，最后引用即可。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/kong-gateway-overview.png\" alt=\"\"></p>\n<p>除了 Lua，Kong 还可以基于 Go 、JavaScript、Python 等语言开发插件，得益于对应的 PDK（插件开发工具包）。</p>\n<p>关于 Kong 插件的详细介绍，推荐阅读官方文档：<a href=\"https://docs.konghq.com/gateway/latest/kong-plugins/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.konghq.com/gateway/latest/kong-plugins/</a>，写的比较详细。</p>\n<ul>\n<li>Github 地址： <a href=\"https://github.com/Kong/kong\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Kong/kong</a></li>\n<li>官网地址： <a href=\"https://konghq.com/kong\" target=\"_blank\" rel=\"noopener noreferrer\">https://konghq.com/kong</a></li>\n</ul>\n<h3>APISIX</h3>\n<p>APISIX 是一款基于 OpenResty 和 etcd 的高性能、云原生、可扩展的网关系统。</p>\n<blockquote>\n<p>etcd 是使用 Go 语言开发的一个开源的、高可用的分布式 key-value 存储系统，使用 Raft 协议做分布式共识。</p>\n</blockquote>\n<p>与传统 API 网关相比，APISIX 具有动态路由和插件热加载，特别适合微服务系统下的 API 管理。并且，APISIX 与 SkyWalking（分布式链路追踪系统）、Zipkin（分布式链路追踪系统）、Prometheus（监控系统） 等 DevOps 生态工具对接都十分方便。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/api-gateway/apisix-architecture.png\" alt=\"APISIX 架构图\"></p>\n<p>作为 Nginx 和 Kong 的替代项目，APISIX 目前已经是 Apache 顶级开源项目，并且是最快毕业的国产开源项目。国内目前已经有很多知名企业（比如金山、有赞、爱奇艺、腾讯、贝壳）使用 APISIX 处理核心的业务流量。</p>\n<p>根据官网介绍：“APISIX 已经生产可用，功能、性能、架构全面优于 Kong”。</p>\n<p>APISIX 同样支持定制化的插件开发。开发者除了能够使用 Lua 语言开发插件，还能通过下面两种方式开发来避开 Lua 语言的学习成本：</p>\n<ul>\n<li>通过 Plugin Runner 来支持更多的主流编程语言（比如 Java、Python、Go 等等）。通过这样的方式，可以让后端工程师通过本地 RPC 通信，使用熟悉的编程语言开发 APISIX 的插件。这样做的好处是减少了开发成本，提高了开发效率，但是在性能上会有一些损失。</li>\n<li>使用 Wasm（WebAssembly） 开发插件。Wasm 被嵌入到了 APISIX 中，用户可以使用 Wasm 去编译成 Wasm 的字节码在 APISIX 中运行。</li>\n</ul>\n<blockquote>\n<p>Wasm 是基于堆栈的虚拟机的二进制指令格式，一种低级汇编语言，旨在非常接近已编译的机器代码，并且非常接近本机性能。Wasm 最初是为浏览器构建的，但是随着技术的成熟，在服务器端看到了越来越多的用例。</p>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/api-gateway/up-a240d3b113cde647f5850f4c7cc55d4ff5c.png\" alt=\"\"></p>\n<ul>\n<li>Github 地址：<a href=\"https://github.com/apache/apisix\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/apache/apisix</a></li>\n<li>官网地址： <a href=\"https://apisix.apache.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">https://apisix.apache.org/zh/</a></li>\n</ul>\n<p>相关阅读：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/j8ggPGEHFu3x5ekJZyeZnA\" target=\"_blank\" rel=\"noopener noreferrer\">为什么说 Apache APISIX 是最好的 API 网关？</a></li>\n<li><a href=\"https://www.apiseven.com/zh/blog/why-we-need-Apache-APISIX\" target=\"_blank\" rel=\"noopener noreferrer\">有了 NGINX 和 Kong，为什么还需要 Apache APISIX</a></li>\n<li><a href=\"https://www.apiseven.com/zh/blog\" target=\"_blank\" rel=\"noopener noreferrer\">APISIX 技术博客</a></li>\n<li><a href=\"https://www.apiseven.com/zh/usercases\" target=\"_blank\" rel=\"noopener noreferrer\">APISIX 用户案例</a>（推荐）</li>\n</ul>\n<h3>Shenyu</h3>\n<p>Shenyu 是一款基于 WebFlux 的可扩展、高性能、响应式网关，Apache 顶级开源项目。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/api-gateway/shenyu-architecture.png\" alt=\"Shenyu 架构\"></p>\n<p>Shenyu 通过插件扩展功能，插件是 ShenYu 的灵魂，并且插件也是可扩展和热插拔的。不同的插件实现不同的功能。Shenyu 自带了诸如限流、熔断、转发、重写、重定向、和路由监控等插件。</p>\n<ul>\n<li>Github 地址： <a href=\"https://github.com/apache/incubator-shenyu\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/apache/incubator-shenyu</a></li>\n<li>官网地址： <a href=\"https://shenyu.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://shenyu.apache.org/</a></li>\n</ul>\n<h2>如何选择？</h2>\n<p>上面介绍的几个常见的网关系统，最常用的是 Spring Cloud Gateway、Kong、APISIX 这三个。</p>\n<p>对于公司业务以 Java 为主要开发语言的情况下，Spring Cloud Gateway 通常是个不错的选择，其优点有：简单易用、成熟稳定、与 Spring Cloud 生态系统兼容、Spring 社区成熟等等。不过，Spring Cloud Gateway 也有一些局限性和不足之处， 一般还需要结合其他网关一起使用比如 OpenResty。并且，其性能相比较于 Kong 和 APISIX，还是差一些。如果对性能要求比较高的话，Spring Cloud Gateway 不是一个好的选择。</p>\n<p>Kong 和 APISIX 功能更丰富，性能更强大，技术架构更贴合云原生。Kong 是开源 API 网关的鼻祖，生态丰富，用户群体庞大。APISIX 属于后来者，更优秀一些，根据 APISIX 官网介绍：“APISIX 已经生产可用，功能、性能、架构全面优于 Kong”。下面简单对比一下二者：</p>\n<ul>\n<li>APISIX 基于 etcd 来做配置中心，不存在单点问题，云原生友好；而 Kong 基于 Apache Cassandra/PostgreSQL ，存在单点风险，需要额外的基础设施保障做高可用。</li>\n<li>APISIX 支持热更新，并且实现了毫秒级别的热更新响应；而 Kong 不支持热更新。</li>\n<li>APISIX 的性能要优于 Kong 。</li>\n<li>APISIX 支持的插件更多，功能更丰富。</li>\n</ul>\n<h2>参考</h2>\n<ul>\n<li>Kong 插件开发教程[通俗易懂]：<a href=\"https://cloud.tencent.com/developer/article/2104299\" target=\"_blank\" rel=\"noopener noreferrer\">https://cloud.tencent.com/developer/article/2104299</a></li>\n<li>API 网关 Kong 实战：<a href=\"https://xie.infoq.cn/article/10e4dab2de0bdb6f2c3c93da6\" target=\"_blank\" rel=\"noopener noreferrer\">https://xie.infoq.cn/article/10e4dab2de0bdb6f2c3c93da6</a></li>\n<li>Spring Cloud Gateway 原理介绍和应用：<a href=\"https://blog.fintopia.tech/60e27b0e2078082a378ec5ed/\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.fintopia.tech/60e27b0e2078082a378ec5ed/</a></li>\n<li>微服务为什么要用到 API 网关？：<a href=\"https://apisix.apache.org/zh/blog/2023/03/08/why-do-microservices-need-an-api-gateway/\" target=\"_blank\" rel=\"noopener noreferrer\">https://apisix.apache.org/zh/blog/2023/03/08/why-do-microservices-need-an-api-gateway/</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway-overview.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "分布式"
      ]
    },
    {
      "title": "分布式配置中心常见问题总结(付费)",
      "url": "https://javaguide.cn/distributed-system/distributed-configuration-center.html",
      "id": "https://javaguide.cn/distributed-system/distributed-configuration-center.html",
      "summary": "分布式配置中心 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。 （点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 JavaGuide 的补充完善，两者可以配合使用。 《Java 面试指北》内容概览 为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯...",
      "content_html": "<p><strong>分布式配置中心</strong> 相关的面试题为我的<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/distributed-system.png\" alt=\"\"></p>\n<p><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href=\"https://javaguide.cn/#/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的补充完善，两者可以配合使用。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a> 。</p>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> ，干货多多！</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/javamianshizhibei/distributed-system.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "分布式"
      ]
    },
    {
      "title": "分布式ID设计指南",
      "url": "https://javaguide.cn/distributed-system/distributed-id-design.html",
      "id": "https://javaguide.cn/distributed-system/distributed-id-design.html",
      "summary": "提示 看到百度 Geek 说的一篇结合具体场景聊分布式 ID 设计的文章，感觉挺不错的。于是，我将这篇文章的部分内容整理到了这里。原文传送门：分布式 ID 生成服务的技术原理和项目实战 。 网上绝大多数的分布式 ID 生成服务，一般着重于技术原理剖析，很少见到根据具体的业务场景去选型 ID 生成服务的文章。 本文结合一些使用场景，进一步探讨业务场景中对...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>看到百度 Geek 说的一篇结合具体场景聊分布式 ID 设计的文章，感觉挺不错的。于是，我将这篇文章的部分内容整理到了这里。原文传送门：<a href=\"https://mp.weixin.qq.com/s/bFDLb6U6EgI-DvCdLTq_QA\" target=\"_blank\" rel=\"noopener noreferrer\">分布式 ID 生成服务的技术原理和项目实战</a> 。</p>\n</div>\n<p>网上绝大多数的分布式 ID 生成服务，一般着重于技术原理剖析，很少见到根据具体的业务场景去选型 ID 生成服务的文章。</p>\n<p>本文结合一些使用场景，进一步探讨业务场景中对 ID 有哪些具体的要求。</p>\n<h2>场景一：订单系统</h2>\n<p>我们在商场买东西一码付二维码，下单生成的订单号，使用到的优惠券码，联合商品兑换券码，这些是在网上购物经常使用到的单号，那么为什么有些单号那么长，有些只有几位数？有些单号一看就知道年月日的信息，有些却看不出任何意义？下面展开分析下订单系统中不同场景的 id 服务的具体实现。</p>\n<h3>1、一码付</h3>\n<p>我们常见的一码付，指的是一个二维码可以使用支付宝或者微信进行扫码支付。</p>\n<p>二维码的本质是一个字符串。聚合码的本质就是一个链接地址。用户使用支付宝微信直接扫一个码付钱，不用担心拿支付宝扫了微信的收款码或者用微信扫了支付宝的收款码，这极大减少了用户扫码支付的时间。</p>\n<p>实现原理是当客户用 APP 扫码后，网站后台就会判断客户的扫码环境。（微信、支付宝、QQ 钱包、京东支付、云闪付等）。</p>\n<p>判断扫码环境的原理就是根据打开链接浏览器的 HTTP header。任何浏览器打开 http 链接时，请求的 header 都会有 User-Agent(UA、用户代理)信息。</p>\n<p>UA 是一个特殊字符串头，服务器依次可以识别出客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等很多信息。</p>\n<p>各渠道对应支付产品的名称不一样，一定要仔细看各支付产品的 API 介绍。</p>\n<ol>\n<li>微信支付：JSAPI 支付支付</li>\n<li>支付宝：手机网站支付</li>\n<li>QQ 钱包：公众号支付</li>\n</ol>\n<p>其本质均为在 APP 内置浏览器中实现 HTML5 支付。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-pay-one-card.png\" alt=\"文库会员支付示例\"></p>\n<p>文库的研发同学在这个思路上，做了优化迭代。动态生成一码付的二维码预先绑定用户所选的商品信息和价格，根据用户所选的商品动态更新。这样不仅支持一码多平台调起支付，而且不用用户选择商品输入金额，即可完成订单支付的功能，很丝滑。用户在真正扫码后，服务端才通过前端获取用户 UID，结合二维码绑定的商品信息，真正的生成订单，发送支付信息到第三方（qq、微信、支付宝），第三方生成支付订单推给用户设备，从而调起支付。</p>\n<p>区别于固定的一码付，在文库的应用中，使用到了动态二维码，二维码本质是一个短网址，ID 服务提供短网址的唯一标志参数。唯一的短网址映射的 ID 绑定了商品的订单信息，技术和业务的深度结合，缩短了支付流程，提升用户的支付体验。</p>\n<h3>2、订单号</h3>\n<p>订单号在实际的业务过程中作为一个订单的唯一标识码存在，一般实现以下业务场景：</p>\n<ol>\n<li>用户订单遇到问题，需要找客服进行协助；</li>\n<li>对订单进行操作，如线下收款，订单核销；</li>\n<li>下单，改单，成单，退单，售后等系统内部的订单流程处理和跟进。</li>\n</ol>\n<p>很多时候搜索订单相关信息的时候都是以订单 ID 作为唯一标识符，这是由于订单号的生成规则的唯一性决定的。从技术角度看，除了 ID 服务必要的特性之外，在订单号的设计上需要体现几个特性：</p>\n<p><strong>（1）信息安全</strong></p>\n<p>编号不能透露公司的运营情况，比如日销、公司流水号等信息，以及商业信息和用户手机号，身份证等隐私信息。并且不能有明显的整体规律（可以有局部规律），任意修改一个字符就能查询到另一个订单信息，这也是不允许的。</p>\n<p>类比于我们高考时候的考生编号的生成规则，一定不能是连号的，否则只需要根据顺序往下查询就能搜索到别的考生的成绩，这是绝对不可允许。</p>\n<p><strong>（2）部分可读</strong></p>\n<p>位数要便于操作，因此要求订单号的位数适中，且局部有规律。这样可以方便在订单异常，或者退货时客服查询。</p>\n<p>过长的订单号或易读性差的订单号会导致客服输入困难且易错率较高，影响用户体验的售后体验。因此在实际的业务场景中，订单号的设计通常都会适当携带一些允许公开的对使用场景有帮助的信息，如时间，星期，类型等等，这个主要根据所涉及的编号对应的使用场景来。</p>\n<p>而且像时间、星期这些自增长的属于作为订单号的设计的一部分元素，有助于解决业务累积而导致的订单号重复的问题。</p>\n<p><strong>（3）查询效率</strong></p>\n<p>常见的电商平台订单号大多是纯数字组成，兼具可读性的同时，int 类型相对 varchar 类型的查询效率更高，对在线业务更加友好。</p>\n<h3>3、优惠券和兑换券</h3>\n<p>优惠券、兑换券是运营推广最常用的促销工具之一，合理使用它们，可以让买家得到实惠，商家提升商品销量。常见场景有：</p>\n<ol>\n<li>在文库购买【文库 VIP+QQ 音乐年卡】联合商品，支付成功后会得到 QQ 音乐年卡的兑换码，可以去 QQ 音乐 App 兑换音乐会员年卡；</li>\n<li>疫情期间，部分地方政府发放的消费券；</li>\n<li>瓶装饮料经常会出现输入优惠编码兑换奖品。</li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-coupon.png\" alt=\"优惠编码兑换奖品\"></p>\n<p>从技术角度看，有些场景适合 ID 即时生成，比如电商平台购物领取的优惠券，只需要在用户领取时分配优惠券信息即可。有些线上线下结合的场景，比如疫情优惠券，瓶盖开奖，京东卡，超市卡这种，则需要预先生成，预先生成的券码具备以下特性：</p>\n<p>1.预先生成，在活动正式开始前提供出来进行活动预热；</p>\n<p>2.优惠券体量大，以万为单位，通常在 10 万级别以上；</p>\n<p>3.不可破解、仿制券码；</p>\n<p>4.支持用后核销；</p>\n<p>5.优惠券、兑换券属于广撒网的策略，所以利用率低，也就不适合使用数据库进行存储 <strong>（占空间，有效的数据又少）</strong>。</p>\n<p>设计思路上，需要设计一种有效的兑换码生成策略，支持预先生成，支持校验，内容简洁，生成的兑换码都具有唯一性，那么这种策略就是一种特殊的编解码策略，按照约定的编解码规则支撑上述需求。</p>\n<p>既然是一种编解码规则，那么需要约定编码空间(也就是用户看到的组成兑换码的字符)，编码空间由字符 a-z,A-Z,数字 0-9 组成，为了增强兑换码的可识别度，剔除大写字母 O 以及 I,可用字符如下所示，共 60 个字符：</p>\n<p>abcdefghijklmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXZY0123456789</p>\n<p>之前说过，兑换码要求尽可能简洁，那么设计时就需要考虑兑换码的字符数，假设上限为 12 位，而字符空间有 60 位，那么可以表示的空间范围为 60^12=130606940160000000000000(也就是可以 12 位的兑换码可以生成天量,应该够运营同学挥霍了)，转换成 2 进制：</p>\n<p>1001000100000000101110011001101101110011000000000000000000000(61 位)</p>\n<p><strong>兑换码组成成分分析</strong></p>\n<p>兑换码可以预先生成，并且不需要额外的存储空间保存这些信息，每一个优惠方案都有独立的一组兑换码(指运营同学组织的每一场运营活动都有不同的兑换码,不能混合使用, 例如双 11 兑换码不能使用在双 12 活动上)，每个兑换码有自己的编号，防止重复，为了保证兑换码的有效性，对兑换码的数据需要进行校验，当前兑换码的数据组成如下所示：</p>\n<p>优惠方案 ID + 兑换码序列号 i + 校验码</p>\n<p><strong>编码方案</strong></p>\n<ol>\n<li>兑换码序列号 i，代表当前兑换码是当前活动中第 i 个兑换码，兑换码序列号的空间范围决定了优惠活动可以发行的兑换码数目，当前采用 30 位 bit 位表示，可表示范围：1073741824（10 亿个券码）。</li>\n<li>优惠方案 ID, 代表当前优惠方案的 ID 号，优惠方案的空间范围决定了可以组织的优惠活动次数，当前采用 15 位表示，可以表示范围：32768（考虑到运营活动的频率，以及 ID 的初始值 10000，15 位足够，365 天每天有运营活动，可以使用 54 年）。</li>\n<li>校验码，校验兑换码是否有效，主要为了快捷的校验兑换码信息的是否正确，其次可以起到填充数据的目的，增强数据的散列性，使用 13 位表示校验位，其中分为两部分，前 6 位和后 7 位。</li>\n</ol>\n<p>深耕业务还会有区分通用券和单独券的情况，分别具备以下特点，技术实现需要因地制宜地思考。</p>\n<ol>\n<li>通用券：多个玩家都可以输入兑换，然后有总量限制，期限限制。</li>\n<li>单独券：运营同学可以在后台设置兑换码的奖励物品、期限、个数，然后由后台生成兑换码的列表，兑换之后核销。</li>\n</ol>\n<h2>场景二：Tracing</h2>\n<h3>1、日志跟踪</h3>\n<p>在分布式服务架构下，一个 Web 请求从网关流入，有可能会调用多个服务对请求进行处理，拿到最终结果。这个过程中每个服务之间的通信又是单独的网络请求，无论请求经过的哪个服务出了故障或者处理过慢都会对前端造成影响。</p>\n<p>处理一个 Web 请求要调用的多个服务，为了能更方便的查询哪个环节的服务出现了问题，现在常用的解决方案是为整个系统引入分布式链路跟踪。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-tracing.png\" alt=\"在分布式链路跟踪\"></p>\n<p>在分布式链路跟踪中有两个重要的概念：跟踪（trace）和 跨度（ span)。trace 是请求在分布式系统中的整个链路视图，span 则代表整个链路中不同服务内部的视图，span 组合在一起就是整个 trace 的视图。</p>\n<p>在整个请求的调用链中，请求会一直携带 traceid 往下游服务传递，每个服务内部也会生成自己的 spanid 用于生成自己的内部调用视图，并和 traceid 一起传递给下游服务。</p>\n<h3>2、TraceId 生成规则</h3>\n<p>这种场景下，生成的 ID 除了要求唯一之外，还要求生成的效率高、吞吐量大。traceid 需要具备接入层的服务器实例自主生成的能力，如果每个 trace 中的 ID 都需要请求公共的 ID 服务生成，纯纯的浪费网络带宽资源。且会阻塞用户请求向下游传递，响应耗时上升，增加了没必要的风险。所以需要服务器实例最好可以自行计算 tracid，spanid，避免依赖外部服务。</p>\n<p>产生规则：服务器 IP + ID 产生的时间 + 自增序列 + 当前进程号 ，比如：</p>\n<p>0ad1348f1403169275002100356696</p>\n<p>前 8 位 0ad1348f 即产生 TraceId 的机器的 IP，这是一个十六进制的数字，每两位代表 IP 中的一段，我们把这个数字，按每两位转成 10 进制即可得到常见的 IP 地址表示方式 10.209.52.143，您也可以根据这个规律来查找到请求经过的第一个服务器。</p>\n<p>后面的 13 位 1403169275002 是产生 TraceId 的时间。之后的 4 位 1003 是一个自增的序列，从 1000 涨到 9000，到达 9000 后回到 1000 再开始往上涨。最后的 5 位 56696 是当前的进程 ID，为了防止单机多进程出现 TraceId 冲突的情况，所以在 TraceId 末尾添加了当前的进程 ID。</p>\n<h3>3、SpanId 生成规则</h3>\n<p>span 是层的意思，比如在第一个实例算是第一层， 请求代理或者分流到下一个实例处理，就是第二层，以此类推。通过层，SpanId 代表本次调用在整个调用链路树中的位置。</p>\n<p>假设一个 服务器实例 A 接收了一次用户请求，代表是整个调用的根节点，那么 A 层处理这次请求产生的非服务调用日志记录 spanid 的值都是 0，A 层需要通过 RPC 依次调用 B、C、D 三个服务器实例，那么在 A 的日志中，SpanId 分别是 0.1，0.2 和 0.3，在 B、C、D 中，SpanId 也分别是 0.1，0.2 和 0.3；如果 C 系统在处理请求的时候又调用了 E，F 两个服务器实例，那么 C 系统中对应的 spanid 是 0.2.1 和 0.2.2，E、F 两个系统对应的日志也是 0.2.1 和 0.2.2。</p>\n<p>根据上面的描述可以知道，如果把一次调用中所有的 SpanId 收集起来，可以组成一棵完整的链路树。</p>\n<p><strong>spanid 的生成本质：在跨层传递透传的同时，控制大小版本号的自增来实现的。</strong></p>\n<h2>场景三：短网址</h2>\n<p>短网址主要功能包括网址缩短与还原两大功能。相对于长网址，短网址可以更方便地在电子邮件，社交网络，微博和手机上传播，例如原来很长的网址通过短网址服务即可生成相应的短网址，避免折行或超出字符限制。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-short-url.png\" alt=\"短网址作用\"></p>\n<p>常用的 ID 生成服务比如：MySQL ID 自增、 Redis 键自增、号段模式，生成的 ID 都是一串数字。短网址服务把客户的长网址转换成短网址，</p>\n<p>实际是在 <a href=\"http://dwz.cn\" target=\"_blank\" rel=\"noopener noreferrer\">dwz.cn</a> 域名后面拼接新产生的数字类型 ID，直接用数字 ID，网址长度也有些长，服务可以通过数字 ID 转更高进制的方式压缩长度。这种算法在短网址的技术实现上越来越多了起来，它可以进一步压缩网址长度。转进制的压缩算法在生活中有广泛的应用场景，举例：</p>\n<ul>\n<li>客户的长网址：<a href=\"https://wenku.baidu.com/ndbusiness/browse/wenkuvipcashier?cashier_code=PCoperatebanner\" target=\"_blank\" rel=\"noopener noreferrer\">https://wenku.baidu.com/ndbusiness/browse/wenkuvipcashier?cashier_code=PCoperatebanner</a></li>\n<li>ID 映射的短网址：<a href=\"https://dwz.cn/2047601319t66\" target=\"_blank\" rel=\"noopener noreferrer\">https://dwz.cn/2047601319t66</a> (演示使用，可能无法正确打开)</li>\n<li>转进制后的短网址：<a href=\"https://dwz.cn/2ezwDJ0\" target=\"_blank\" rel=\"noopener noreferrer\">https://dwz.cn/2ezwDJ0</a> (演示使用，可能无法正确打开)</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-pay-one-card.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "分布式"
      ]
    },
    {
      "title": "分布式ID介绍&实现方案总结",
      "url": "https://javaguide.cn/distributed-system/distributed-id.html",
      "id": "https://javaguide.cn/distributed-system/distributed-id.html",
      "summary": "分布式 ID 介绍 什么是 ID？ 日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。 我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应一个地址。 简单来说，ID 就是数据的唯一标识。 什么是分布...",
      "content_html": "<h2>分布式 ID 介绍</h2>\n<h3>什么是 ID？</h3>\n<p>日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。</p>\n<p>我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应一个地址。</p>\n<p>简单来说，<strong>ID 就是数据的唯一标识</strong>。</p>\n<h3>什么是分布式 ID？</h3>\n<p>分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。</p>\n<p>我简单举一个分库分表的例子。</p>\n<p>我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。</p>\n<p>在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。<strong>我们如何为不同的数据节点生成全局唯一主键呢？</strong></p>\n<p>这个时候就需要生成<strong>分布式 ID</strong>了。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png\" alt=\"\"></p>\n<h3>分布式 ID 需要满足哪些要求?</h3>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-requirements.png\" alt=\"\"></p>\n<p>分布式 ID 作为分布式系统中必不可少的一环，很多地方都要用到分布式 ID。</p>\n<p>一个最基本的分布式 ID 需要满足下面这些要求：</p>\n<ul>\n<li><strong>全局唯一</strong>：ID 的全局唯一性肯定是首先要满足的！</li>\n<li><strong>高性能</strong>：分布式 ID 的生成速度要快，对本地资源消耗要小。</li>\n<li><strong>高可用</strong>：生成分布式 ID 的服务要保证可用性无限接近于 100%。</li>\n<li><strong>方便易用</strong>：拿来即用，使用方便，快速接入！</li>\n</ul>\n<p>除了这些之外，一个比较好的分布式 ID 还应保证：</p>\n<ul>\n<li><strong>安全</strong>：ID 中不包含敏感信息。</li>\n<li><strong>有序递增</strong>：如果要把 ID 存放在数据库的话，ID 的有序性可以提升数据库写入速度。并且，很多时候 ，我们还很有可能会直接通过 ID 来进行排序。</li>\n<li><strong>有具体的业务含义</strong>：生成的 ID 如果能有具体的业务含义，可以让定位问题以及开发更透明化（通过 ID 就能确定是哪个业务）。</li>\n<li><strong>独立部署</strong>：也就是分布式系统单独有一个发号器服务，专门用来生成分布式 ID。这样就生成 ID 的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式 ID 的场景比较多的话，独立部署的发号器服务还是很有必要的。</li>\n</ul>\n<h2>分布式 ID 常见解决方案</h2>\n<h3>数据库</h3>\n<h4>数据库主键自增</h4>\n<p>这种方式就比较简单直白了，就是通过关系型数据库的自增主键产生来唯一的 ID。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/the-primary-key-of-the-database-increases-automatically.png\" alt=\"数据库主键自增\"></p>\n<p>以 MySQL 举例，我们通过下面的方式即可。</p>\n<p><strong>1.创建一个数据库表。</strong></p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TABLE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> `</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sequence_id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">` (</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `id`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> bigint</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) unsigned </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> AUTO_INCREMENT,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `stub`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> char</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> DEFAULT</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ''</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  PRIMARY KEY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`id`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  UNIQUE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> KEY</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `stub`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`stub`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) ENGINE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">InnoDB </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">DEFAULT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> CHARSET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">utf8mb4;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>stub</code> 字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给 <code>stub</code> 字段创建了唯一索引，保证其唯一性。</p>\n<p><strong>2.通过 <code>replace into</code> 来插入数据。</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">BEGIN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">REPLACE</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> INTO</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sequence_id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (stub) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">VALUES</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'stub'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">SELECT</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> LAST_INSERT_ID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">COMMIT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>插入数据这里，我们没有使用 <code>insert into</code> 而是使用 <code>replace into</code> 来插入数据，具体步骤是这样的：</p>\n<ul>\n<li>\n<p>第一步：尝试把数据插入到表中。</p>\n</li>\n<li>\n<p>第二步：如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。</p>\n</li>\n</ul>\n<p>这种方式的优缺点也比较明显：</p>\n<ul>\n<li><strong>优点</strong>：实现起来比较简单、ID 有序递增、存储消耗空间小</li>\n<li><strong>缺点</strong>：支持的并发量不大、存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）、每次获取 ID 都要访问一次数据库（增加了对数据库的压力，获取速度也慢）</li>\n</ul>\n<h4>数据库号段模式</h4>\n<p>数据库主键自增这种模式，每次获取 ID 都要访问一次数据库，ID 需求比较大的时候，肯定是不行的。</p>\n<p>如果我们可以批量获取，然后存在在内存里面，需要用到的时候，直接从内存里面拿就舒服了！这也就是我们说的 <strong>基于数据库的号段模式来生成分布式 ID。</strong></p>\n<p>数据库的号段模式也是目前比较主流的一种分布式 ID 生成方式。像滴滴开源的<a href=\"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D\" target=\"_blank\" rel=\"noopener noreferrer\">Tinyid</a> 就是基于这种方式来做的。不过，TinyId 使用了双号段缓存、增加多 db 支持等方式来进一步优化。</p>\n<p>以 MySQL 举例，我们通过下面的方式即可。</p>\n<p><strong>1. 创建一个数据库表。</strong></p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TABLE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> `</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sequence_id_generator</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">` (</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `id`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `current_max_id`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> bigint</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'当前最大id'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `step`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'号段的长度'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `version`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'版本号'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  `biz_type`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'业务类型'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   PRIMARY KEY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`id`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) ENGINE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">InnoDB </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">DEFAULT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> CHARSET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">utf8mb4;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>current_max_id</code> 字段和<code>step</code>字段主要用于获取批量 ID，获取的批量 id 为：<code>current_max_id ~ current_max_id+step</code>。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/database-number-segment-mode.png\" alt=\"数据库号段模式\"></p>\n<p><code>version</code> 字段主要用于解决并发问题（乐观锁）,<code>biz_type</code> 主要用于表示业务类型。</p>\n<p><strong>2. 先插入一行数据。</strong></p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">INSERT INTO</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `sequence_id_generator`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`id`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`current_max_id`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`step`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`version`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`biz_type`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">VALUES</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">101</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>3. 通过 SELECT 获取指定业务下的批量唯一 ID</strong></p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `current_max_id`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`step`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`version`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> FROM</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `sequence_id_generator`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> where</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `biz_type`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 101</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>结果：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>id current_max_id step version biz_type</span></span>\n<span class=\"line\"><span>1 0 100 0 101</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>4. 不够用的话，更新之后重新 SELECT 即可。</strong></p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">UPDATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> sequence_id_generator </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> current_max_id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> WHERE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  AND</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `biz_type`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 101</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `current_max_id`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`step`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`version`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> FROM</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `sequence_id_generator`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> where</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `biz_type`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 101</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>结果：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>id current_max_id step version biz_type</span></span>\n<span class=\"line\"><span>1 100 100 1 101</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>相比于数据库主键自增的方式，<strong>数据库的号段模式对于数据库的访问次数更少，数据库压力更小。</strong></p>\n<p>另外，为了避免单点问题，你可以从使用主从模式来提高可用性。</p>\n<p><strong>数据库号段模式的优缺点:</strong></p>\n<ul>\n<li><strong>优点</strong>：ID 有序递增、存储消耗空间小</li>\n<li><strong>缺点</strong>：存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）</li>\n</ul>\n<h4>NoSQL</h4>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/nosql-distributed-id.png\" alt=\"\"></p>\n<p>一般情况下，NoSQL 方案使用 Redis 多一些。我们通过 Redis 的 <code>incr</code> 命令即可实现对 id 原子顺序递增。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> sequence_id_biz_type</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">OK</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">incr</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> sequence_id_biz_type</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">get</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> sequence_id_biz_type</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">\"2\"</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>为了提高可用性和并发，我们可以使用 Redis Cluster。Redis Cluster 是 Redis 官方提供的 Redis 集群解决方案（3.0+版本）。</p>\n<p>除了 Redis Cluster 之外，你也可以使用开源的 Redis 集群方案<a href=\"https://github.com/CodisLabs/codis\" target=\"_blank\" rel=\"noopener noreferrer\">Codis</a> （大规模集群比如上百个节点的时候比较推荐）。</p>\n<p>除了高可用和并发之外，我们知道 Redis 基于内存，我们需要持久化数据，避免重启机器或者机器故障后数据丢失。Redis 支持两种不同的持久化方式：<strong>快照（snapshotting，RDB）</strong>、<strong>只追加文件（append-only file, AOF）</strong>。 并且，Redis 4.0 开始支持 <strong>RDB 和 AOF 的混合持久化</strong>（默认关闭，可以通过配置项 <code>aof-use-rdb-preamble</code> 开启）。</p>\n<p>关于 Redis 持久化，我这里就不过多介绍。不了解这部分内容的小伙伴，可以看看 <a href=\"https://javaguide.cn/database/redis/redis-persistence.html\" target=\"_blank\" rel=\"noopener noreferrer\">Redis 持久化机制详解</a>这篇文章。</p>\n<p><strong>Redis 方案的优缺点：</strong></p>\n<ul>\n<li><strong>优点</strong>：性能不错并且生成的 ID 是有序递增的</li>\n<li><strong>缺点</strong>：和数据库主键自增方案的缺点类似</li>\n</ul>\n<p>除了 Redis 之外，MongoDB ObjectId 经常也会被拿来当做分布式 ID 的解决方案。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/mongodb9-objectId-distributed-id.png\" alt=\"\"></p>\n<p>MongoDB ObjectId 一共需要 12 个字节存储：</p>\n<ul>\n<li>0~3：时间戳</li>\n<li>3~6：代表机器 ID</li>\n<li>7~8：机器进程 ID</li>\n<li>9~11：自增值</li>\n</ul>\n<p><strong>MongoDB 方案的优缺点：</strong></p>\n<ul>\n<li><strong>优点</strong>：性能不错并且生成的 ID 是有序递增的</li>\n<li><strong>缺点</strong>：需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）、有安全性问题（ID 生成有规律性）</li>\n</ul>\n<h3>算法</h3>\n<h4>UUID</h4>\n<p>UUID 是 Universally Unique Identifier（通用唯一标识符） 的缩写。UUID 包含 32 个 16 进制数字（8-4-4-4-12）。</p>\n<p>JDK 就提供了现成的生成 UUID 的方法，一行代码就行了。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//输出示例：cb4a9ede-fa5e-4585-b9bb-d60bce986eaa</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">UUID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">randomUUID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://tools.ietf.org/html/rfc4122\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 4122</a> 中关于 UUID 的示例是这样的：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/rfc-4122-uuid.png\" alt=\"\"></p>\n<p>我们这里重点关注一下这个 Version(版本)，不同的版本对应的 UUID 的生成规则是不同的。</p>\n<p>8 种不同的 Version(版本)值分别对应的含义（参考<a href=\"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener noreferrer\">维基百科对于 UUID 的介绍</a>）：</p>\n<ul>\n<li><strong>版本 1 (基于时间和节点 ID)</strong> : 基于时间戳（通常是当前时间）和节点 ID（通常为设备的 MAC 地址）生成。当包含 MAC 地址时，可以保证全球唯一性，但也因此存在隐私泄露的风险。</li>\n<li><strong>版本 2 (基于标识符、时间和节点 ID)</strong> : 与版本 1 类似，也基于时间和节点 ID，但额外包含了本地标识符（例如用户 ID 或组 ID）。</li>\n<li><strong>版本 3 (基于命名空间和名称的 MD5 哈希)</strong>：使用 MD5 哈希算法，将命名空间标识符（一个 UUID）和名称字符串组合计算得到。相同的命名空间和名称总是生成相同的 UUID（<strong>确定性生成</strong>）。</li>\n<li><strong>版本 4 (基于随机数)</strong>：几乎完全基于随机数生成，通常使用伪随机数生成器（PRNG）或加密安全随机数生成器（CSPRNG）来生成。 虽然理论上存在碰撞的可能性，但理论上碰撞概率极低（2^122 的可能性），可以认为在实际应用中是唯一的。</li>\n<li><strong>版本 5 (基于命名空间和名称的 SHA-1 哈希)</strong>：类似于版本 3，但使用 SHA-1 哈希算法。</li>\n<li><strong>版本 6 (基于时间戳、计数器和节点 ID)</strong>：改进了版本 1，将时间戳放在最高有效位（Most Significant Bit，MSB），使得 UUID 可以直接按时间排序。</li>\n<li><strong>版本 7 (基于时间戳和随机数据)</strong>：基于 Unix 时间戳和随机数据生成。 由于时间戳位于最高有效位，因此支持按时间排序。并且，不依赖 MAC 地址或节点 ID，避免了隐私问题。</li>\n<li><strong>版本 8 (自定义)</strong>：允许用户根据自己的需求定义 UUID 的生成方式。其结构和内容由用户决定，提供更大的灵活性。</li>\n</ul>\n<p>下面是 Version 1 版本下生成的 UUID 的示例：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/version1-uuid.png\" alt=\"Version 1 版本下生成的 UUID 的示例\"></p>\n<p>JDK 中通过 <code>UUID</code> 的 <code>randomUUID()</code> 方法生成的 UUID 的版本默认为 4。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">UUID</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> uuid </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> UUID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">randomUUID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> version </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> uuid</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>另外，Variant(变体)也有 4 种不同的值，这种值分别对应不同的含义。这里就不介绍了，貌似平时也不怎么需要关注。</p>\n<p>需要用到的时候，去看看维基百科对于 UUID 的 Variant(变体) 相关的介绍即可。</p>\n<p>从上面的介绍中可以看出，UUID 可以保证唯一性，因为其生成规则包括 MAC 地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，计算机基于这些规则生成的 UUID 是肯定不会重复的。</p>\n<p>虽然，UUID 可以做到全局唯一性，但是，我们一般很少会使用它。</p>\n<p>比如使用 UUID 作为 MySQL 数据库主键的时候就非常不合适：</p>\n<ul>\n<li>数据库主键要尽量越短越好，而 UUID 的消耗的存储空间比较大（32 个字符串，128 位）。</li>\n<li>UUID 是无顺序的，InnoDB 引擎下，数据库主键的无序性会严重影响数据库性能。</li>\n</ul>\n<p>最后，我们再简单分析一下 <strong>UUID 的优缺点</strong> （面试的时候可能会被问到的哦！） :</p>\n<ul>\n<li><strong>优点</strong>：生成速度通常比较快、简单易用</li>\n<li><strong>缺点</strong>：存储消耗空间大（32 个字符串，128 位）、 不安全（基于 MAC 地址生成 UUID 的算法会造成 MAC 地址泄露)、无序（非自增）、没有具体业务含义、需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）</li>\n</ul>\n<h4>Snowflake(雪花算法)</h4>\n<p>Snowflake 是 Twitter 开源的分布式 ID 生成算法。Snowflake 由 64 bit 的二进制数字组成，这 64bit 的二进制被分成了几部分，每一部分存储的数据都有特定的含义：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/snowflake-distributed-id-schematic-diagram.png\" alt=\"Snowflake 组成\"></p>\n<ul>\n<li><strong>sign(1bit)</strong>:符号位（标识正负），始终为 0，代表生成的 ID 为正数。</li>\n<li><strong>timestamp (41 bits)</strong>:一共 41 位，用来表示时间戳，单位是毫秒，可以支撑 2 ^41 毫秒（约 69 年）</li>\n<li><strong>datacenter id + worker id (10 bits)</strong>:一般来说，前 5 位表示机房 ID，后 5 位表示机器 ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群/机房的节点。</li>\n<li><strong>sequence (12 bits)</strong>:一共 12 位，用来表示序列号。 序列号为自增值，代表单台机器每毫秒能够产生的最大 ID 数(2^12 = 4096),也就是说单台机器每毫秒最多可以生成 4096 个 唯一 ID。</li>\n</ul>\n<p>在实际项目中，我们一般也会对 Snowflake 算法进行改造，最常见的就是在 Snowflake 算法生成的 ID 中加入业务类型信息。</p>\n<p>我们再来看看 Snowflake 算法的优缺点：</p>\n<ul>\n<li><strong>优点</strong>：生成速度比较快、生成的 ID 有序递增、比较灵活（可以对 Snowflake 算法进行简单的改造比如加入业务 ID）</li>\n<li><strong>缺点</strong>：需要解决重复 ID 问题（ID 生成依赖时间，在获取时间的时候，可能会出现时间回拨的问题，也就是服务器上的时间突然倒退到之前的时间，进而导致会产生重复 ID）、依赖机器 ID 对分布式环境不友好（当需要自动启停或增减机器时，固定的机器 ID 可能不够灵活）。</li>\n</ul>\n<p>如果你想要使用 Snowflake 算法的话，一般不需要你自己再造轮子。有很多基于 Snowflake 算法的开源实现比如美团 的 Leaf、百度的 UidGenerator（后面会提到），并且这些开源实现对原有的 Snowflake 算法进行了优化，性能更优秀，还解决了 Snowflake 算法的时间回拨问题和依赖机器 ID 的问题。</p>\n<p>并且，Seata 还提出了“改良版雪花算法”，针对原版雪花算法进行了一定的优化改良，解决了时间回拨问题，大幅提高的 QPS。具体介绍和改进原理，可以参考下面这两篇文章：</p>\n<ul>\n<li><a href=\"https://seata.io/zh-cn/blog/seata-analysis-UUID-generator.html\" target=\"_blank\" rel=\"noopener noreferrer\">Seata 基于改良版雪花算法的分布式 UUID 生成器分析</a></li>\n<li><a href=\"https://www.cnblogs.com/thisiswhy/p/17611163.html\" target=\"_blank\" rel=\"noopener noreferrer\">在开源项目中看到一个改良版的雪花算法，现在它是你的了。</a></li>\n</ul>\n<h3>开源框架</h3>\n<h4>UidGenerator(百度)</h4>\n<p><a href=\"https://github.com/baidu/uid-generator\" target=\"_blank\" rel=\"noopener noreferrer\">UidGenerator</a> 是百度开源的一款基于 Snowflake(雪花算法)的唯一 ID 生成器。</p>\n<p>不过，UidGenerator 对 Snowflake(雪花算法)进行了改进，生成的唯一 ID 组成如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-distributed-id-schematic-diagram.png\" alt=\"UidGenerator 生成的 ID 组成\"></p>\n<ul>\n<li><strong>sign(1bit)</strong>:符号位（标识正负），始终为 0，代表生成的 ID 为正数。</li>\n<li><strong>delta seconds (28 bits)</strong>:当前时间，相对于时间基点\"2016-05-20\"的增量值，单位：秒，最多可支持约 8.7 年</li>\n<li><strong>worker id (22 bits)</strong>:机器 id，最多可支持约 420w 次机器启动。内置实现为在启动时由数据库分配，默认分配策略为用后即弃，后续可提供复用策略。</li>\n<li><strong>sequence (13 bits)</strong>:每秒下的并发序列，13 bits 可支持每秒 8192 个并发。</li>\n</ul>\n<p>可以看出，和原始 Snowflake(雪花算法)生成的唯一 ID 的组成不太一样。并且，上面这些参数我们都可以自定义。</p>\n<p>UidGenerator 官方文档中的介绍如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-introduction-official-documents.png\" alt=\"\"></p>\n<p>自 18 年后，UidGenerator 就基本没有再维护了，我这里也不过多介绍。想要进一步了解的朋友，可以看看 <a href=\"https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md\" target=\"_blank\" rel=\"noopener noreferrer\">UidGenerator 的官方介绍</a>。</p>\n<h4>Leaf(美团)</h4>\n<p><a href=\"https://github.com/Meituan-Dianping/Leaf\" target=\"_blank\" rel=\"noopener noreferrer\">Leaf</a> 是美团开源的一个分布式 ID 解决方案 。这个项目的名字 Leaf（树叶） 起源于德国哲学家、数学家莱布尼茨的一句话：“There are no two identical leaves in the world”（世界上没有两片相同的树叶） 。这名字起得真心挺不错的，有点文艺青年那味了！</p>\n<p>Leaf 提供了 <strong>号段模式</strong> 和 <strong>Snowflake(雪花算法)</strong> 这两种模式来生成分布式 ID。并且，它支持双号段，还解决了雪花 ID 系统时钟回拨问题。不过，时钟问题的解决需要弱依赖于 Zookeeper（使用 Zookeeper 作为注册中心，通过在特定路径下读取和创建子节点来管理 workId） 。</p>\n<p>Leaf 的诞生主要是为了解决美团各个业务线生成分布式 ID 的方法多种多样以及不可靠的问题。</p>\n<p>Leaf 对原有的号段模式进行改进，比如它这里增加了双号段避免获取 DB 在获取号段的时候阻塞请求获取 ID 的线程。简单来说，就是我一个号段还没用完之前，我自己就主动提前去获取下一个号段（图片来自于美团官方文章：<a href=\"https://tech.meituan.com/2017/04/21/mt-leaf.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Leaf——美团点评分布式 ID 生成系统》</a>）。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-id/leaf-principle.png\" alt=\"\"></p>\n<p>根据项目 README 介绍，在 4C8G VM 基础上，通过公司 RPC 方式调用，QPS 压测结果近 5w/s，TP999 1ms。</p>\n<h4>Tinyid(滴滴)</h4>\n<p><a href=\"https://github.com/didi/tinyid\" target=\"_blank\" rel=\"noopener noreferrer\">Tinyid</a> 是滴滴开源的一款基于数据库号段模式的唯一 ID 生成器。</p>\n<p>数据库号段模式的原理我们在上面已经介绍过了。<strong>Tinyid 有哪些亮点呢？</strong></p>\n<p>为了搞清楚这个问题，我们先来看看基于数据库号段模式的简单架构方案。（图片来自于 Tinyid 的官方 wiki:<a href=\"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D\" target=\"_blank\" rel=\"noopener noreferrer\">《Tinyid 原理介绍》</a>）</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-id/tinyid-principle.png\" alt=\"\"></p>\n<p>在这种架构模式下，我们通过 HTTP 请求向发号器服务申请唯一 ID。负载均衡 router 会把我们的请求送往其中的一台 tinyid-server。</p>\n<p>这种方案有什么问题呢？在我看来（Tinyid 官方 wiki 也有介绍到），主要由下面这 2 个问题：</p>\n<ul>\n<li>获取新号段的情况下，程序获取唯一 ID 的速度比较慢。</li>\n<li>需要保证 DB 高可用，这个是比较麻烦且耗费资源的。</li>\n</ul>\n<p>除此之外，HTTP 调用也存在网络开销。</p>\n<p>Tinyid 的原理比较简单，其架构如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-id/tinyid-architecture-design.png\" alt=\"\"></p>\n<p>相比于基于数据库号段模式的简单架构方案，Tinyid 方案主要做了下面这些优化：</p>\n<ul>\n<li><strong>双号段缓存</strong>：为了避免在获取新号段的情况下，程序获取唯一 ID 的速度比较慢。 Tinyid 中的号段在用到一定程度的时候，就会去异步加载下一个号段，保证内存中始终有可用号段。</li>\n<li><strong>增加多 db 支持</strong>：支持多个 DB，并且，每个 DB 都能生成唯一 ID，提高了可用性。</li>\n<li><strong>增加 tinyid-client</strong>：纯本地操作，无 HTTP 请求消耗，性能和可用性都有很大提升。</li>\n</ul>\n<p>Tinyid 的优缺点这里就不分析了，结合数据库号段模式的优缺点和 Tinyid 的原理就能知道。</p>\n<h4>IdGenerator(个人)</h4>\n<p>和 UidGenerator、Leaf 一样，<a href=\"https://github.com/yitter/IdGenerator\" target=\"_blank\" rel=\"noopener noreferrer\">IdGenerator</a> 也是一款基于 Snowflake(雪花算法)的唯一 ID 生成器。</p>\n<p>IdGenerator 有如下特点：</p>\n<ul>\n<li>生成的唯一 ID 更短；</li>\n<li>兼容所有雪花算法（号段模式或经典模式，大厂或小厂）；</li>\n<li>原生支持 C#/Java/Go/C/Rust/Python/Node.js/PHP(C 扩展)/SQL/ 等语言，并提供多线程安全调用动态库（FFI）；</li>\n<li>解决了时间回拨问题，支持手工插入新 ID（当业务需要在历史时间生成新 ID 时，用本算法的预留位能生成 5000 个每秒）；</li>\n<li>不依赖外部存储系统;</li>\n<li>默认配置下，ID 可用 71000 年不重复。</li>\n</ul>\n<p>IdGenerator 生成的唯一 ID 组成如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/idgenerator-distributed-id-schematic-diagram.png\" alt=\"IdGenerator 生成的 ID 组成\"></p>\n<ul>\n<li><strong>timestamp (位数不固定)</strong>:时间差，是生成 ID 时的系统时间减去 BaseTime(基础时间，也称基点时间、原点时间、纪元时间，默认值为 2020 年) 的总时间差（毫秒单位）。初始为 5bits，随着运行时间而增加。如果觉得默认值太老，你可以重新设置，不过要注意，这个值以后最好不变。</li>\n<li><strong>worker id (默认 6 bits)</strong>:机器 id，机器码，最重要参数，是区分不同机器或不同应用的唯一 ID，最大值由 <code>WorkerIdBitLength</code>（默认 6）限定。如果一台服务器部署多个独立服务，需要为每个服务指定不同的 WorkerId。</li>\n<li><strong>sequence (默认 6 bits)</strong>:序列数，是每毫秒下的序列数，由参数中的 <code>SeqBitLength</code>（默认 6）限定。增加 <code>SeqBitLength</code> 会让性能更高，但生成的 ID 也会更长。</li>\n</ul>\n<p>Java 语言使用示例：<a href=\"https://github.com/yitter/idgenerator/tree/master/Java\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/yitter/idgenerator/tree/master/Java</a>。</p>\n<h2>总结</h2>\n<p>通过这篇文章，我基本上已经把最常见的分布式 ID 生成方案都总结了一波。</p>\n<p>除了上面介绍的方式之外，像 ZooKeeper 这类中间件也可以帮助我们生成唯一 ID。<strong>没有银弹，一定要结合实际项目来选择最适合自己的方案。</strong></p>\n<p>不过，本文主要介绍的是分布式 ID 的理论知识。在实际的面试中，面试官可能会结合具体的业务场景来考察你对分布式 ID 的设计，你可以参考这篇文章：<a href=\"./distributed-id-design\">分布式 ID 设计指南</a>（对于实际工作中分布式 ID 的设计也非常有帮助）。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "分布式"
      ]
    },
    {
      "title": "分布式锁常见实现方案总结",
      "url": "https://javaguide.cn/distributed-system/distributed-lock-implementations.html",
      "id": "https://javaguide.cn/distributed-system/distributed-lock-implementations.html",
      "summary": "这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 通常情况下，我们一般会选择基于 Redis 或者 ZooKeeper 实现分布式锁，Redis 用的要更多...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>通常情况下，我们一般会选择基于 Redis 或者 ZooKeeper 实现分布式锁，Redis 用的要更多一点，我这里也先以 Redis 为例介绍分布式锁的实现。</p>\n<h2>基于 Redis 实现分布式锁</h2>\n<h3>如何基于 Redis 实现一个最简易的分布式锁？</h3>\n<p>不论是本地锁还是分布式锁，核心都在于“互斥”。</p>\n<p>在 Redis 中， <code>SETNX</code> 命令是可以帮助我们实现互斥。<code>SETNX</code> 即 <strong>SET</strong> if <strong>N</strong>ot e<strong>X</strong>ists (对应 Java 中的 <code>setIfAbsent</code> 方法)，如果 key 不存在的话，才会设置 key 的值。如果 key 已经存在， <code>SETNX</code> 啥也不做。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; SETNX lockKey uniqueValue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; SETNX lockKey uniqueValue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">0</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>释放锁的话，直接通过 <code>DEL</code> 命令删除对应的 key 即可。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; DEL lockKey</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>为了防止误删到其他的锁，这里我们建议使用 Lua 脚本通过 key 对应的 value（唯一值）来判断。</p>\n<p>选用 Lua 脚本是为了保证解锁操作的原子性。因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，从而保证了锁释放操作的原子性。</p>\n<div class=\"language-lua line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"lua\" data-title=\"lua\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">// 释放锁时，先比较锁对应的 </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 值是否相等，避免锁的误释放</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> redis</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"get\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">KEYS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]) == </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ARGV</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> redis</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"del\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">KEYS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">end</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-setnx.png\" alt=\"Redis 实现简易分布式锁\"></p>\n<p>这是一种最简易的 Redis 分布式锁实现，实现方式比较简单，性能也很高效。不过，这种方式实现分布式锁存在一些问题。就比如应用程序遇到一些问题比如释放锁的逻辑突然挂掉，可能会导致锁无法被释放，进而造成共享资源无法再被其他线程/进程访问。</p>\n<h3>为什么要给锁设置一个过期时间？</h3>\n<p>为了避免锁无法被释放，我们可以想到的一个解决办法就是：<strong>给这个 key（也就是锁） 设置一个过期时间</strong> 。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">SET</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> lockKey</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> uniqueValue</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> EX</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> NX</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">OK</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>lockKey</strong>：加锁的锁名；</li>\n<li><strong>uniqueValue</strong>：能够唯一标识锁的随机字符串；</li>\n<li><strong>NX</strong>：只有当 lockKey 对应的 key 值不存在的时候才能 SET 成功；</li>\n<li><strong>EX</strong>：过期时间设置（秒为单位）EX 3 标示这个锁有一个 3 秒的自动过期时间。与 EX 对应的是 PX（毫秒为单位），这两个都是过期时间设置。</li>\n</ul>\n<p><strong>一定要保证设置指定 key 的值和过期时间是一个原子操作！！！</strong> 不然的话，依然可能会出现锁无法被释放的问题。</p>\n<p>这样确实可以解决问题，不过，这种解决办法同样存在漏洞：<strong>如果操作共享资源的时间大于过期时间，就会出现锁提前过期的问题，进而导致分布式锁直接失效。如果锁的超时时间设置过长，又会影响到性能。</strong></p>\n<p>你或许在想：<strong>如果操作共享资源的操作还未完成，锁过期时间能够自己续期就好了！</strong></p>\n<h3>如何实现锁的优雅续期？</h3>\n<p>对于 Java 开发的小伙伴来说，已经有了现成的解决方案：<strong><a href=\"https://github.com/redisson/redisson\" target=\"_blank\" rel=\"noopener noreferrer\">Redisson</a></strong> 。其他语言的解决方案，可以在 Redis 官方文档中找到，地址：<a href=\"https://redis.io/topics/distlock\" target=\"_blank\" rel=\"noopener noreferrer\">https://redis.io/topics/distlock</a> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/redis-distributed-lock.png\" alt=\"Distributed locks with Redis\"></p>\n<p>Redisson 是一个开源的 Java 语言 Redis 客户端，提供了很多开箱即用的功能，不仅仅包括多种分布式锁的实现。并且，Redisson 还支持 Redis 单机、Redis Sentinel、Redis Cluster 等多种部署架构。</p>\n<p>Redisson 中的分布式锁自带自动续期机制，使用起来非常简单，原理也比较简单，其提供了一个专门用来监控和续期锁的 <strong>Watch Dog（ 看门狗）</strong>，如果操作共享资源的线程还未执行完成的话，Watch Dog 会不断地延长锁的过期时间，进而保证锁不会因为超时而被释放。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-redisson-renew-expiration.png\" alt=\"Redisson 看门狗自动续期\"></p>\n<p>看门狗名字的由来于 <code>getLockWatchdogTimeout()</code> 方法，这个方法返回的是看门狗给锁续期的过期时间，默认为 30 秒（<a href=\"https://github.com/redisson/redisson/releases/tag/redisson-3.17.6\" target=\"_blank\" rel=\"noopener noreferrer\">redisson-3.17.6</a>）。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//默认 30秒，支持修改</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> long</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lockWatchdogTimeout </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 30</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> *</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Config</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> setLockWatchdogTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">long</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> lockWatchdogTimeout) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">lockWatchdogTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> lockWatchdogTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> long</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> getLockWatchdogTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> lockWatchdogTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>renewExpiration()</code> 方法包含了看门狗的主要逻辑：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> renewExpiration</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         //......</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        Timeout</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> task </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> commandExecutor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getConnectionManager</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">newTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> TimerTask</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Override</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Timeout</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> timeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> throws</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Exception</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                //......</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                // 异步续期，基于 Lua 脚本</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">                CompletionStage</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Boolean</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">future</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> renewExpirationAsync</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(threadId);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                future</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">whenComplete</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((res, e) </span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">-&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (e </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                        // 无法续期</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                        log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">error</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Can't update lock \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> getRawName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \" expiration\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, e);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                        EXPIRATION_RENEWAL_MAP</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remove</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getEntryName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (res) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                        // 递归调用实现续期</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">                        renewExpiration</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                        // 取消续期</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">                        cancelExpirationRenewal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         // 延迟 internalLockLeaseTime/3（默认 10s，也就是 30/3） 再调用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }, internalLockLeaseTime </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">MILLISECONDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        ee</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(task);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>默认情况下，每过 10 秒，看门狗就会执行续期操作，将锁的超时时间设置为 30 秒。看门狗续期前也会先判断是否需要执行续期操作，需要才会执行续期，否则取消续期操作。</p>\n<p>Watch Dog 通过调用 <code>renewExpirationAsync()</code> 方法实现锁的异步续期：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">protected</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> CompletionStage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Boolean</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> renewExpirationAsync</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">long</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> threadId) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> evalWriteAsync</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getRawName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> LongCodec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">INSTANCE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> RedisCommands</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">EVAL_BOOLEAN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 判断是否为持锁线程，如果是就执行续期操作，就锁的过期时间设置为 30s（默认）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">            \"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                    \"redis.call('pexpire', KEYS[1], ARGV[1]); \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                    \"return 1; \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                    \"end; \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                    \"return 0;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            Collections</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">singletonList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getRawName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()),</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">            internalLockLeaseTime</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> getLockName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(threadId))</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以看出， <code>renewExpirationAsync</code> 方法其实是调用 Lua 脚本实现的续期，这样做主要是为了保证续期操作的原子性。</p>\n<p>我这里以 Redisson 的分布式可重入锁 <code>RLock</code> 为例来说明如何使用 Redisson 实现分布式锁：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1.获取指定的分布式锁对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">RLock</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lock </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> redisson</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getLock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"lock\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2.拿锁且不设置锁超时时间，具备 Watch Dog 自动续期机制</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">lock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">lock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3.执行业务</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4.释放锁</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">lock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">unlock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>只有未指定锁超时时间，才会使用到 Watch Dog 自动续期机制。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 手动给锁设置过期时间，不具备 Watch Dog 自动续期机制</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">lock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">lock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">SECONDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果使用 Redis 来实现分布式锁的话，还是比较推荐直接基于 Redisson 来做的。</p>\n<h3>如何实现可重入锁？</h3>\n<p>所谓可重入锁指的是在一个线程中可以多次获取同一把锁，比如一个线程在执行一个带锁的方法，该方法中又调用了另一个需要相同锁的方法，则该线程可以直接执行调用的方法即可重入 ，而无需重新获得锁。像 Java 中的 <code>synchronized</code> 和 <code>ReentrantLock</code> 都属于可重入锁。</p>\n<p><strong>不可重入的分布式锁基本可以满足绝大部分业务场景了，一些特殊的场景可能会需要使用可重入的分布式锁。</strong></p>\n<p>可重入分布式锁的实现核心思路是线程在获取锁的时候判断是否为自己的锁，如果是的话，就不用再重新获取了。为此，我们可以为每个锁关联一个可重入计数器和一个占有它的线程。当可重入计数器大于 0 时，则锁被占有，需要判断占有该锁的线程和请求获取锁的线程是否为同一个。</p>\n<p>实际项目中，我们不需要自己手动实现，推荐使用我们上面提到的 <strong>Redisson</strong> ，其内置了多种类型的锁比如可重入锁（Reentrant Lock）、自旋锁（Spin Lock）、公平锁（Fair Lock）、多重锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/redisson-readme-locks.png\" alt=\"\"></p>\n<h3>Redis 如何解决集群情况下分布式锁的可靠性？</h3>\n<p>为了避免单点故障，生产环境下的 Redis 服务通常是集群化部署的。</p>\n<p>Redis 集群下，上面介绍到的分布式锁的实现会存在一些问题。由于 Redis 集群数据同步到各个节点时是异步的，如果在 Redis 主节点获取到锁后，在没有同步到其他节点时，Redis 主节点宕机了，此时新的 Redis 主节点依然可以获取锁，所以多个应用服务就可以同时获取到锁。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/redis-master-slave-distributed-lock.png\" alt=\"\"></p>\n<p>针对这个问题，Redis 之父 antirez 设计了 <a href=\"https://redis.io/topics/distlock\" target=\"_blank\" rel=\"noopener noreferrer\">Redlock 算法</a> 来解决。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-redis.io-realock.png\" alt=\"\"></p>\n<p>Redlock 算法的思想是让客户端向 Redis 集群中的多个独立的 Redis 实例依次请求申请加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁，否则加锁失败。</p>\n<p>即使部分 Redis 节点出现问题，只要保证 Redis 集群中有半数以上的 Redis 节点可用，分布式锁服务就是正常的。</p>\n<p>Redlock 是直接操作 Redis 节点的，并不是通过 Redis 集群操作的，这样才可以避免 Redis 集群主从切换导致的锁丢失问题。</p>\n<p>Redlock 实现比较复杂，性能比较差，发生时钟变迁的情况下还存在安全性隐患。《数据密集型应用系统设计》一书的作者 Martin Kleppmann 曾经专门发文（<a href=\"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\" target=\"_blank\" rel=\"noopener noreferrer\">How to do distributed locking - Martin Kleppmann - 2016</a>）怼过 Redlock，他认为这是一个很差的分布式锁实现。感兴趣的朋友可以看看<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3NjU3NTkwMQ==&amp;mid=2247505097&amp;idx=1&amp;sn=5c03cb769c4458350f4d4a321ad51f5a&amp;source=41#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">Redis 锁从面试连环炮聊到神仙打架</a>这篇文章，有详细介绍到 antirez 和 Martin Kleppmann 关于 Redlock 的激烈辩论。</p>\n<p>实际项目中不建议使用 Redlock 算法，成本和收益不成正比，可以考虑基于 Redis 主从复制+哨兵模式实现分布式锁。</p>\n<h2>基于 ZooKeeper 实现分布式锁</h2>\n<p>ZooKeeper 相比于 Redis 实现分布式锁，除了提供相对更高的可靠性之外，在功能层面还有一个非常有用的特性：<strong>Watch 机制</strong>。这个机制可以用来实现公平的分布式锁。不过，使用 ZooKeeper 实现的分布式锁在性能方面相对较差，因此如果对性能要求比较高的话，ZooKeeper 可能就不太适合了。</p>\n<h3>如何基于 ZooKeeper 实现分布式锁？</h3>\n<p>ZooKeeper 分布式锁是基于 <strong>临时顺序节点</strong> 和 <strong>Watcher（事件监听器）</strong> 实现的。</p>\n<p>获取锁：</p>\n<ol>\n<li>首先我们要有一个持久节点<code>/locks</code>，客户端获取锁就是在<code>locks</code>下创建临时顺序节点。</li>\n<li>假设客户端 1 创建了<code>/locks/lock1</code>节点，创建成功之后，会判断 <code>lock1</code>是否是 <code>/locks</code> 下最小的子节点。</li>\n<li>如果 <code>lock1</code>是最小的子节点，则获取锁成功。否则，获取锁失败。</li>\n<li>如果获取锁失败，则说明有其他的客户端已经成功获取锁。客户端 1 并不会不停地循环去尝试加锁，而是在前一个节点比如<code>/locks/lock0</code>上注册一个事件监听器。这个监听器的作用是当前一个节点释放锁之后通知客户端 1（避免无效自旋），这样客户端 1 就加锁成功了。</li>\n</ol>\n<p>释放锁：</p>\n<ol>\n<li>成功获取锁的客户端在执行完业务流程之后，会将对应的子节点删除。</li>\n<li>成功获取锁的客户端在出现故障之后，对应的子节点由于是临时顺序节点，也会被自动删除，避免了锁无法被释放。</li>\n<li>我们前面说的事件监听器其实监听的就是这个子节点删除事件，子节点删除就意味着锁被释放。</li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-zookeeper.png\" alt=\"\"></p>\n<p>实际项目中，推荐使用 Curator 来实现 ZooKeeper 分布式锁。Curator 是 Netflix 公司开源的一套 ZooKeeper Java 客户端框架，相比于 ZooKeeper 自带的客户端 zookeeper 来说，Curator 的封装更加完善，各种 API 都可以比较方便地使用。</p>\n<p><code>Curator</code>主要实现了下面四种锁：</p>\n<ul>\n<li><code>InterProcessMutex</code>：分布式可重入排它锁</li>\n<li><code>InterProcessSemaphoreMutex</code>：分布式不可重入排它锁</li>\n<li><code>InterProcessReadWriteLock</code>：分布式读写锁</li>\n<li><code>InterProcessMultiLock</code>：将多个锁作为单个实体管理的容器，获取锁的时候获取所有锁，释放锁也会释放所有锁资源（忽略释放失败的锁）。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">CuratorFramework</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> client </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> ZKUtils</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getClient</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">client</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">start</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 分布式可重入排它锁</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">InterProcessLock</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lock1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> InterProcessMutex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(client</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> lockPath1)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 分布式不可重入排它锁</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">InterProcessLock</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lock2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> InterProcessSemaphoreMutex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(client</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> lockPath2)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 将多个锁作为一个整体</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">InterProcessMultiLock</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lock </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> InterProcessMultiLock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Arrays</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">asList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(lock1, lock2)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">lock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">acquire</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">SECONDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   throw</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IllegalStateException</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"不能获取多锁\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"已获取多锁\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"是否有第一个锁: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> lock1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isAcquiredInThisProcess</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"是否有第二个锁: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> lock2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isAcquiredInThisProcess</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">try</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 资源操作</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    resource</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">use</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">} </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">finally</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"释放多个锁\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    lock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">release</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"是否有第一个锁: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> lock1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isAcquiredInThisProcess</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"是否有第二个锁: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> lock2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isAcquiredInThisProcess</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">client</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">close</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>为什么要用临时顺序节点？</h3>\n<p>每个数据节点在 ZooKeeper 中被称为 <strong>znode</strong>，它是 ZooKeeper 中数据的最小单元。</p>\n<p>我们通常是将 znode 分为 4 大类：</p>\n<ul>\n<li><strong>持久（PERSISTENT）节点</strong>：一旦创建就一直存在即使 ZooKeeper 集群宕机，直到将其删除。</li>\n<li><strong>临时（EPHEMERAL）节点</strong>：临时节点的生命周期是与 <strong>客户端会话（session）</strong> 绑定的，<strong>会话消失则节点消失</strong> 。并且，<strong>临时节点只能做叶子节点</strong> ，不能创建子节点。</li>\n<li><strong>持久顺序（PERSISTENT_SEQUENTIAL）节点</strong>：除了具有持久（PERSISTENT）节点的特性之外， 子节点的名称还具有顺序性。比如 <code>/node1/app0000000001</code>、<code>/node1/app0000000002</code> 。</li>\n<li><strong>临时顺序（EPHEMERAL_SEQUENTIAL）节点</strong>：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。</li>\n</ul>\n<p>可以看出，临时节点相比持久节点，最主要的是对会话失效的情况处理不一样，临时节点会话消失则对应的节点消失。这样的话，如果客户端发生异常导致没来得及释放锁也没关系，会话失效节点自动被删除，不会发生死锁的问题。</p>\n<p>使用 Redis 实现分布式锁的时候，我们是通过过期时间来避免锁无法被释放导致死锁问题的，而 ZooKeeper 直接利用临时节点的特性即可。</p>\n<p>假设不使用顺序节点的话，所有尝试获取锁的客户端都会对持有锁的子节点加监听器。当该锁被释放之后，势必会造成所有尝试获取锁的客户端来争夺锁，这样对性能不友好。使用顺序节点之后，只需要监听前一个节点就好了，对性能更友好。</p>\n<h3>为什么要设置对前一个节点的监听？</h3>\n<blockquote>\n<p>Watcher（事件监听器），是 ZooKeeper 中的一个很重要的特性。ZooKeeper 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性。</p>\n</blockquote>\n<p>同一时间段内，可能会有很多客户端同时获取锁，但只有一个可以获取成功。如果获取锁失败，则说明有其他的客户端已经成功获取锁。获取锁失败的客户端并不会不停地循环去尝试加锁，而是在前一个节点注册一个事件监听器。</p>\n<p>这个事件监听器的作用是：<strong>当前一个节点对应的客户端释放锁之后（也就是前一个节点被删除之后，监听的是删除事件），通知获取锁失败的客户端（唤醒等待的线程，Java 中的 <code>wait/notifyAll</code> ），让它尝试去获取锁，然后就成功获取锁了。</strong></p>\n<h3>如何实现可重入锁？</h3>\n<p>这里以 Curator 的 <code>InterProcessMutex</code> 对可重入锁的实现来介绍（源码地址：<a href=\"https://github.com/apache/curator/blob/master/curator-recipes/src/main/java/org/apache/curator/framework/recipes/locks/InterProcessMutex.java\" target=\"_blank\" rel=\"noopener noreferrer\">InterProcessMutex.java</a>）。</p>\n<p>当我们调用 <code>InterProcessMutex#acquire</code>方法获取锁的时候，会调用<code>InterProcessMutex#internalLock</code>方法。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 获取可重入互斥锁，直到获取成功为止</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Override</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> acquire</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() throws Exception {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">internalLock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    throw</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IOException</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Lost connection while trying to acquire lock: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> basePath)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>internalLock</code> 方法会先获取当前请求锁的线程，然后从 <code>threadData</code>( <code>ConcurrentMap&lt;Thread, LockData&gt;</code> 类型)中获取当前线程对应的 <code>lockData</code> 。 <code>lockData</code> 包含锁的信息和加锁的次数，是实现可重入锁的关键。</p>\n<p>第一次获取锁的时候，<code>lockData</code>为 <code>null</code>。获取锁成功之后，会将当前线程和对应的 <code>lockData</code> 放到 <code>threadData</code> 中</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> internalLock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">long</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> time</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> unit) throws Exception {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 获取当前请求锁的线程</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">  Thread</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> currentThread </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">currentThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 拿对应的 lockData</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">  LockData</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lockData </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> threadData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(currentThread);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 第一次获取锁的话，lockData 为 null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (lockData </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 当前线程获取过一次锁之后</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 因为当前线程的锁存在， lockCount 自增后返回，实现锁重入.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    lockData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">lockCount</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">incrementAndGet</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 尝试获取锁</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">  String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lockPath </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> internals</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">attemptLock</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(time, unit, </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getLockNodeBytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (lockPath </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    LockData</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> newLockData </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> LockData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(currentThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> lockPath)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     // 获取锁成功之后，将当前线程和对应的 lockData 放到 threadData 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    threadData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(currentThread, newLockData);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>LockData</code>是 <code>InterProcessMutex</code>中的一个静态内部类。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ConcurrentMap</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Thread</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> LockData</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> threadData </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Maps</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">newConcurrentMap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> LockData</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 当前持有锁的线程</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Thread</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> owningThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 锁对应的子节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lockPath</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 加锁的次数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> AtomicInteger</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> lockCount </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> AtomicInteger</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> LockData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Thread</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> owningThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> lockPath</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">owningThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> owningThread;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">lockPath</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> lockPath;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果已经获取过一次锁，后面再来获取锁的话，直接就会在 <code>if (lockData != null)</code> 这里被拦下了，然后就会执行<code>lockData.lockCount.incrementAndGet();</code> 将加锁次数加 1。</p>\n<p>整个可重入锁的实现逻辑非常简单，直接在客户端判断当前线程有没有获取锁，有的话直接将加锁次数加 1 就可以了。</p>\n<h2>总结</h2>\n<p>在这篇文章中，我介绍了实现分布式锁的两种常见方式：<strong>Redis</strong> 和 <strong>ZooKeeper</strong>。至于具体选择 Redis 还是 ZooKeeper 来实现分布式锁，还是要根据业务的具体需求来决定。</p>\n<ul>\n<li>如果对性能要求比较高的话，建议使用 Redis 实现分布式锁。推荐优先选择 <strong>Redisson</strong> 提供的现成分布式锁，而不是自己实现。实际项目中不建议使用 Redlock 算法，成本和收益不成正比，可以考虑基于 Redis 主从复制+哨兵模式实现分布式锁。</li>\n<li>如果对可靠性要求比较高，建议使用 ZooKeeper 实现分布式锁，推荐基于 <strong>Curator</strong> 框架来实现。不过，现在很多项目都不会用到 ZooKeeper，如果单纯是因为分布式锁而引入 ZooKeeper 的话，那是不太可取的，不建议这样做，为了一个小小的功能增加了系统的复杂度。</li>\n</ul>\n<p>需要注意的是，无论选择哪种方式实现分布式锁，包括 Redis、ZooKeeper 或 Etcd（本文没介绍，但也经常用来实现分布式锁），都无法保证 100% 的安全性，特别是在遇到进程垃圾回收（GC）、网络延迟等异常情况下。</p>\n<p>为了进一步提高系统的可靠性，建议引入一个兜底机制。例如，可以通过 <strong>版本号（Fencing Token）机制</strong> 来避免并发冲突。</p>\n<p>最后，再分享几篇我觉得写的还不错的文章：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/JzCHpIOiFVmBoAko58ZuGw\" target=\"_blank\" rel=\"noopener noreferrer\">分布式锁实现原理与最佳实践 - 阿里云开发者</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/-N4x6EkxwAYDGdJhwvmZLw\" target=\"_blank\" rel=\"noopener noreferrer\">聊聊分布式锁 - 字节跳动技术团队</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/yZC6VJGxt1ANZkn0SljZBg\" target=\"_blank\" rel=\"noopener noreferrer\">Redis、ZooKeeper、Etcd，谁有最好用的分布式锁？ - 腾讯云开发者</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-setnx.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "分布式"
      ]
    },
    {
      "title": "分布式锁介绍",
      "url": "https://javaguide.cn/distributed-system/distributed-lock.html",
      "id": "https://javaguide.cn/distributed-system/distributed-lock.html",
      "summary": "这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 网上有很多分布式锁相关的文章，写了一个相对简洁易懂的版本，针对面试和工作应该够用了。 这篇文章我们先介绍一...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>网上有很多分布式锁相关的文章，写了一个相对简洁易懂的版本，针对面试和工作应该够用了。</p>\n<p>这篇文章我们先介绍一下分布式锁的基本概念。</p>\n<h2>为什么需要分布式锁？</h2>\n<p>在多线程环境中，如果多个线程同时访问共享资源（例如商品库存、外卖订单），会发生数据竞争，可能会导致出现脏数据或者系统问题，威胁到程序的正常运行。</p>\n<p>举个例子，假设现在有 100 个用户参与某个限时秒杀活动，每位用户限购 1 件商品，且商品的数量只有 3 个。如果不对共享资源进行互斥访问，就可能出现以下情况：</p>\n<ul>\n<li>线程 1、2、3 等多个线程同时进入抢购方法，每一个线程对应一个用户。</li>\n<li>线程 1 查询用户已经抢购的数量，发现当前用户尚未抢购且商品库存还有 1 个，因此认为可以继续执行抢购流程。</li>\n<li>线程 2 也执行查询用户已经抢购的数量，发现当前用户尚未抢购且商品库存还有 1 个，因此认为可以继续执行抢购流程。</li>\n<li>线程 1 继续执行，将库存数量减少 1 个，然后返回成功。</li>\n<li>线程 2 继续执行，将库存数量减少 1 个，然后返回成功。</li>\n<li>此时就发生了超卖问题，导致商品被多卖了一份。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/oversold-without-locking.png\" alt=\"共享资源未互斥访问导致出现问题\"></p>\n<p>为了保证共享资源被安全地访问，我们需要使用互斥操作对共享资源进行保护，即同一时刻只允许一个线程访问共享资源，其他线程需要等待当前线程释放后才能访问。这样可以避免数据竞争和脏数据问题，保证程序的正确性和稳定性。</p>\n<p><strong>如何才能实现共享资源的互斥访问呢？</strong> 锁是一个比较通用的解决方案，更准确点来说是悲观锁。</p>\n<p>悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>。</p>\n<p>对于单机多线程来说，在 Java 中，我们通常使用 <code>ReentrantLock</code> 类、<code>synchronized</code> 关键字这类 JDK 自带的 <strong>本地锁</strong> 来控制一个 JVM 进程内的多个线程对本地共享资源的访问。</p>\n<p>下面是我对本地锁画的一张示意图。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/jvm-local-lock.png\" alt=\"本地锁\"></p>\n<p>从图中可以看出，这些线程访问共享资源是互斥的，同一时刻只有一个线程可以获取到本地锁访问共享资源。</p>\n<p>分布式系统下，不同的服务/客户端通常运行在独立的 JVM 进程上。如果多个 JVM 进程共享同一份资源的话，使用本地锁就没办法实现资源的互斥访问了。于是，<strong>分布式锁</strong> 就诞生了。</p>\n<p>举个例子：系统的订单服务一共部署了 3 份，都对外提供服务。用户下订单之前需要检查库存，为了防止超卖，这里需要加锁以实现对检查库存操作的同步访问。由于订单服务位于不同的 JVM 进程中，本地锁在这种情况下就没办法正常工作了。我们需要用到分布式锁，这样的话，即使多个线程不在同一个 JVM 进程中也能获取到同一把锁，进而实现共享资源的互斥访问。</p>\n<p>下面是我对分布式锁画的一张示意图。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock.png\" alt=\"分布式锁\"></p>\n<p>从图中可以看出，这些独立的进程中的线程访问共享资源是互斥的，同一时刻只有一个线程可以获取到分布式锁访问共享资源。</p>\n<h2>分布式锁应该具备哪些条件？</h2>\n<p>一个最基本的分布式锁需要满足：</p>\n<ul>\n<li><strong>互斥</strong>：任意一个时刻，锁只能被一个线程持有。</li>\n<li><strong>高可用</strong>：锁服务是高可用的，当一个锁服务出现问题，能够自动切换到另外一个锁服务。并且，即使客户端的释放锁的代码逻辑出现问题，锁最终一定还是会被释放，不会影响其他线程对共享资源的访问。这一般是通过超时机制实现的。</li>\n<li><strong>可重入</strong>：一个节点获取了锁之后，还可以再次获取锁。</li>\n</ul>\n<p>除了上面这三个基本条件之外，一个好的分布式锁还需要满足下面这些条件：</p>\n<ul>\n<li><strong>高性能</strong>：获取和释放锁的操作应该快速完成，并且不应该对整个系统的性能造成过大影响。</li>\n<li><strong>非阻塞</strong>：如果获取不到锁，不能无限期等待，避免对系统正常运行造成影响。</li>\n</ul>\n<h2>分布式锁的常见实现方式有哪些？</h2>\n<p>常见分布式锁实现方案如下：</p>\n<ul>\n<li>基于关系型数据库比如 MySQL 实现分布式锁。</li>\n<li>基于分布式协调服务 ZooKeeper 实现分布式锁。</li>\n<li>基于分布式键值存储系统比如 Redis 、Etcd 实现分布式锁。</li>\n</ul>\n<p>关系型数据库的方式一般是通过唯一索引或者排他锁实现。不过，一般不会使用这种方式，问题太多比如性能太差、不具备锁失效机制。</p>\n<p>基于 ZooKeeper 或者 Redis 实现分布式锁这两种实现方式要用的更多一些，我专门写了一篇文章来详细介绍这两种方案：<a href=\"/distributed-system/distributed-lock-implementations.html\" target=\"_blank\">分布式锁常见实现方案总结</a>。</p>\n<h2>总结</h2>\n<p>这篇文章我们主要介绍了：</p>\n<ul>\n<li>分布式锁的用途：分布式系统下，不同的服务/客户端通常运行在独立的 JVM 进程上。如果多个 JVM 进程共享同一份资源的话，使用本地锁就没办法实现资源的互斥访问了。</li>\n<li>分布式锁的应该具备的条件：互斥、高可用、可重入、高性能、非阻塞。</li>\n<li>分布式锁的常见实现方式：关系型数据库比如 MySQL、分布式协调服务 ZooKeeper、分布式键值存储系统比如 Redis 、Etcd 。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/oversold-without-locking.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "分布式"
      ]
    },
    {
      "title": "分布式事务常见解决方案总结(付费)",
      "url": "https://javaguide.cn/distributed-system/distributed-transaction.html",
      "id": "https://javaguide.cn/distributed-system/distributed-transaction.html",
      "summary": "分布式事务 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。 （点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 JavaGuide 的补充完善，两者可以配合使用。 《Java 面试指北》内容概览 为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的...",
      "content_html": "<p><strong>分布式事务</strong> 相关的面试题为我的<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/distributed-system.png\" alt=\"\"></p>\n<p><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href=\"https://javaguide.cn/#/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的补充完善，两者可以配合使用。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a> 。</p>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> ，干货多多！</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/javamianshizhibei/distributed-system.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "分布式"
      ]
    },
    {
      "title": "Spring Cloud Gateway常见问题总结",
      "url": "https://javaguide.cn/distributed-system/spring-cloud-gateway-questions.html",
      "id": "https://javaguide.cn/distributed-system/spring-cloud-gateway-questions.html",
      "summary": "本文重构完善自6000 字 | 16 图 | 深入理解 Spring Cloud Gateway 的原理 - 悟空聊架构这篇文章。 什么是 Spring Cloud Gateway？ Spring Cloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 Zuul。准确点来说，应该是 Zuul 1.x...",
      "content_html": "<blockquote>\n<p>本文重构完善自<a href=\"https://mp.weixin.qq.com/s/XjFYsP1IUqNzWqXZdJn-Aw\" target=\"_blank\" rel=\"noopener noreferrer\">6000 字 | 16 图 | 深入理解 Spring Cloud Gateway 的原理 - 悟空聊架构</a>这篇文章。</p>\n</blockquote>\n<h2>什么是 Spring Cloud Gateway？</h2>\n<p>Spring Cloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 <strong>Zuul</strong>。准确点来说，应该是 Zuul 1.x。Spring Cloud Gateway 起步要比 Zuul 2.x 更早。</p>\n<p>为了提升网关的性能，Spring Cloud Gateway 基于 Spring WebFlux 。Spring WebFlux 使用 Reactor 库来实现响应式编程模型，底层基于 Netty 实现同步非阻塞的 I/O。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway- demo.png\" alt=\"\"></p>\n<p>Spring Cloud Gateway 不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，限流。</p>\n<p>Spring Cloud Gateway 和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。不过，目前更加推荐使用 Spring Cloud Gateway 而非 Zuul，Spring Cloud 生态对其支持更加友好。</p>\n<ul>\n<li>GitHub 地址： <a href=\"https://github.com/spring-cloud/spring-cloud-gateway\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/spring-cloud/spring-cloud-gateway</a></li>\n<li>官网： <a href=\"https://spring.io/projects/spring-cloud-gateway\" target=\"_blank\" rel=\"noopener noreferrer\">https://spring.io/projects/spring-cloud-gateway</a></li>\n</ul>\n<h2>Spring Cloud Gateway 的工作流程？</h2>\n<p>Spring Cloud Gateway 的工作流程如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-workflow.png\" alt=\"Spring Cloud Gateway 的工作流程\"></p>\n<p>这是 Spring 官方博客中的一张图，原文地址：<a href=\"https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter</a>。</p>\n<p>具体的流程分析：</p>\n<ol>\n<li><strong>路由判断</strong>：客户端的请求到达网关后，先经过 Gateway Handler Mapping 处理，这里面会做断言（Predicate）判断，看下符合哪个路由规则，这个路由映射后端的某个服务。</li>\n<li><strong>请求过滤</strong>：然后请求到达 Gateway Web Handler，这里面有很多过滤器，组成过滤器链（Filter Chain），这些过滤器可以对请求进行拦截和修改，比如添加请求头、参数校验等等，有点像净化污水。然后将请求转发到实际的后端服务。这些过滤器逻辑上可以称作 Pre-Filters，Pre 可以理解为“在...之前”。</li>\n<li><strong>服务处理</strong>：后端服务会对请求进行处理。</li>\n<li><strong>响应过滤</strong>：后端处理完结果后，返回给 Gateway 的过滤器再次做处理，逻辑上可以称作 Post-Filters，Post 可以理解为“在...之后”。</li>\n<li><strong>响应返回</strong>：响应经过过滤处理后，返回给客户端。</li>\n</ol>\n<p>总结：客户端的请求先通过匹配规则找到合适的路由，就能映射到具体的服务。然后请求经过过滤器处理后转发给具体的服务，服务处理后，再次经过过滤器处理，最后返回给客户端。</p>\n<h2>Spring Cloud Gateway 的断言是什么？</h2>\n<p>断言（Predicate）这个词听起来极其深奥，它是一种编程术语，我们生活中根本就不会用它。说白了它就是对一个表达式进行 if 判断，结果为真或假，如果为真则做这件事，否则做那件事。</p>\n<p>在 Gateway 中，如果客户端发送的请求满足了断言的条件，则映射到指定的路由器，就能转发到指定的服务上进行处理。</p>\n<p>断言配置的示例如下，配置了两个路由规则，有一个 predicates 断言配置，当请求 url 中包含 <code>api/thirdparty</code>，就匹配到了第一个路由 <code>route_thirdparty</code>。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-example.png\" alt=\"断言配置示例\"></p>\n<p>常见的路由断言规则如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-rules.png\" alt=\"Spring Cloud GateWay 路由断言规则\"></p>\n<h2>Spring Cloud Gateway 的路由和断言是什么关系？</h2>\n<p>Route 路由和 Predicate 断言的对应关系如下：：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-route.png\" alt=\"路由和断言的对应关系\"></p>\n<ul>\n<li><strong>一对多</strong>：一个路由规则可以包含多个断言。如上图中路由 Route1 配置了三个断言 Predicate。</li>\n<li><strong>同时满足</strong>：如果一个路由规则中有多个断言，则需要同时满足才能匹配。如上图中路由 Route2 配置了两个断言，客户端发送的请求必须同时满足这两个断言，才能匹配路由 Route2。</li>\n<li><strong>第一个匹配成功</strong>：如果一个请求可以匹配多个路由，则映射第一个匹配成功的路由。如上图所示，客户端发送的请求满足 Route3 和 Route4 的断言，但是 Route3 的配置在配置文件中靠前，所以只会匹配 Route3。</li>\n</ul>\n<h2>Spring Cloud Gateway 如何实现动态路由？</h2>\n<p>在使用 Spring Cloud Gateway 的时候，官方文档提供的方案总是基于配置文件或代码配置的方式。</p>\n<p>Spring Cloud Gateway 作为微服务的入口，需要尽量避免重启，而现在配置更改需要重启服务不能满足实际生产过程中的动态刷新、实时变更的业务需求，所以我们需要在 Spring Cloud Gateway 运行时动态配置网关。</p>\n<p>实现动态路由的方式有很多种，其中一种推荐的方式是基于 Nacos 注册中心来做。 Spring Cloud Gateway 可以从注册中心获取服务的元数据（例如服务名称、路径等），然后根据这些信息自动生成路由规则。这样，当你添加、移除或更新服务实例时，网关会自动感知并相应地调整路由规则，无需手动维护路由配置。</p>\n<p>其实这些复杂的步骤并不需要我们手动实现，通过 Nacos Server 和 Spring Cloud Alibaba Nacos Config 即可实现配置的动态变更，官方文档地址：<a href=\"https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config</a> 。</p>\n<h2>Spring Cloud Gateway 的过滤器有哪些？</h2>\n<p>过滤器 Filter 按照请求和响应可以分为两种：</p>\n<ul>\n<li><strong>Pre 类型</strong>：在请求被转发到微服务之前，对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等操作。</li>\n<li><strong>Post 类型</strong>：微服务处理完请求后，返回响应给网关，网关可以再次进行处理，例如修改响应内容或响应头、日志输出、流量监控等。</li>\n</ul>\n<p>另外一种分类是按照过滤器 Filter 作用的范围进行划分：</p>\n<ul>\n<li><strong>GatewayFilter</strong>：局部过滤器，应用在单个路由或一组路由上的过滤器。标红色表示比较常用的过滤器。</li>\n<li><strong>GlobalFilter</strong>：全局过滤器，应用在所有路由上的过滤器。</li>\n</ul>\n<h3>局部过滤器</h3>\n<p>常见的局部过滤器如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-gatewayfilters.png\" alt=\"\"></p>\n<p>具体怎么用呢？这里有个示例，如果 URL 匹配成功，则去掉 URL 中的 “api”。</p>\n<div class=\"language-yaml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"yaml\" data-title=\"yaml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">filters</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#过滤器</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  - </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">RewritePath=/api/(?&lt;segment&gt;.*),/$\\{segment}</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 将跳转路径中包含的 “api” 替换成空</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然我们也可以自定义过滤器，本篇不做展开。</p>\n<h3>全局过滤器</h3>\n<p>常见的全局过滤器如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-globalfilters.png\" alt=\"\"></p>\n<p>全局过滤器最常见的用法是进行负载均衡。配置如下所示：</p>\n<div class=\"language-yaml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"yaml\" data-title=\"yaml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">spring</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  cloud</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    gateway</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      routes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        - </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">route_member</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 第三方微服务路由规则</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">          uri</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">lb://passjava-member</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 负载均衡，将请求转发到注册中心注册的 passjava-member 服务</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">          predicates</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 断言</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            - </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Path=/api/member/**</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 如果前端请求路径包含 api/member，则应用这条路由规则</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">          filters</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#过滤器</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            - </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">RewritePath=/api/(?&lt;segment&gt;.*),/$\\{segment}</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 将跳转路径中包含的api替换成空</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里有个关键字 <code>lb</code>，用到了全局过滤器 <code>LoadBalancerClientFilter</code>，当匹配到这个路由后，会将请求转发到 passjava-member 服务，且支持负载均衡转发，也就是先将 passjava-member 解析成实际的微服务的 host 和 port，然后再转发给实际的微服务。</p>\n<h2>Spring Cloud Gateway 支持限流吗？</h2>\n<p>Spring Cloud Gateway 自带了限流过滤器，对应的接口是 <code>RateLimiter</code>，<code>RateLimiter</code> 接口只有一个实现类 <code>RedisRateLimiter</code> （基于 Redis + Lua 实现的限流），提供的限流功能比较简易且不易使用。</p>\n<p>从 Sentinel 1.6.0 版本开始，Sentinel 引入了 Spring Cloud Gateway 的适配模块，可以提供两种资源维度的限流：route 维度和自定义 API 维度。也就是说，Spring Cloud Gateway 可以结合 Sentinel 实现更强大的网关流量控制。</p>\n<h2>Spring Cloud Gateway 如何自定义全局异常处理？</h2>\n<p>在 SpringBoot 项目中，我们捕获全局异常只需要在项目中配置 <code>@RestControllerAdvice</code>和 <code>@ExceptionHandler</code>就可以了。不过，这种方式在 Spring Cloud Gateway 下不适用。</p>\n<p>Spring Cloud Gateway 提供了多种全局处理的方式，比较常用的一种是实现<code>ErrorWebExceptionHandler</code>并重写其中的<code>handle</code>方法。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Order</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Component</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">RequiredArgsConstructor</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> GlobalErrorWebExceptionHandler</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> implements</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ErrorWebExceptionHandler</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ObjectMapper</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> objectMapper</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Override</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Mono</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> handle</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ServerWebExchange</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> exchange</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Throwable</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> ex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>参考</h2>\n<ul>\n<li>Spring Cloud Gateway 官方文档：<a href=\"https://cloud.spring.io/spring-cloud-gateway/reference/html/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cloud.spring.io/spring-cloud-gateway/reference/html/</a></li>\n<li>Creating a custom Spring Cloud Gateway Filter：<a href=\"https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter</a></li>\n<li>全局异常处理: <a href=\"https://zhuanlan.zhihu.com/p/347028665\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/347028665</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway-%20demo.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "分布式"
      ]
    },
    {
      "title": "降级&熔断详解(付费)",
      "url": "https://javaguide.cn/high-availability/fallback-and-circuit-breaker.html",
      "id": "https://javaguide.cn/high-availability/fallback-and-circuit-breaker.html",
      "summary": "降级&熔断 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。 （点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 JavaGuide 的补充完善，两者可以配合使用。 《Java 面试指北》内容概览 为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的...",
      "content_html": "<p><strong>降级&amp;熔断</strong> 相关的面试题为我的<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了<a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a>中。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/mianshizhibei-gaobingfa.png\" alt=\"\"></p>\n<p><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href=\"https://javaguide.cn/#/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的补充完善，两者可以配合使用。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a> 。</p>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> ，干货多多！</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/mianshizhibei-gaobingfa.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高可用"
      ]
    },
    {
      "title": "高可用系统设计指南",
      "url": "https://javaguide.cn/high-availability/high-availability-system-design.html",
      "id": "https://javaguide.cn/high-availability/high-availability-system-design.html",
      "summary": "什么是高可用？可用性的判断标准是啥？ 高可用描述的是一个系统在大部分时间都是可用的，可以为我们提供服务的。高可用代表系统即使在发生硬件故障或者系统升级的时候，服务仍然是可用的。 一般情况下，我们使用多少个 9 来评判一个系统的可用性，比如 99.9999% 就是代表该系统在所有的运行时间中只有 0.0001% 的时间是不可用的，这样的系统就是非常非常高...",
      "content_html": "<h2>什么是高可用？可用性的判断标准是啥？</h2>\n<p>高可用描述的是一个系统在大部分时间都是可用的，可以为我们提供服务的。高可用代表系统即使在发生硬件故障或者系统升级的时候，服务仍然是可用的。</p>\n<p>一般情况下，我们使用多少个 9 来评判一个系统的可用性，比如 99.9999% 就是代表该系统在所有的运行时间中只有 0.0001% 的时间是不可用的，这样的系统就是非常非常高可用的了！当然，也会有系统如果可用性不太好的话，可能连 9 都上不了。</p>\n<p>除此之外，系统的可用性还可以用某功能的失败次数与总的请求次数之比来衡量，比如对网站请求 1000 次，其中有 10 次请求失败，那么可用性就是 99%。</p>\n<h2>哪些情况会导致系统不可用？</h2>\n<ol>\n<li>黑客攻击；</li>\n<li>硬件故障，比如服务器坏掉。</li>\n<li>并发量/用户请求量激增导致整个服务宕掉或者部分服务不可用。</li>\n<li>代码中的坏味道导致内存泄漏或者其他问题导致程序挂掉。</li>\n<li>网站架构某个重要的角色比如 Nginx 或者数据库突然不可用。</li>\n<li>自然灾害或者人为破坏。</li>\n<li>……</li>\n</ol>\n<h2>有哪些提高系统可用性的方法？</h2>\n<h3>注重代码质量，测试严格把关</h3>\n<p>我觉得这个是最最最重要的，代码质量有问题比如比较常见的内存泄漏、循环依赖都是对系统可用性极大的损害。大家都喜欢谈限流、降级、熔断，但是我觉得从代码质量这个源头把关是首先要做好的一件很重要的事情。如何提高代码质量？比较实际可用的就是 CodeReview，不要在乎每天多花的那 1 个小时左右的时间，作用可大着呢！</p>\n<p>另外，安利几个对提高代码质量有实际效果的神器：</p>\n<ul>\n<li><a href=\"https://www.sonarqube.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Sonarqube</a>；</li>\n<li>Alibaba 开源的 Java 诊断工具 <a href=\"https://arthas.aliyun.com/doc/\" target=\"_blank\" rel=\"noopener noreferrer\">Arthas</a>；</li>\n<li><a href=\"https://github.com/alibaba/p3c\" target=\"_blank\" rel=\"noopener noreferrer\">阿里巴巴 Java 代码规范</a>（Alibaba Java Code Guidelines）；</li>\n<li>IDEA 自带的代码分析等工具。</li>\n</ul>\n<h3>使用集群，减少单点故障</h3>\n<p>先拿常用的 Redis 举个例子！我们如何保证我们的 Redis 缓存高可用呢？答案就是使用集群，避免单点故障。当我们使用一个 Redis 实例作为缓存的时候，这个 Redis 实例挂了之后，整个缓存服务可能就挂了。使用了集群之后，即使一台 Redis 实例挂了，不到一秒就会有另外一台 Redis 实例顶上。</p>\n<h3>限流</h3>\n<p>流量控制（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。——来自 <a href=\"https://github.com/alibaba/Sentinel\" title=\"Sentinel\" target=\"_blank\" rel=\"noopener noreferrer\">alibaba-Sentinel</a> 的 wiki。</p>\n<h3>超时和重试机制设置</h3>\n<p>一旦用户请求超过某个时间的得不到响应，就抛出异常。这个是非常重要的，很多线上系统故障都是因为没有进行超时设置或者超时设置的方式不对导致的。我们在读取第三方服务的时候，尤其适合设置超时和重试机制。一般我们使用一些 RPC 框架的时候，这些框架都自带的超时重试的配置。如果不进行超时设置可能会导致请求响应速度慢，甚至导致请求堆积进而让系统无法再处理请求。重试的次数一般设为 3 次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。</p>\n<h3>熔断机制</h3>\n<p>超时和重试机制设置之外，熔断机制也是很重要的。 熔断机制说的是系统自动收集所依赖服务的资源使用情况和性能指标，当所依赖的服务恶化或者调用失败次数达到某个阈值的时候就迅速失败，让当前系统立即切换依赖其他备用服务。 比较常用的流量控制和熔断降级框架是 Netflix 的 Hystrix 和 alibaba 的 Sentinel。</p>\n<h3>异步调用</h3>\n<p>异步调用的话我们不需要关心最后的结果，这样我们就可以用户请求完成之后就立即返回结果，具体处理我们可以后续再做，秒杀场景用这个还是蛮多的。但是，使用异步之后我们可能需要 <strong>适当修改业务流程进行配合</strong>，比如<strong>用户在提交订单之后，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功</strong>。除了可以在程序中实现异步之外，我们常常还使用消息队列，消息队列可以通过异步处理提高系统性能（削峰、减少响应所需时间）并且可以降低系统耦合性。</p>\n<h3>使用缓存</h3>\n<p>如果我们的系统属于并发量比较高的话，如果我们单纯使用数据库的话，当大量请求直接落到数据库可能数据库就会直接挂掉。使用缓存缓存热点数据，因为缓存存储在内存中，所以速度相当地快！</p>\n<h3>其他</h3>\n<ul>\n<li><strong>核心应用和服务优先使用更好的硬件</strong></li>\n<li><strong>监控系统资源使用情况增加报警设置。</strong></li>\n<li><strong>注意备份，必要时候回滚。</strong></li>\n<li><strong>灰度发布：</strong> 将服务器集群分成若干部分，每天只发布一部分机器，观察运行稳定没有故障，第二天继续发布一部分机器，持续几天才把整个集群全部发布完毕，期间如果发现问题，只需要回滚已发布的一部分服务器即可</li>\n<li><strong>定期检查/更换硬件：</strong> 如果不是购买的云服务的话，定期还是需要对硬件进行一波检查的，对于一些需要更换或者升级的硬件，要及时更换或者升级。</li>\n<li>……</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高可用"
      ]
    },
    {
      "title": "接口幂等方案总结(付费)",
      "url": "https://javaguide.cn/high-availability/idempotency.html",
      "id": "https://javaguide.cn/high-availability/idempotency.html",
      "summary": "接口幂等 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。 （点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 JavaGuide 的补充完善，两者可以配合使用。 《Java 面试指北》内容概览 为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的。...",
      "content_html": "<p><strong>接口幂等</strong> 相关的面试题为我的<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了<a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a>中。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/mianshizhibei-gaobingfa.png\" alt=\"\"></p>\n<p><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href=\"https://javaguide.cn/#/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的补充完善，两者可以配合使用。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a> 。</p>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> ，干货多多！</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/mianshizhibei-gaobingfa.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高可用"
      ]
    },
    {
      "title": "服务限流详解",
      "url": "https://javaguide.cn/high-availability/limit-request.html",
      "id": "https://javaguide.cn/high-availability/limit-request.html",
      "summary": "针对软件系统来说，限流就是对请求的速率进行限制，避免瞬时的大量请求击垮软件系统。毕竟，软件系统的处理能力是有限的。如果说超过了其处理能力的范围，软件系统可能直接就挂掉了。 限流可能会导致用户的请求无法被正确处理或者无法立即被处理，不过，这往往也是权衡了软件系统的稳定性之后得到的最优解。 现实生活中，处处都有限流的实际应用，就比如排队买票是为了避免大量用...",
      "content_html": "<p>针对软件系统来说，限流就是对请求的速率进行限制，避免瞬时的大量请求击垮软件系统。毕竟，软件系统的处理能力是有限的。如果说超过了其处理能力的范围，软件系统可能直接就挂掉了。</p>\n<p>限流可能会导致用户的请求无法被正确处理或者无法立即被处理，不过，这往往也是权衡了软件系统的稳定性之后得到的最优解。</p>\n<p>现实生活中，处处都有限流的实际应用，就比如排队买票是为了避免大量用户涌入购票而导致售票员无法处理。</p>\n<h2>常见限流算法有哪些？</h2>\n<p>简单介绍 4 种非常好理解并且容易实现的限流算法！</p>\n<blockquote>\n<p>图片来源于 InfoQ 的一篇文章<a href=\"https://www.infoq.cn/article/Qg2tX8fyw5Vt-f3HH673\" target=\"_blank\" rel=\"noopener noreferrer\">《分布式服务限流实战，已经为你排好坑了》</a>。</p>\n</blockquote>\n<h3>固定窗口计数器算法</h3>\n<p>固定窗口其实就是时间窗口，其原理是将时间划分为固定大小的窗口，在每个窗口内限制请求的数量或速率，即固定窗口计数器算法规定了系统单位时间处理的请求数量。</p>\n<p>假如我们规定系统中某个接口 1 分钟只能被访问 33 次的话，使用固定窗口计数器算法的实现思路如下：</p>\n<ul>\n<li>将时间划分固定大小窗口，这里是 1 分钟一个窗口。</li>\n<li>给定一个变量 <code>counter</code> 来记录当前接口处理的请求数量，初始值为 0（代表接口当前 1 分钟内还未处理请求）。</li>\n<li>1 分钟之内每处理一个请求之后就将 <code>counter+1</code> ，当 <code>counter=33</code> 之后（也就是说在这 1 分钟内接口已经被访问 33 次的话），后续的请求就会被全部拒绝。</li>\n<li>等到 1 分钟结束后，将 <code>counter</code> 重置 0，重新开始计数。</li>\n</ul>\n<p><img src=\"https://static001.infoq.cn/resource/image/8d/15/8ded7a2b90e1482093f92fff555b3615.png\" alt=\"固定窗口计数器算法\"></p>\n<p>优点：实现简单，易于理解。</p>\n<p>缺点：</p>\n<ul>\n<li>限流不够平滑。例如，我们限制某个接口每分钟只能访问 30 次，假设前 30 秒就有 30 个请求到达的话，那后续 30 秒将无法处理请求，这是不可取的，用户体验极差！</li>\n<li>无法保证限流速率，因而无法应对突然激增的流量。例如，我们限制某个接口 1 分钟只能访问 1000 次，该接口的 QPS 为 500，前 55s 这个接口 1 个请求没有接收，后 1s 突然接收了 1000 个请求。然后，在当前场景下，这 1000 个请求在 1s 内是没办法被处理的，系统直接就被瞬时的大量请求给击垮了。</li>\n</ul>\n<h3>滑动窗口计数器算法</h3>\n<p><strong>滑动窗口计数器算法</strong> 算的上是固定窗口计数器算法的升级版，限流的颗粒度更小。</p>\n<p>滑动窗口计数器算法相比于固定窗口计数器算法的优化在于：<strong>它把时间以一定比例分片</strong> 。</p>\n<p>例如我们的接口限流每分钟处理 60 个请求，我们可以把 1 分钟分为 60 个窗口。每隔 1 秒移动一次，每个窗口一秒只能处理不大于 <code>60(请求数)/60（窗口数）</code> 的请求， 如果当前窗口的请求计数总和超过了限制的数量的话就不再处理其他请求。</p>\n<p>很显然， <strong>当滑动窗口的格子划分的越多，滑动窗口的滚动就越平滑，限流的统计就会越精确。</strong></p>\n<p><img src=\"https://static001.infoq.cn/resource/image/ae/15/ae4d3cd14efb8dc7046d691c90264715.png\" alt=\"滑动窗口计数器算法\"></p>\n<p>优点：</p>\n<ul>\n<li>相比于固定窗口算法，滑动窗口计数器算法可以应对突然激增的流量。</li>\n<li>相比于固定窗口算法，滑动窗口计数器算法的颗粒度更小，可以提供更精确的限流控制。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>与固定窗口计数器算法类似，滑动窗口计数器算法依然存在限流不够平滑的问题。</li>\n<li>相比较于固定窗口计数器算法，滑动窗口计数器算法实现和理解起来更复杂一些。</li>\n</ul>\n<h3>漏桶算法</h3>\n<p>我们可以把发请求的动作比作成注水到桶中，我们处理请求的过程可以比喻为漏桶漏水。我们往桶中以任意速率流入水，以一定速率流出水。当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。</p>\n<p>如果想要实现这个算法的话也很简单，准备一个队列用来保存请求，然后我们定期从队列中拿请求来执行就好了（和消息队列削峰/限流的思想是一样的）。</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/75/03/75938d1010138ce66e38c6ed0392f103.png\" alt=\"漏桶算法\"></p>\n<p>优点：</p>\n<ul>\n<li>实现简单，易于理解。</li>\n<li>可以控制限流速率，避免网络拥塞和系统过载。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>无法应对突然激增的流量，因为只能以固定的速率处理请求，对系统资源利用不够友好。</li>\n<li>桶流入水（发请求）的速率如果一直大于桶流出水（处理请求）的速率的话，那么桶会一直是满的，一部分新的请求会被丢弃，导致服务质量下降。</li>\n</ul>\n<p>实际业务场景中，基本不会使用漏桶算法。</p>\n<h3>令牌桶算法</h3>\n<p>令牌桶算法也比较简单。和漏桶算法算法一样，我们的主角还是桶（这限流算法和桶过不去啊）。不过现在桶里装的是令牌了，请求在被处理之前需要拿到一个令牌，请求处理完毕之后将这个令牌丢弃（删除）。我们根据限流大小，按照一定的速率往桶里添加令牌。如果桶装满了，就不能继续往里面继续添加令牌了。</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/ec/93/eca0e5eaa35dac938c673fecf2ec9a93.png\" alt=\"令牌桶算法\"></p>\n<p>优点：</p>\n<ul>\n<li>可以限制平均速率和应对突然激增的流量。</li>\n<li>可以动态调整生成令牌的速率。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>如果令牌产生速率和桶的容量设置不合理，可能会出现问题比如大量的请求被丢弃、系统过载。</li>\n<li>相比于其他限流算法，实现和理解起来更复杂一些。</li>\n</ul>\n<h2>针对什么来进行限流？</h2>\n<p>实际项目中，还需要确定限流对象，也就是针对什么来进行限流。常见的限流对象如下：</p>\n<ul>\n<li>IP ：针对 IP 进行限流，适用面较广，简单粗暴。</li>\n<li>业务 ID：挑选唯一的业务 ID 以实现更针对性地限流。例如，基于用户 ID 进行限流。</li>\n<li>个性化：根据用户的属性或行为，进行不同的限流策略。例如， VIP 用户不限流，而普通用户限流。根据系统的运行指标（如 QPS、并发调用数、系统负载等），动态调整限流策略。例如，当系统负载较高的时候，控制每秒通过的请求减少。</li>\n</ul>\n<p>针对 IP 进行限流是目前比较常用的一个方案。不过，实际应用中需要注意用户真实 IP 地址的正确获取。常用的真实 IP 获取方法有 X-Forwarded-For 和 TCP Options 字段承载真实源 IP 信息。虽然 X-Forwarded-For 字段可能会被伪造，但因为其实现简单方便，很多项目还是直接用的这种方法。</p>\n<p>除了我上面介绍到的限流对象之外，还有一些其他较为复杂的限流对象策略，比如阿里的 Sentinel 还支持 <a href=\"https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6#%E5%9F%BA%E4%BA%8E%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6\" target=\"_blank\" rel=\"noopener noreferrer\">基于调用关系的限流</a>（包括基于调用方限流、基于调用链入口限流、关联流量限流等）以及更细维度的 <a href=\"https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81\" target=\"_blank\" rel=\"noopener noreferrer\">热点参数限流</a>（实时的统计热点参数并针对热点参数的资源调用进行流量控制）。</p>\n<p>另外，一个项目可以根据具体的业务需求选择多种不同的限流对象搭配使用。</p>\n<h2>单机限流怎么做？</h2>\n<p>单机限流针对的是单体架构应用。</p>\n<p>单机限流可以直接使用 Google Guava 自带的限流工具类 <code>RateLimiter</code> 。 <code>RateLimiter</code> 基于令牌桶算法，可以应对突发流量。</p>\n<blockquote>\n<p>Guava 地址：<a href=\"https://github.com/google/guava\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/google/guava</a></p>\n</blockquote>\n<p>除了最基本的令牌桶算法(平滑突发限流)实现之外，Guava 的<code>RateLimiter</code>还提供了 <strong>平滑预热限流</strong> 的算法实现。</p>\n<p>平滑突发限流就是按照指定的速率放令牌到桶里，而平滑预热限流会有一段预热时间，预热时间之内，速率会逐渐提升到配置的速率。</p>\n<p>我们下面通过两个简单的小例子来详细了解吧！</p>\n<p>我们直接在项目中引入 Guava 相关的依赖即可使用。</p>\n<div class=\"language-xml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;com.google.guava&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;guava&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;31.0.1-jre&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>下面是一个简单的 Guava 平滑突发限流的 Demo。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> com.google.common.util.concurrent.RateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * 微信搜 JavaGuide 回复\"面试突击\"即可免费领取个人原创的 Java 面试手册</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">@author</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> Guide哥</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * @date 2021/10/08 19:12</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> **/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> RateLimiterDemo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 1s 放 5 个令牌到桶里也就是 0.2s 放 1个令牌到桶里</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        RateLimiter</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> rateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> RateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">create</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            double</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sleepingTime</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> rateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">acquire</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">printf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"get 1 tokens: %ss%n\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, sleepingTime);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.0s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.188413s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.197811s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.198316s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.19864s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.199363s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.193997s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.199623s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.199357s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.195676s</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>下面是一个简单的 Guava 平滑预热限流的 Demo。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> com.google.common.util.concurrent.RateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.concurrent.TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * 微信搜 JavaGuide 回复\"面试突击\"即可免费领取个人原创的 Java 面试手册</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">@author</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> Guide哥</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * @date 2021/10/08 19:12</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> **/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> RateLimiterDemo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 1s 放 5 个令牌到桶里也就是 0.2s 放 1个令牌到桶里</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 预热时间为3s,也就说刚开始的 3s 内发牌速率会逐渐提升到 0.2s 放 1 个令牌到桶里</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        RateLimiter</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> rateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> RateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">create</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">SECONDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            double</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sleepingTime</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> rateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">acquire</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">printf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"get 1 tokens: %sds%n\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, sleepingTime);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.0s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.561919s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.516931s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.463798s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.41286s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.356172s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.300489s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.252545s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.203996s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tokens:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0.198359s</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>另外，<strong>Bucket4j</strong> 是一个非常不错的基于令牌/漏桶算法的限流库。</p>\n<blockquote>\n<p>Bucket4j 地址：<a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/vladimir-bukhtoyarov/bucket4j</a></p>\n</blockquote>\n<p>相对于，Guava 的限流工具类来说，Bucket4j 提供的限流功能更加全面。不仅支持单机限流和分布式限流，还可以集成监控，搭配 Prometheus 和 Grafana 使用。</p>\n<p>不过，毕竟 Guava 也只是一个功能全面的工具类库，其提供的开箱即用的限流功能在很多单机场景下还是比较实用的。</p>\n<p>Spring Cloud Gateway 中自带的单机限流的早期版本就是基于 Bucket4j 实现的。后来，替换成了 <strong>Resilience4j</strong>。</p>\n<p>Resilience4j 是一个轻量级的容错组件，其灵感来自于 Hystrix。自<a href=\"https://github.com/Netflix/Hystrix/commit/a7df971cbaddd8c5e976b3cc5f14013fe6ad00e6\" target=\"_blank\" rel=\"noopener noreferrer\">Netflix 宣布不再积极开发 Hystrix</a> 之后，Spring 官方和 Netflix 都更推荐使用 Resilience4j 来做限流熔断。</p>\n<blockquote>\n<p>Resilience4j 地址: <a href=\"https://github.com/resilience4j/resilience4j\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/resilience4j/resilience4j</a></p>\n</blockquote>\n<p>一般情况下，为了保证系统的高可用，项目的限流和熔断都是要一起做的。</p>\n<p>Resilience4j 不仅提供限流，还提供了熔断、负载保护、自动重试等保障系统高可用开箱即用的功能。并且，Resilience4j 的生态也更好，很多网关都使用 Resilience4j 来做限流熔断的。</p>\n<p>因此，在绝大部分场景下 Resilience4j 或许会是更好的选择。如果是一些比较简单的限流场景的话，Guava 或者 Bucket4j 也是不错的选择。</p>\n<h2>分布式限流怎么做？</h2>\n<p>分布式限流针对的分布式/微服务应用架构应用，在这种架构下，单机限流就不适用了，因为会存在多种服务，并且一种服务也可能会被部署多份。</p>\n<p>分布式限流常见的方案：</p>\n<ul>\n<li><strong>借助中间件限流</strong>：可以借助 Sentinel 或者使用 Redis 来自己实现对应的限流逻辑。</li>\n<li><strong>网关层限流</strong>：比较常用的一种方案，直接在网关层把限流给安排上了。不过，通常网关层限流通常也需要借助到中间件/框架。就比如 Spring Cloud Gateway 的分布式限流实现<code>RedisRateLimiter</code>就是基于 Redis+Lua 来实现的，再比如 Spring Cloud Gateway 还可以整合 Sentinel 来做限流。</li>\n</ul>\n<p>如果你要基于 Redis 来手动实现限流逻辑的话，建议配合 Lua 脚本来做。</p>\n<p><strong>为什么建议 Redis+Lua 的方式？</strong> 主要有两点原因：</p>\n<ul>\n<li><strong>减少了网络开销</strong>：我们可以利用 Lua 脚本来批量执行多条 Redis 命令，这些 Redis 命令会被提交到 Redis 服务器一次性执行完成，大幅减小了网络开销。</li>\n<li><strong>原子性</strong>：一段 Lua 脚本可以视作一条命令执行，一段 Lua 脚本执行过程中不会有其他脚本或 Redis 命令同时执行，保证了操作不会被其他指令插入或打扰。</li>\n</ul>\n<p>我这里就不放具体的限流脚本代码了，网上也有很多现成的优秀的限流脚本供你参考，就比如 Apache 网关项目 ShenYu 的 RateLimiter 限流插件就基于 Redis + Lua 实现了令牌桶算法/并发令牌桶算法、漏桶算法、滑动窗口算法。</p>\n<blockquote>\n<p>ShenYu 地址: <a href=\"https://github.com/apache/incubator-shenyu\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/apache/incubator-shenyu</a></p>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-availability/limit-request/shenyu-ratelimit-lua-scripts.png\" alt=\"ShenYu 限流脚本\"></p>\n<p>另外，如果不想自己写 Lua 脚本的话，也可以直接利用 Redisson 中的 <code>RRateLimiter</code> 来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。</p>\n<p>Redisson 是一个开源的 Java 语言 Redis 客户端，提供了很多开箱即用的功能，比如 Java 中常用的数据结构实现、分布式锁、延迟队列等等。并且，Redisson 还支持 Redis 单机、Redis Sentinel、Redis Cluster 等多种部署架构。</p>\n<p><code>RRateLimiter</code> 的使用方式非常简单。我们首先需要获取一个<code>RRateLimiter</code>对象，直接通过 Redisson 客户端获取即可。然后，设置限流规则就好。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 创建一个 Redisson 客户端实例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">RedissonClient</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> redissonClient </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Redisson</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">create</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 获取一个名为 \"javaguide.limiter\" 的限流器对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">RRateLimiter</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> rateLimiter </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> redissonClient</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getRateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"javaguide.limiter\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 尝试设置限流器的速率为每小时 100 次</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// RateType 有两种，OVERALL是全局限流,ER_CLIENT是单Client限流（可以认为就是单机限流）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">rateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">trySetRate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">RateType</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">OVERALL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">RateIntervalUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">HOURS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接下来我们调用<code>acquire()</code>方法或<code>tryAcquire()</code>方法即可获取许可。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 获取一个许可，如果超过限流器的速率则会等待</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// acquire()是同步方法，对应的异步方法：acquireAsync()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">rateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">acquire</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 尝试在 5 秒内获取一个许可，如果成功则返回 true，否则返回 false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// tryAcquire()是同步方法，对应的异步方法：tryAcquireAsync()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">boolean</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> res </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> rateLimiter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tryAcquire</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">SECONDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>总结</h2>\n<p>这篇文章主要介绍了常见的限流算法、限流对象的选择以及单机限流和分布式限流分别应该怎么做。</p>\n<h2>参考</h2>\n<ul>\n<li>服务治理之轻量级熔断框架 Resilience4j：<a href=\"https://xie.infoq.cn/article/14786e571c1a4143ad1ef8f19\" target=\"_blank\" rel=\"noopener noreferrer\">https://xie.infoq.cn/article/14786e571c1a4143ad1ef8f19</a></li>\n<li>超详细的 Guava RateLimiter 限流原理解析：<a href=\"https://cloud.tencent.com/developer/article/1408819\" target=\"_blank\" rel=\"noopener noreferrer\">https://cloud.tencent.com/developer/article/1408819</a></li>\n<li>实战 Spring Cloud Gateway 之限流篇 👍：<a href=\"https://www.aneasystone.com/archives/2020/08/spring-cloud-gateway-current-limiting.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.aneasystone.com/archives/2020/08/spring-cloud-gateway-current-limiting.html</a></li>\n<li>详解 Redisson 分布式限流的实现原理：<a href=\"https://juejin.cn/post/7199882882138898489\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7199882882138898489</a></li>\n<li>一文详解 Java 限流接口实现 - 阿里云开发者：<a href=\"https://mp.weixin.qq.com/s/A5VYjstIDeVvizNK2HkrTQ\" target=\"_blank\" rel=\"noopener noreferrer\">https://mp.weixin.qq.com/s/A5VYjstIDeVvizNK2HkrTQ</a></li>\n<li>分布式限流方案的探索与实践 - 腾讯云开发者：<a href=\"https://mp.weixin.qq.com/s/MJbEQROGlThrHSwCjYB_4Q\" target=\"_blank\" rel=\"noopener noreferrer\">https://mp.weixin.qq.com/s/MJbEQROGlThrHSwCjYB_4Q</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://static001.infoq.cn/resource/image/8d/15/8ded7a2b90e1482093f92fff555b3615.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高可用"
      ]
    },
    {
      "title": "性能测试入门",
      "url": "https://javaguide.cn/high-availability/performance-test.html",
      "id": "https://javaguide.cn/high-availability/performance-test.html",
      "summary": "性能测试一般情况下都是由测试这个职位去做的，那还需要我们开发学这个干嘛呢？了解性能测试的指标、分类以及工具等知识有助于我们更好地去写出性能更好的程序，另外作为开发这个角色，如果你会性能测试的话，相信也会为你的履历加分不少。 这篇文章是我会结合自己的实际经历以及在测试这里取的经所得，除此之外，我还借鉴了一些优秀书籍，希望对你有帮助。 不同角色看网站性能 ...",
      "content_html": "<p>性能测试一般情况下都是由测试这个职位去做的，那还需要我们开发学这个干嘛呢？了解性能测试的指标、分类以及工具等知识有助于我们更好地去写出性能更好的程序，另外作为开发这个角色，如果你会性能测试的话，相信也会为你的履历加分不少。</p>\n<p>这篇文章是我会结合自己的实际经历以及在测试这里取的经所得，除此之外，我还借鉴了一些优秀书籍，希望对你有帮助。</p>\n<h2>不同角色看网站性能</h2>\n<h3>用户</h3>\n<p>当用户打开一个网站的时候，最关注的是什么？当然是网站响应速度的快慢。比如我们点击了淘宝的主页，淘宝需要多久将首页的内容呈现在我的面前，我点击了提交订单按钮需要多久返回结果等等。</p>\n<p>所以，用户在体验我们系统的时候往往根据你的响应速度的快慢来评判你的网站的性能。</p>\n<h3>开发人员</h3>\n<p>用户与开发人员都关注速度，这个速度实际上就是我们的系统<strong>处理用户请求的速度</strong>。</p>\n<p>开发人员一般情况下很难直观的去评判自己网站的性能，我们往往会根据网站当前的架构以及基础设施情况给一个大概的值,比如：</p>\n<ol>\n<li>项目架构是分布式的吗？</li>\n<li>用到了缓存和消息队列没有？</li>\n<li>高并发的业务有没有特殊处理？</li>\n<li>数据库设计是否合理？</li>\n<li>系统用到的算法是否还需要优化？</li>\n<li>系统是否存在内存泄露的问题？</li>\n<li>项目使用的 Redis 缓存多大？服务器性能如何？用的是机械硬盘还是固态硬盘？</li>\n<li>……</li>\n</ol>\n<h3>测试人员</h3>\n<p>测试人员一般会根据性能测试工具来测试，然后一般会做出一个表格。这个表格可能会涵盖下面这些重要的内容：</p>\n<ol>\n<li>响应时间；</li>\n<li>请求成功率；</li>\n<li>吞吐量；</li>\n<li>……</li>\n</ol>\n<h3>运维人员</h3>\n<p>运维人员会倾向于根据基础设施和资源的利用率来判断网站的性能，比如我们的服务器资源使用是否合理、数据库资源是否存在滥用的情况、当然，这是传统的运维人员，现在 Devops 火起来后，单纯干运维的很少了。我们这里暂且还保留有这个角色。</p>\n<h2>性能测试需要注意的点</h2>\n<p>几乎没有文章在讲性能测试的时候提到这个问题，大家都会讲如何去性能测试，有哪些性能测试指标这些东西。</p>\n<h3>了解系统的业务场景</h3>\n<p><strong>性能测试之前更需要你了解当前的系统的业务场景。</strong> 对系统业务了解的不够深刻，我们很容易犯测试方向偏执的错误，从而导致我们忽略了对系统某些更需要性能测试的地方进行测试。比如我们的系统可以为用户提供发送邮件的功能，用户配置成功邮箱后只需输入相应的邮箱之后就能发送，系统每天大概能处理上万次发邮件的请求。很多人看到这个可能就直接开始使用相关工具测试邮箱发送接口，但是，发送邮件这个场景可能不是当前系统的性能瓶颈，这么多人用我们的系统发邮件， 还可能有很多人一起发邮件，单单这个场景就这么人用，那用户管理可能才是性能瓶颈吧！</p>\n<h3>历史数据非常有用</h3>\n<p>当前系统所留下的历史数据非常重要，一般情况下，我们可以通过相应的些历史数据初步判定这个系统哪些接口调用的比较多、哪些服务承受的压力最大，这样的话，我们就可以针对这些地方进行更细致的性能测试与分析。</p>\n<p>另外，这些地方也就像这个系统的一个短板一样，优化好了这些地方会为我们的系统带来质的提升。</p>\n<h2>常见性能指标</h2>\n<h3>响应时间</h3>\n<p><strong>响应时间 RT(Response-time)就是用户发出请求到用户收到系统处理结果所需要的时间。</strong></p>\n<p>RT 是一个非常重要且直观的指标，RT 数值大小直接反应了系统处理用户请求速度的快慢。</p>\n<h3>并发数</h3>\n<p><strong>并发数可以简单理解为系统能够同时供多少人访问使用也就是说系统同时能处理的请求数量。</strong></p>\n<p>并发数反应了系统的负载能力。</p>\n<h3>QPS 和 TPS</h3>\n<ul>\n<li><strong>QPS（Query Per Second）</strong> ：服务器每秒可以执行的查询次数；</li>\n<li><strong>TPS（Transaction Per Second）</strong> ：服务器每秒处理的事务数（这里的一个事务可以理解为客户发出请求到收到服务器的过程）；</li>\n</ul>\n<p>书中是这样描述 QPS 和 TPS 的区别的。</p>\n<blockquote>\n<p>QPS vs TPS：QPS 基本类似于 TPS，但是不同的是，对于一个页面的一次访问，形成一个 TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“QPS”之中。如，访问一个页面会请求服务器 2 次，一次访问，产生一个“T”，产生 2 个“Q”。</p>\n</blockquote>\n<h3>吞吐量</h3>\n<p><strong>吞吐量指的是系统单位时间内系统处理的请求数量。</strong></p>\n<p>一个系统的吞吐量与请求对系统的资源消耗等紧密关联。请求对系统资源消耗越多，系统吞吐能力越低，反之则越高。</p>\n<p>TPS、QPS 都是吞吐量的常用量化指标。</p>\n<ul>\n<li><strong>QPS（TPS）</strong> = 并发数/平均响应时间(RT)</li>\n<li><strong>并发数</strong> = QPS * 平均响应时间(RT)</li>\n</ul>\n<h2>系统活跃度指标</h2>\n<h3>PV(Page View)</h3>\n<p>访问量, 即页面浏览量或点击量，衡量网站用户访问的网页数量；在一定统计周期内用户每打开或刷新一个页面就记录 1 次，多次打开或刷新同一页面则浏览量累计。UV 从网页打开的数量/刷新的次数的角度来统计的。</p>\n<h3>UV(Unique Visitor)</h3>\n<p>独立访客，统计 1 天内访问某站点的用户数。1 天内相同访客多次访问网站，只计算为 1 个独立访客。UV 是从用户个体的角度来统计的。</p>\n<h3>DAU(Daily Active User)</h3>\n<p>日活跃用户数量。</p>\n<h3>MAU(monthly active users)</h3>\n<p>月活跃用户人数。</p>\n<p>举例：某网站 DAU 为 1200w， 用户日均使用时长 1 小时，RT 为 0.5s，求并发量和 QPS。</p>\n<p>平均并发量 = DAU（1200w）* 日均使用时长（1 小时，3600 秒） /一天的秒数（86400）=1200w/24 = 50w</p>\n<p>真实并发量（考虑到某些时间段使用人数比较少） = DAU（1200w）* 日均使用时长（1 小时，3600 秒） /一天的秒数-访问量比较小的时间段假设为 8 小时（57600）=1200w/16 = 75w</p>\n<p>峰值并发量 = 平均并发量 * 6 = 300w</p>\n<p>QPS = 真实并发量/RT = 75W/0.5=150w/s</p>\n<h2>性能测试分类</h2>\n<h3>性能测试</h3>\n<p>性能测试方法是通过测试工具模拟用户请求系统，目的主要是为了测试系统的性能是否满足要求。通俗地说，这种方法就是要在特定的运行条件下验证系统的能力状态。</p>\n<p>性能测试是你在对系统性能已经有了解的前提之后进行的，并且有明确的性能指标。</p>\n<h3>负载测试</h3>\n<p>对被测试的系统继续加大请求压力，直到服务器的某个资源已经达到饱和了，比如系统的缓存已经不够用了或者系统的响应时间已经不满足要求了。</p>\n<p>负载测试说白点就是测试系统的上限。</p>\n<h3>压力测试</h3>\n<p>不去管系统资源的使用情况，对系统继续加大请求压力，直到服务器崩溃无法再继续提供服务。</p>\n<h3>稳定性测试</h3>\n<p>模拟真实场景，给系统一定压力，看看业务是否能稳定运行。</p>\n<h2>常用性能测试工具</h2>\n<h3>后端常用</h3>\n<p>既然系统设计涉及到系统性能方面的问题，那在面试的时候，面试官就很可能会问：<strong>你是如何进行性能测试的？</strong></p>\n<p>推荐 4 个比较常用的性能测试工具：</p>\n<ol>\n<li><strong>Jmeter</strong> ：Apache JMeter 是 JAVA 开发的性能测试工具。</li>\n<li><strong>LoadRunner</strong>：一款商业的性能测试工具。</li>\n<li><strong>Galtling</strong> ：一款基于 Scala 开发的高性能服务器性能测试工具。</li>\n<li><strong>ab</strong> ：全称为 Apache Bench 。Apache 旗下的一款测试工具，非常实用。</li>\n</ol>\n<p>没记错的话，除了 <strong>LoadRunner</strong> 其他几款性能测试工具都是开源免费的。</p>\n<h3>前端常用</h3>\n<ol>\n<li><strong>Fiddler</strong>：抓包工具，它可以修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是 Web 调试的利器。</li>\n<li><strong>HttpWatch</strong>: 可用于录制 HTTP 请求信息的工具。</li>\n</ol>\n<h2>常见的性能优化策略</h2>\n<p>性能优化之前我们需要对请求经历的各个环节进行分析，排查出可能出现性能瓶颈的地方，定位问题。</p>\n<p>下面是一些性能优化时，我经常拿来自问的一些问题：</p>\n<ol>\n<li>系统是否需要缓存？</li>\n<li>系统架构本身是不是就有问题？</li>\n<li>系统是否存在死锁的地方？</li>\n<li>系统是否存在内存泄漏？（Java 的自动回收内存虽然很方便，但是，有时候代码写的不好真的会造成内存泄漏）</li>\n<li>数据库索引使用是否合理？</li>\n<li>……</li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高可用"
      ]
    },
    {
      "title": "冗余设计详解",
      "url": "https://javaguide.cn/high-availability/redundancy.html",
      "id": "https://javaguide.cn/high-availability/redundancy.html",
      "summary": "冗余设计是保证系统和数据高可用的最常的手段。 对于服务来说，冗余的思想就是相同的服务部署多份，如果正在使用的服务突然挂掉的话，系统可以很快切换到备份服务上，大大减少系统的不可用时间，提高系统的可用性。 对于数据来说，冗余的思想就是相同的数据备份多份，这样就可以很简单地提高数据的安全性。 实际上，日常生活中就有非常多的冗余思想的应用。 拿我自己来说，我对...",
      "content_html": "<p>冗余设计是保证系统和数据高可用的最常的手段。</p>\n<p>对于服务来说，冗余的思想就是相同的服务部署多份，如果正在使用的服务突然挂掉的话，系统可以很快切换到备份服务上，大大减少系统的不可用时间，提高系统的可用性。</p>\n<p>对于数据来说，冗余的思想就是相同的数据备份多份，这样就可以很简单地提高数据的安全性。</p>\n<p>实际上，日常生活中就有非常多的冗余思想的应用。</p>\n<p>拿我自己来说，我对于重要文件的保存方法就是冗余思想的应用。我日常所使用的重要文件都会同步一份在 GitHub 以及个人云盘上，这样就可以保证即使电脑硬盘损坏，我也可以通过 GitHub 或者个人云盘找回自己的重要文件。</p>\n<p>高可用集群（High Availability Cluster，简称 HA Cluster）、同城灾备、异地灾备、同城多活和异地多活是冗余思想在高可用系统设计中最典型的应用。</p>\n<ul>\n<li><strong>高可用集群</strong> : 同一份服务部署两份或者多份，当正在使用的服务突然挂掉的话，可以切换到另外一台服务，从而保证服务的高可用。</li>\n<li><strong>同城灾备</strong>：一整个集群可以部署在同一个机房，而同城灾备中相同服务部署在同一个城市的不同机房中。并且，备用服务不处理请求。这样可以避免机房出现意外情况比如停电、火灾。</li>\n<li><strong>异地灾备</strong>：类似于同城灾备，不同的是，相同服务部署在异地（通常距离较远，甚至是在不同的城市或者国家）的不同机房中</li>\n<li><strong>同城多活</strong>：类似于同城灾备，但备用服务可以处理请求，这样可以充分利用系统资源，提高系统的并发。</li>\n<li><strong>异地多活</strong> : 将服务部署在异地的不同机房中，并且，它们可以同时对外提供服务。</li>\n</ul>\n<p>高可用集群单纯是服务的冗余，并没有强调地域。同城灾备、异地灾备、同城多活和异地多活实现了地域上的冗余。</p>\n<p>同城和异地的主要区别在于机房之间的距离。异地通常距离较远，甚至是在不同的城市或者国家。</p>\n<p>和传统的灾备设计相比，同城多活和异地多活最明显的改变在于“多活”，即所有站点都是同时在对外提供服务的。异地多活是为了应对突发状况比如火灾、地震等自然或者人为灾害。</p>\n<p>光做好冗余还不够，必须要配合上 <strong>故障转移</strong> 才可以！ 所谓故障转移，简单来说就是实现不可用服务快速且自动地切换到可用服务，整个过程不需要人为干涉。</p>\n<p>举个例子：哨兵模式的 Redis 集群中，如果 Sentinel（哨兵） 检测到 master 节点出现故障的话， 它就会帮助我们实现故障转移，自动将某一台 slave 升级为 master，确保整个 Redis 系统的可用性。整个过程完全自动，不需要人工介入。我在<a href=\"https://www.yuque.com/docs/share/f37fc804-bfe6-4b0d-b373-9c462188fec7\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a>的「技术面试题篇」中的数据库部分详细介绍了 Redis 集群相关的知识点&amp;面试题，感兴趣的小伙伴可以看看。</p>\n<p>再举个例子：Nginx 可以结合 Keepalived 来实现高可用。如果 Nginx 主服务器宕机的话，Keepalived 可以自动进行故障转移，备用 Nginx 主服务器升级为主服务。并且，这个切换对外是透明的，因为使用的虚拟 IP，虚拟 IP 不会改变。我在<a href=\"https://www.yuque.com/docs/share/f37fc804-bfe6-4b0d-b373-9c462188fec7\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a>的「技术面试题篇」中的「服务器」部分详细介绍了 Nginx 相关的知识点&amp;面试题，感兴趣的小伙伴可以看看。</p>\n<p>异地多活架构实施起来非常难，需要考虑的因素非常多。本人不才，实际项目中并没有实践过异地多活架构，我对其了解还停留在书本知识。</p>\n<p>如果你想要深入学习异地多活相关的知识，我这里推荐几篇我觉得还不错的文章：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/T6mMDdtTfBuIiEowCpqu6Q\" target=\"_blank\" rel=\"noopener noreferrer\">搞懂异地多活，看这篇就够了- 水滴与银弹 - 2021</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hMD-IS__4JE5_nQhYPYSTg\" target=\"_blank\" rel=\"noopener noreferrer\">四步构建异地多活</a></li>\n<li><a href=\"http://gk.link/a/10pKZ\" target=\"_blank\" rel=\"noopener noreferrer\">《从零开始学架构》— 28 | 业务高可用的保障：异地多活架构</a></li>\n</ul>\n<p>不过，这些文章大多也都是在介绍概念知识。目前，网上还缺少真正介绍具体要如何去实践落地异地多活架构的资料。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高可用"
      ]
    },
    {
      "title": "超时&重试详解",
      "url": "https://javaguide.cn/high-availability/timeout-and-retry.html",
      "id": "https://javaguide.cn/high-availability/timeout-and-retry.html",
      "summary": "由于网络问题、系统或者服务内部的 Bug、服务器宕机、操作系统崩溃等问题的不确定性，我们的系统或者服务永远不可能保证时刻都是可用的状态。 为了最大限度的减小系统或者服务出现故障之后带来的影响，我们需要用到的 超时（Timeout） 和 重试（Retry） 机制。 想要把超时和重试机制讲清楚其实很简单，因为它俩本身就不是什么高深的概念。 虽然超时和重试机...",
      "content_html": "<p>由于网络问题、系统或者服务内部的 Bug、服务器宕机、操作系统崩溃等问题的不确定性，我们的系统或者服务永远不可能保证时刻都是可用的状态。</p>\n<p>为了最大限度的减小系统或者服务出现故障之后带来的影响，我们需要用到的 <strong>超时（Timeout）</strong> 和 <strong>重试（Retry）</strong> 机制。</p>\n<p>想要把超时和重试机制讲清楚其实很简单，因为它俩本身就不是什么高深的概念。</p>\n<p>虽然超时和重试机制的思想很简单，但是它俩是真的非常实用。你平时接触到的绝大部分涉及到远程调用的系统或者服务都会应用超时和重试机制。尤其是对于微服务系统来说，正确设置超时和重试非常重要。单体服务通常只涉及数据库、缓存、第三方 API、中间件等的网络调用，而微服务系统内部各个服务之间还存在着网络调用。</p>\n<h2>超时机制</h2>\n<h3>什么是超时机制？</h3>\n<p>超时机制说的是当一个请求超过指定的时间（比如 1s）还没有被处理的话，这个请求就会直接被取消并抛出指定的异常或者错误（比如 <code>504 Gateway Timeout</code>）。</p>\n<p>我们平时接触到的超时可以简单分为下面 2 种：</p>\n<ul>\n<li><strong>连接超时（ConnectTimeout）</strong>：客户端与服务端建立连接的最长等待时间。</li>\n<li><strong>读取超时（ReadTimeout）</strong>：客户端和服务端已经建立连接，客户端等待服务端处理完请求的最长时间。实际项目中，我们关注比较多的还是读取超时。</li>\n</ul>\n<p>一些连接池客户端框架中可能还会有获取连接超时和空闲连接清理超时。</p>\n<p>如果没有设置超时的话，就可能会导致服务端连接数爆炸和大量请求堆积的问题。</p>\n<p>这些堆积的连接和请求会消耗系统资源，影响新收到的请求的处理。严重的情况下，甚至会拖垮整个系统或者服务。</p>\n<p>我之前在实际项目就遇到过类似的问题，整个网站无法正常处理请求，服务器负载直接快被拉满。后面发现原因是项目超时设置错误加上客户端请求处理异常，导致服务端连接数直接接近 40w+，这么多堆积的连接直接把系统干趴了。</p>\n<h3>超时时间应该如何设置？</h3>\n<p>超时到底设置多长时间是一个难题！超时值设置太高或者太低都有风险。如果设置太高的话，会降低超时机制的有效性，比如你设置超时为 10s 的话，那设置超时就没啥意义了，系统依然可能会出现大量慢请求堆积的问题。如果设置太低的话，就可能会导致在系统或者服务在某些处理请求速度变慢的情况下（比如请求突然增多），大量请求重试（超时通常会结合重试）继续加重系统或者服务的压力，进而导致整个系统或者服务被拖垮的问题。</p>\n<p>通常情况下，我们建议读取超时设置为 <strong>1500ms</strong> ,这是一个比较普适的值。如果你的系统或者服务对于延迟比较敏感的话，那读取超时值可以适当在 <strong>1500ms</strong> 的基础上进行缩短。反之，读取超时值也可以在 <strong>1500ms</strong> 的基础上进行加长，不过，尽量还是不要超过 <strong>1500ms</strong> 。连接超时可以适当设置长一些，建议在 <strong>1000ms ~ 5000ms</strong> 之内。</p>\n<p>没有银弹！超时值具体该设置多大，还是要根据实际项目的需求和情况慢慢调整优化得到。</p>\n<p>更上一层，参考<a href=\"https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html\" target=\"_blank\" rel=\"noopener noreferrer\">美团的 Java 线程池参数动态配置</a>思想，我们也可以将超时弄成可配置化的参数而不是固定的，比较简单的一种办法就是将超时的值放在配置中心中。这样的话，我们就可以根据系统或者服务的状态动态调整超时值了。</p>\n<h2>重试机制</h2>\n<h3>什么是重试机制？</h3>\n<p>重试机制一般配合超时机制一起使用，指的是多次发送相同的请求来避免瞬态故障和偶然性故障。</p>\n<p>瞬态故障可以简单理解为某一瞬间系统偶然出现的故障，并不会持久。偶然性故障可以理解为哪些在某些情况下偶尔出现的故障，频率通常较低。</p>\n<p>重试的核心思想是通过消耗服务器的资源来尽可能获得请求更大概率被成功处理。由于瞬态故障和偶然性故障是很少发生的，因此，重试对于服务器的资源消耗几乎是可以被忽略的。</p>\n<h3>常见的重试策略有哪些？</h3>\n<p>常见的重试策略有两种：</p>\n<ol>\n<li><strong>固定间隔时间重试</strong>：每次重试之间都使用相同的时间间隔，比如每隔 1.5 秒进行一次重试。这种重试策略的优点是实现起来比较简单，不需要考虑重试次数和时间的关系，也不需要维护额外的状态信息。但是这种重试策略的缺点是可能会导致重试过于频繁或过于稀疏，从而影响系统的性能和效率。如果重试间隔太短，可能会对目标系统造成过大的压力，导致雪崩效应；如果重试间隔太长，可能会导致用户等待时间过长，影响用户体验。</li>\n<li><strong>梯度间隔重试</strong>：根据重试次数的增加去延长下次重试时间，比如第一次重试间隔为 1 秒，第二次为 2 秒，第三次为 4 秒，以此类推。这种重试策略的优点是能够有效提高重试成功的几率（随着重试次数增加，但是重试依然不成功，说明目标系统恢复时间比较长，因此可以根据重试次数延长下次重试时间），也能通过柔性化的重试避免对下游系统造成更大压力。但是这种重试策略的缺点是实现起来比较复杂，需要考虑重试次数和时间的关系，以及设置合理的上限和下限值。另外，这种重试策略也可能会导致用户等待时间过长，影响用户体验。</li>\n</ol>\n<p>这两种适合的场景各不相同。固定间隔时间重试适用于目标系统恢复时间比较稳定和可预测的场景，比如网络波动或服务重启。梯度间隔重试适用于目标系统恢复时间比较长或不可预测的场景，比如网络故障和服务故障。</p>\n<h3>重试的次数如何设置？</h3>\n<p>重试的次数不宜过多，否则依然会对系统负载造成比较大的压力。</p>\n<p>重试的次数通常建议设为 3 次。大部分情况下，我们还是更建议使用梯度间隔重试策略，比如说我们要重试 3 次的话，第 1 次请求失败后，等待 1 秒再进行重试，第 2 次请求失败后，等待 2 秒再进行重试，第 3 次请求失败后，等待 3 秒再进行重试。</p>\n<h3>什么是重试幂等？</h3>\n<p>超时和重试机制在实际项目中使用的话，需要注意保证同一个请求没有被多次执行。</p>\n<p>什么情况下会出现一个请求被多次执行呢？客户端等待服务端完成请求完成超时但此时服务端已经执行了请求，只是由于短暂的网络波动导致响应在发送给客户端的过程中延迟了。</p>\n<p>举个例子：用户支付购买某个课程，结果用户支付的请求由于重试的问题导致用户购买同一门课程支付了两次。对于这种情况，我们在执行用户购买课程的请求的时候需要判断一下用户是否已经购买过。这样的话，就不会因为重试的问题导致重复购买了。</p>\n<h3>Java 中如何实现重试？</h3>\n<p>如果要手动编写代码实现重试逻辑的话，可以通过循环（例如 while 或 for 循环）或者递归实现。不过，一般不建议自己动手实现，有很多第三方开源库提供了更完善的重试机制实现，例如 Spring Retry、Resilience4j、Guava Retrying。</p>\n<h2>参考</h2>\n<ul>\n<li>微服务之间调用超时的设置治理：<a href=\"https://www.infoq.cn/article/eyrslar53l6hjm5yjgyx\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.infoq.cn/article/eyrslar53l6hjm5yjgyx</a></li>\n<li>超时、重试和抖动回退：<a href=\"https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/\" target=\"_blank\" rel=\"noopener noreferrer\">https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高可用"
      ]
    },
    {
      "title": "CDN工作原理详解",
      "url": "https://javaguide.cn/high-performance/cdn.html",
      "id": "https://javaguide.cn/high-performance/cdn.html",
      "summary": "什么是 CDN ？ CDN 全称是 Content Delivery Network/Content Distribution Network，翻译过的意思是 内容分发网络 。 我们可以将内容分发网络拆开来看： 内容：指的是静态资源比如图片、视频、文档、JS、CSS、HTML。 分发网络：指的是将这些静态资源分发到位于多个不同的地理位置机房中的服务器上...",
      "content_html": "<h2>什么是 CDN ？</h2>\n<p><strong>CDN</strong> 全称是 Content Delivery Network/Content Distribution Network，翻译过的意思是 <strong>内容分发网络</strong> 。</p>\n<p>我们可以将内容分发网络拆开来看：</p>\n<ul>\n<li>内容：指的是静态资源比如图片、视频、文档、JS、CSS、HTML。</li>\n<li>分发网络：指的是将这些静态资源分发到位于多个不同的地理位置机房中的服务器上，这样，就可以实现静态资源的就近访问比如北京的用户直接访问北京机房的数据。</li>\n</ul>\n<p>所以，简单来说，<strong>CDN 就是将静态资源分发到多个不同的地方以实现就近访问，进而加快静态资源的访问速度，减轻服务器以及带宽的负担。</strong></p>\n<p>类似于京东建立的庞大的仓储运输体系，京东物流在全国拥有非常多的仓库，仓储网络几乎覆盖全国所有区县。这样的话，用户下单的第一时间，商品就从距离用户最近的仓库，直接发往对应的配送站，再由京东小哥送到你家。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/jingdong-wuliu-cangpei.png\" alt=\"京东仓配系统\"></p>\n<p>你可以将 CDN 看作是服务上一层的特殊缓存服务，分布在全国各地，主要用来处理静态资源的请求。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-101.png\" alt=\"CDN 简易示意图\"></p>\n<p>我们经常拿全站加速和内容分发网络做对比，不要把两者搞混了！全站加速（不同云服务商叫法不同，腾讯云叫 ECDN、阿里云叫 DCDN）既可以加速静态资源又可以加速动态资源，内容分发网络（CDN）主要针对的是 <strong>静态资源</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-aliyun-dcdn.png\" alt=\"阿里云文档：https://help.aliyun.com/document_detail/64836.html\"></p>\n<p>绝大部分公司都会在项目开发中使用 CDN 服务，但很少会有自建 CDN 服务的公司。基于成本、稳定性和易用性考虑，建议直接选择专业的云厂商（比如阿里云、腾讯云、华为云、青云）或者 CDN 厂商（比如网宿、蓝汛）提供的开箱即用的 CDN 服务。</p>\n<p>很多朋友可能要问了：<strong>既然是就近访问，为什么不直接将服务部署在多个不同的地方呢？</strong></p>\n<ul>\n<li>成本太高，需要部署多份相同的服务。</li>\n<li>静态资源通常占用空间比较大且经常会被访问到，如果直接使用服务器或者缓存来处理静态资源请求的话，对系统资源消耗非常大，可能会影响到系统其他服务的正常运行。</li>\n</ul>\n<p>同一个服务在在多个不同的地方部署多份（比如同城灾备、异地灾备、同城多活、异地多活）是为了实现系统的高可用而不是就近访问。</p>\n<h2>CDN 工作原理是什么？</h2>\n<p>搞懂下面 3 个问题也就搞懂了 CDN 的工作原理：</p>\n<ol>\n<li>静态资源是如何被缓存到 CDN 节点中的？</li>\n<li>如何找到最合适的 CDN 节点？</li>\n<li>如何防止静态资源被盗用？</li>\n</ol>\n<h3>静态资源是如何被缓存到 CDN 节点中的？</h3>\n<p>你可以通过 <strong>预热</strong> 的方式将源站的资源同步到 CDN 的节点中。这样的话，用户首次请求资源可以直接从 CDN 节点中取，无需回源。这样可以降低源站压力，提升用户体验。</p>\n<p>如果不预热的话，你访问的资源可能不在 CDN 节点中，这个时候 CDN 节点将请求源站获取资源，这个过程是大家经常说的 <strong>回源</strong>。</p>\n<blockquote>\n<ul>\n<li>回源：当 CDN 节点上没有用户请求的资源或该资源的缓存已经过期时，CDN 节点需要从原始服务器获取最新的资源内容，这个过程就是回源。当用户请求发生回源的话，会导致该请求的响应速度比未使用 CDN 还慢，因为相比于未使用 CDN 还多了一层 CDN 的调用流程。</li>\n<li>预热：预热是指在 CDN 上提前将内容缓存到 CDN 节点上。这样当用户在请求这些资源时，能够快速地从最近的 CDN 节点获取到而不需要回源，进而减少了对源站的访问压力，提高了访问速度。</li>\n</ul>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-back-to-source.png\" alt=\"CDN 回源\"></p>\n<p>如果资源有更新的话，你也可以对其 <strong>刷新</strong> ，删除 CDN 节点上缓存的旧资源，并强制 CDN 节点回源站获取最新资源。</p>\n<p>几乎所有云厂商提供的 CDN 服务都具备缓存的刷新和预热功能（下图是阿里云 CDN 服务提供的相应功能）：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-refresh-warm-up.png\" alt=\"CDN 缓存的刷新和预热\"></p>\n<p><strong>命中率</strong> 和 <strong>回源率</strong> 是衡量 CDN 服务质量两个重要指标。命中率越高越好，回源率越低越好。</p>\n<h3>如何找到最合适的 CDN 节点？</h3>\n<p>GSLB （Global Server Load Balance，全局负载均衡）是 CDN 的大脑，负责多个 CDN 节点之间相互协作，最常用的是基于 DNS 的 GSLB。</p>\n<p>CDN 会通过 GSLB 找到最合适的 CDN 节点，更具体点来说是下面这样的：</p>\n<ol>\n<li>浏览器向 DNS 服务器发送域名请求；</li>\n<li>DNS 服务器向根据 CNAME( Canonical Name ) 别名记录向 GSLB 发送请求；</li>\n<li>GSLB 返回性能最好（通常距离请求地址最近）的 CDN 节点（边缘服务器，真正缓存内容的地方）的地址给浏览器；</li>\n<li>浏览器直接访问指定的 CDN 节点。</li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-overview.png\" alt=\"CDN 原理示意图\"></p>\n<p>为了方便理解，上图其实做了一点简化。GSLB 内部可以看作是 CDN 专用 DNS 服务器和负载均衡系统组合。CDN 专用 DNS 服务器会返回负载均衡系统 IP 地址给浏览器，浏览器使用 IP 地址请求负载均衡系统进而找到对应的 CDN 节点。</p>\n<p><strong>GSLB 是如何选择出最合适的 CDN 节点呢？</strong> GSLB 会根据请求的 IP 地址、CDN 节点状态（比如负载情况、性能、响应时间、带宽）等指标来综合判断具体返回哪一个 CDN 节点的地址。</p>\n<h3>如何防止资源被盗刷？</h3>\n<p>如果我们的资源被其他用户或者网站非法盗刷的话，将会是一笔不小的开支。</p>\n<p>解决这个问题最常用最简单的办法设置 <strong>Referer 防盗链</strong>，具体来说就是根据 HTTP 请求的头信息里面的 Referer 字段对请求进行限制。我们可以通过 Referer 字段获取到当前请求页面的来源页面的网站地址，这样我们就能确定请求是否来自合法的网站。</p>\n<p>CDN 服务提供商几乎都提供了这种比较基础的防盗链机制。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cnd-tencent-cloud-anti-theft.png\" alt=\"腾讯云 CDN Referer 防盗链配置\"></p>\n<p>不过，如果站点的防盗链配置允许 Referer 为空的话，通过隐藏 Referer，可以直接绕开防盗链。</p>\n<p>通常情况下，我们会配合其他机制来确保静态资源被盗用，一种常用的机制是 <strong>时间戳防盗链</strong> 。相比之下，<strong>时间戳防盗链</strong> 的安全性更强一些。时间戳防盗链加密的 URL 具有时效性，过期之后就无法再被允许访问。</p>\n<p>时间戳防盗链的 URL 通常会有两个参数一个是签名字符串，一个是过期时间。签名字符串一般是通过对用户设定的加密字符串、请求路径、过期时间通过 MD5 哈希算法取哈希的方式获得。</p>\n<p>时间戳防盗链 URL 示例：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>http://cdn.wangsu.com/4/123.mp3? wsSecret=79aead3bd7b5db4adeffb93a010298b5&amp;wsTime=1601026312</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ul>\n<li><code>wsSecret</code>：签名字符串。</li>\n<li><code>wsTime</code>: 过期时间。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/timestamp-anti-theft.png\" alt=\"\"></p>\n<p>时间戳防盗链的实现也比较简单，并且可靠性较高，推荐使用。并且，绝大部分 CDN 服务提供商都提供了开箱即用的时间戳防盗链机制。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/cdn/qiniuyun-timestamp-anti-theft.png\" alt=\"七牛云时间戳防盗链配置\"></p>\n<p>除了 Referer 防盗链和时间戳防盗链之外，你还可以 IP 黑白名单配置、IP 访问限频配置等机制来防盗刷。</p>\n<h2>总结</h2>\n<ul>\n<li>CDN 就是将静态资源分发到多个不同的地方以实现就近访问，进而加快静态资源的访问速度，减轻服务器以及带宽的负担。</li>\n<li>基于成本、稳定性和易用性考虑，建议直接选择专业的云厂商（比如阿里云、腾讯云、华为云、青云）或者 CDN 厂商（比如网宿、蓝汛）提供的开箱即用的 CDN 服务。</li>\n<li>GSLB （Global Server Load Balance，全局负载均衡）是 CDN 的大脑，负责多个 CDN 节点之间相互协作，最常用的是基于 DNS 的 GSLB。CDN 会通过 GSLB 找到最合适的 CDN 节点。</li>\n<li>为了防止静态资源被盗用，我们可以利用 <strong>Referer 防盗链</strong> + <strong>时间戳防盗链</strong> 。</li>\n</ul>\n<h2>参考</h2>\n<ul>\n<li>时间戳防盗链 - 七牛云 CDN：<a href=\"https://developer.qiniu.com/fusion/kb/1670/timestamp-hotlinking-prevention\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.qiniu.com/fusion/kb/1670/timestamp-hotlinking-prevention</a></li>\n<li>CDN 是个啥玩意？一文说个明白：<a href=\"https://mp.weixin.qq.com/s/Pp0C8ALUXsmYCUkM5QnkQw\" target=\"_blank\" rel=\"noopener noreferrer\">https://mp.weixin.qq.com/s/Pp0C8ALUXsmYCUkM5QnkQw</a></li>\n<li>《透视 HTTP 协议》- 37 | CDN：加速我们的网络服务：<a href=\"http://gk.link/a/11yOG\" target=\"_blank\" rel=\"noopener noreferrer\">http://gk.link/a/11yOG</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/high-performance/cdn/jingdong-wuliu-cangpei.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高性能"
      ]
    },
    {
      "title": "数据冷热分离详解",
      "url": "https://javaguide.cn/high-performance/data-cold-hot-separation.html",
      "id": "https://javaguide.cn/high-performance/data-cold-hot-separation.html",
      "summary": "什么是数据冷热分离？ 数据冷热分离是指根据数据的访问频率和业务重要性，将数据分为冷数据和热数据，冷数据一般存储在存储在低成本、低性能的介质中，热数据高性能存储介质中。 冷数据和热数据 热数据是指经常被访问和修改且需要快速访问的数据，冷数据是指不经常访问，对当前项目价值较低，但需要长期保存的数据。 冷热数据到底如何区分呢？有两个常见的区分方法： 时间维度...",
      "content_html": "<h2>什么是数据冷热分离？</h2>\n<p>数据冷热分离是指根据数据的访问频率和业务重要性，将数据分为冷数据和热数据，冷数据一般存储在存储在低成本、低性能的介质中，热数据高性能存储介质中。</p>\n<h3>冷数据和热数据</h3>\n<p>热数据是指经常被访问和修改且需要快速访问的数据，冷数据是指不经常访问，对当前项目价值较低，但需要长期保存的数据。</p>\n<p>冷热数据到底如何区分呢？有两个常见的区分方法：</p>\n<ol>\n<li><strong>时间维度区分</strong>：按照数据的创建时间、更新时间、过期时间等，将一定时间段内的数据视为热数据，超过该时间段的数据视为冷数据。例如，订单系统可以将 1 年前的订单数据作为冷数据，1 年内的订单数据作为热数据。这种方法适用于数据的访问频率和时间有较强的相关性的场景。</li>\n<li><strong>访问频率区分</strong>：将高频访问的数据视为热数据，低频访问的数据视为冷数据。例如，内容系统可以将浏览量非常低的文章作为冷数据，浏览量较高的文章作为热数据。这种方法需要记录数据的访问频率，成本较高，适合访问频率和数据本身有较强的相关性的场景。</li>\n</ol>\n<p>几年前的数据并不一定都是冷数据，例如一些优质文章发表几年后依然有很多人访问，大部分普通用户新发表的文章却基本没什么人访问。</p>\n<p>这两种区分冷热数据的方法各有优劣，实际项目中，可以将两者结合使用。</p>\n<h3>冷热分离的思想</h3>\n<p>冷热分离的思想非常简单，就是对数据进行分类，然后分开存储。冷热分离的思想可以应用到很多领域和场景中，而不仅仅是数据存储，例如：</p>\n<ul>\n<li>邮件系统中，可以将近期的比较重要的邮件放在收件箱，将比较久远的不太重要的邮件存入归档。</li>\n<li>日常生活中，可以将常用的物品放在显眼的位置，不常用的物品放入储藏室或者阁楼。</li>\n<li>图书馆中，可以将最受欢迎和最常借阅的图书单独放在一个显眼的区域，将较少借阅的书籍放在不起眼的位置。</li>\n<li>……</li>\n</ul>\n<h3>数据冷热分离的优缺点</h3>\n<ul>\n<li>优点：热数据的查询性能得到优化（用户的绝大部分操作体验会更好）、节约成本（可以冷热数据的不同存储需求，选择对应的数据库类型和硬件配置，比如将热数据放在 SSD 上，将冷数据放在 HDD 上）</li>\n<li>缺点：系统复杂性和风险增加（需要分离冷热数据，数据错误的风险增加）、统计效率低（统计的时候可能需要用到冷库的数据）。</li>\n</ul>\n<h2>冷数据如何迁移？</h2>\n<p>冷数据迁移方案：</p>\n<ol>\n<li>业务层代码实现：当有对数据进行写操作时，触发冷热分离的逻辑，判断数据是冷数据还是热数据，冷数据就入冷库，热数据就入热库。这种方案会影响性能且冷热数据的判断逻辑不太好确定，还需要修改业务层代码，因此一般不会使用。</li>\n<li>任务调度：可以利用 xxl-job 或者其他分布式任务调度平台定时去扫描数据库，找出满足冷数据条件的数据，然后批量地将其复制到冷库中，并从热库中删除。这种方法修改的代码非常少，非常适合按照时间区分冷热数据的场景。</li>\n<li>监听数据库的变更日志 binlog ：将满足冷数据条件的数据从 binlog 中提取出来，然后复制到冷库中，并从热库中删除。这种方法可以不用修改代码，但不适合按照时间维度区分冷热数据的场景。</li>\n</ol>\n<p>如果你的公司有 DBA 的话，也可以让 DBA 进行冷数据的人工迁移，一次迁移完成冷数据到冷库。然后，再搭配上面介绍的方案实现后续冷数据的迁移工作。</p>\n<h2>冷数据如何存储？</h2>\n<p>冷数据的存储要求主要是容量大，成本低，可靠性高，访问速度可以适当牺牲。</p>\n<p>冷数据存储方案：</p>\n<ul>\n<li>中小厂：直接使用 MySQL/PostgreSQL 即可（不改变数据库选型和项目当前使用的数据库保持一致），比如新增一张表来存储某个业务的冷数据或者使用单独的冷库来存放冷数据（涉及跨库查询，增加了系统复杂性和维护难度）</li>\n<li>大厂：Hbase（常用）、RocksDB、Doris、Cassandra</li>\n</ul>\n<p>如果公司成本预算足的话，也可以直接上 TiDB 这种分布式关系型数据库，直接一步到位。TiDB 6.0 正式支持数据冷热存储分离，可以降低 SSD 使用成本。使用 TiDB 6.0 的数据放置功能，可以在同一个集群实现海量数据的冷热存储，将新的热数据存入 SSD，历史冷数据存入 HDD。</p>\n<h2>案例分享</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/fulongyuanjushi/p/17910420.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何快速优化几千万数据量的订单表 - 程序员济癫 - 2023</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ZKRkZP6rLHuTE1wvnqmAPQ\" target=\"_blank\" rel=\"noopener noreferrer\">海量数据冷热分离方案与实践 - 字节跳动技术团队 - 2022</a></li>\n</ul>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高性能"
      ]
    },
    {
      "title": "深度分页介绍及优化建议",
      "url": "https://javaguide.cn/high-performance/deep-pagination-optimization.html",
      "id": "https://javaguide.cn/high-performance/deep-pagination-optimization.html",
      "summary": "深度分页介绍 查询偏移量过大的场景我们称为深度分页，这会导致查询性能较低，例如： 深度分页问题的原因 当查询偏移量过大时，MySQL 的查询优化器可能会选择全表扫描而不是利用索引来优化查询。这是因为扫描索引和跳过大量记录可能比直接全表扫描更耗费资源。 深度分页问题 不同机器上这个查询偏移量过大的临界点可能不同，取决于多个因素，包括硬件配置（如 CPU ...",
      "content_html": "<h2>深度分页介绍</h2>\n<p>查询偏移量过大的场景我们称为深度分页，这会导致查询性能较低，例如：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># MySQL 在无法利用索引的情况下跳过1000000条记录后，再获取10条记录</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">ORDER BY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">LIMIT</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>深度分页问题的原因</h2>\n<p>当查询偏移量过大时，MySQL 的查询优化器可能会选择全表扫描而不是利用索引来优化查询。这是因为扫描索引和跳过大量记录可能比直接全表扫描更耗费资源。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/mysql/deep-pagination-phenomenon.png\" alt=\"深度分页问题\"></p>\n<p>不同机器上这个查询偏移量过大的临界点可能不同，取决于多个因素，包括硬件配置（如 CPU 性能、磁盘速度）、表的大小、索引的类型和统计信息等。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/mysql/deep-pagination-phenomenon-critical-point.png\" alt=\"转全表扫描的临界点\"></p>\n<p>MySQL 的查询优化器采用基于成本的策略来选择最优的查询执行计划。它会根据 CPU 和 I/O 的成本来决定是否使用索引扫描或全表扫描。如果优化器认为全表扫描的成本更低，它就会放弃使用索引。不过，即使偏移量很大，如果查询中使用了覆盖索引（covering index），MySQL 仍然可能会使用索引，避免回表操作。</p>\n<h2>深度分页优化建议</h2>\n<p>这里以 MySQL 数据库为例介绍一下如何优化深度分页。</p>\n<h3>范围查询</h3>\n<p>当可以保证 ID 的连续性时，根据 ID 范围进行分页是比较好的解决方案：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># 查询指定 ID 范围的数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">WHERE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100000</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> AND</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100010</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> ORDER BY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># 也可以通过记录上次查询结果的最后一条记录的ID进行下一页的查询：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">WHERE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100000</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> LIMIT</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这种基于 ID 范围的深度分页优化方式存在很大限制：</p>\n<ol>\n<li><strong>ID 连续性要求高</strong>: 实际项目中，数据库自增 ID 往往因为各种原因（例如删除数据、事务回滚等）导致 ID 不连续，难以保证连续性。</li>\n<li><strong>排序问题</strong>: 如果查询需要按照其他字段（例如创建时间、更新时间等）排序，而不是按照 ID 排序，那么这种方法就不再适用。</li>\n<li><strong>并发场景</strong>: 在高并发场景下，单纯依赖记录上次查询的最后一条记录的 ID 进行分页，容易出现数据重复或遗漏的问题。</li>\n</ol>\n<h3>子查询</h3>\n<p>我们先查询出 limit 第一个参数对应的主键值，再根据这个主键值再去过滤并 limit，这样效率会更快一些。</p>\n<p>阿里巴巴《Java 开发手册》中也有对应的描述：</p>\n<blockquote>\n<p>利用延迟关联或者子查询优化超多分页场景。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/mysql/alibaba-java-development-handbook-paging.png\" alt=\"\"></p>\n</blockquote>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># 通过子查询来获取 id 的起始值，把 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">limit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 的条件转移到子查询</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">WHERE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000000</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> limit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">LIMIT</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>工作原理</strong>:</p>\n<ol>\n<li>子查询 <code>(SELECT id FROM t_order where id &gt; 1000000 limit 1)</code> 会利用主键索引快速定位到第 1000001 条记录，并返回其 ID 值。</li>\n<li>主查询 <code>SELECT * FROM t_order WHERE id &gt;= ... LIMIT 10</code> 将子查询返回的起始 ID 作为过滤条件，使用 <code>id &gt;=</code> 获取从该 ID 开始的后续 10 条记录。</li>\n</ol>\n<p>不过，子查询的结果会产生一张新表，会影响性能，应该尽量避免大量使用子查询。并且，这种方法只适用于 ID 是正序的。在复杂分页场景，往往需要通过过滤条件，筛选到符合条件的 ID，此时的 ID 是离散且不连续的。</p>\n<p>当然，我们也可以利用子查询先去获取目标分页的 ID 集合，然后再根据 ID 集合获取内容，但这种写法非常繁琐，不如使用 INNER JOIN 延迟关联。</p>\n<h3>延迟关联</h3>\n<p>延迟关联与子查询的优化思路类似，都是通过将 <code>LIMIT</code> 操作转移到主键索引树上，减少回表次数。相比直接使用子查询，延迟关联通过 <code>INNER JOIN</code> 将子查询结果集成到主查询中，避免了子查询可能产生的临时表。在执行 <code>INNER JOIN</code> 时，MySQL 优化器能够利用索引进行高效的连接操作（如索引扫描或其他优化策略），因此在深度分页场景下，性能通常优于直接使用子查询。</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">-- 使用 INNER JOIN 进行延迟关联</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t1.*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order t1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">INNER JOIN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000000</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> LIMIT</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) t2 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">ON</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> t1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> t2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>工作原理</strong>:</p>\n<ol>\n<li>子查询 <code>(SELECT id FROM t_order where id &gt; 1000000 LIMIT 10)</code> 利用主键索引快速定位目标分页的 10 条记录的 ID。</li>\n<li>通过 <code>INNER JOIN</code> 将子查询结果与主表 <code>t_order</code> 关联，获取完整的记录数据。</li>\n</ol>\n<p>除了使用 INNER JOIN 之外，还可以使用逗号连接子查询。</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">-- 使用逗号进行延迟关联</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t1.* </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order t1,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000000</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> LIMIT</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) t2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">WHERE</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> t1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> t2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>注意</strong>: 虽然逗号连接子查询也能实现类似的效果，但为了代码可读性和可维护性，建议使用更规范的 <code>INNER JOIN</code> 语法。</p>\n<h3>覆盖索引</h3>\n<p>索引中已经包含了所有需要获取的字段的查询方式称为覆盖索引。</p>\n<p><strong>覆盖索引的好处：</strong></p>\n<ul>\n<li><strong>避免 InnoDB 表进行索引的二次查询，也就是回表操作:</strong> InnoDB 是以聚集索引的顺序来存储的，对于 InnoDB 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询（回表），减少了 IO 操作，提升了查询效率。</li>\n<li><strong>可以把随机 IO 变成顺序 IO 加快查询效率:</strong> 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。</li>\n</ul>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># 如果只需要查询 id, code, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 这三列，可建立 code 和 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 的覆盖索引</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id, code, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">type</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> t_order</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">ORDER BY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> code</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">LIMIT</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>⚠️注意</strong>:</p>\n<ul>\n<li>当查询的结果集占表的总行数的很大一部分时，MySQL 查询优化器可能选择放弃使用索引，自动转换为全表扫描。</li>\n<li>虽然可以使用 <code>FORCE INDEX</code> 强制查询优化器走索引，但这种方式可能会导致查询优化器无法选择更优的执行计划，效果并不总是理想。</li>\n</ul>\n<h2>总结</h2>\n<p>本文总结了几种常见的深度分页优化方案:</p>\n<ol>\n<li><strong>范围查询</strong>: 基于 ID 连续性进行分页，通过记录上一页最后一条记录的 ID 来获取下一页数据。适合 ID 连续且按 ID 查询的场景，但在 ID 不连续或需要按其他字段排序时存在局限。</li>\n<li><strong>子查询</strong>: 先通过子查询获取分页的起始主键值，再根据主键进行筛选分页。利用主键索引提高效率，但子查询会生成临时表，复杂场景下性能不佳。</li>\n<li><strong>延迟关联 (INNER JOIN)</strong>: 使用 <code>INNER JOIN</code> 将分页操作转移到主键索引上，减少回表次数。相比子查询，延迟关联的性能更优，适合大数据量的分页查询。</li>\n<li><strong>覆盖索引</strong>: 通过索引直接获取所需字段，避免回表操作，减少 IO 开销，适合查询特定字段的场景。但当结果集较大时，MySQL 可能会选择全表扫描。</li>\n</ol>\n<h2>参考</h2>\n<ul>\n<li>聊聊如何解决 MySQL 深分页问题 - 捡田螺的小男孩：<a href=\"https://juejin.cn/post/7012016858379321358\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7012016858379321358</a></li>\n<li>数据库深分页介绍及优化方案 - 京东零售技术：<a href=\"https://mp.weixin.qq.com/s/ZEwGKvRCyvAgGlmeseAS7g\" target=\"_blank\" rel=\"noopener noreferrer\">https://mp.weixin.qq.com/s/ZEwGKvRCyvAgGlmeseAS7g</a></li>\n<li>MySQL 深分页优化 - 得物技术：<a href=\"https://juejin.cn/post/6985478936683610149\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/6985478936683610149</a></li>\n</ul>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/mysql/deep-pagination-phenomenon.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高性能"
      ]
    },
    {
      "title": "负载均衡原理及算法详解",
      "url": "https://javaguide.cn/high-performance/load-balancing.html",
      "id": "https://javaguide.cn/high-performance/load-balancing.html",
      "summary": "什么是负载均衡？ 负载均衡 指的是将用户请求分摊到不同的服务器上处理，以提高系统整体的并发处理能力以及可靠性。负载均衡服务可以有由专门的软件或者硬件来完成，一般情况下，硬件的性能更好，软件的价格更便宜（后文会详细介绍到）。 下图是《Java 面试指北》 「高并发篇」中的一篇文章的配图，从图中可以看出，系统的商品服务部署了多份在不同的服务器上，为了实现访...",
      "content_html": "<h2>什么是负载均衡？</h2>\n<p><strong>负载均衡</strong> 指的是将用户请求分摊到不同的服务器上处理，以提高系统整体的并发处理能力以及可靠性。负载均衡服务可以有由专门的软件或者硬件来完成，一般情况下，硬件的性能更好，软件的价格更便宜（后文会详细介绍到）。</p>\n<p>下图是<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247519384&amp;idx=1&amp;sn=bc7e71af75350b755f04ca4178395b1a&amp;chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&amp;token=660789642&amp;lang=zh_CN&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a> 「高并发篇」中的一篇文章的配图，从图中可以看出，系统的商品服务部署了多份在不同的服务器上，为了实现访问商品服务请求的分流，我们用到了负载均衡。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/multi-service-load-balancing.drawio.png\" alt=\"多服务实例-负载均衡\"></p>\n<p>负载均衡是一种比较常用且实施起来较为简单的提高系统并发能力和可靠性的手段，不论是单体架构的系统还是微服务架构的系统几乎都会用到。</p>\n<h2>负载均衡分为哪几种？</h2>\n<p>负载均衡可以简单分为 <strong>服务端负载均衡</strong> 和 <strong>客户端负载均衡</strong> 这两种。</p>\n<p>服务端负载均衡涉及到的知识点更多，工作中遇到的也比较多，因此，我会花更多时间来介绍。</p>\n<h3>服务端负载均衡</h3>\n<p><strong>服务端负载均衡</strong> 主要应用在 <strong>系统外部请求</strong> 和 <strong>网关层</strong> 之间，可以使用 <strong>软件</strong> 或者 <strong>硬件</strong> 实现。</p>\n<p>下图是我画的一个简单的基于 Nginx 的服务端负载均衡示意图：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/server-load-balancing.png\" alt=\"基于 Nginx 的服务端负载均衡\"></p>\n<p><strong>硬件负载均衡</strong> 通过专门的硬件设备（比如 <strong>F5、A10、Array</strong> ）实现负载均衡功能。</p>\n<p>硬件负载均衡的优势是性能很强且稳定，缺点就是实在是太贵了。像基础款的 F5 最低也要 20 多万，绝大部分公司是根本负担不起的，业务量不大的话，真没必要非要去弄个硬件来做负载均衡，用软件负载均衡就足够了！</p>\n<p>在我们日常开发中，一般很难接触到硬件负载均衡，接触的比较多的还是 <strong>软件负载均衡</strong> 。软件负载均衡通过软件（比如 <strong>LVS、Nginx、HAproxy</strong> ）实现负载均衡功能，性能虽然差一些，但价格便宜啊！像基础款的 Linux 服务器也就几千，性能好一点的 2~3 万的就很不错了。</p>\n<p>根据 OSI 模型，服务端负载均衡还可以分为：</p>\n<ul>\n<li>二层负载均衡</li>\n<li>三层负载均衡</li>\n<li>四层负载均衡</li>\n<li>七层负载均衡</li>\n</ul>\n<p>最常见的是四层和七层负载均衡，因此，本文也是重点介绍这两种负载均衡。</p>\n<blockquote>\n<p>Nginx 官网对四层负载和七层负载均衡均衡做了详细介绍，感兴趣的可以看看。</p>\n<ul>\n<li><a href=\"https://www.nginx.com/resources/glossary/layer-4-load-balancing/\" target=\"_blank\" rel=\"noopener noreferrer\">What Is Layer 4 Load Balancing?</a></li>\n<li><a href=\"https://www.nginx.com/resources/glossary/layer-7-load-balancing/\" target=\"_blank\" rel=\"noopener noreferrer\">What Is Layer 7 Load Balancing?</a></li>\n</ul>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png\" alt=\"OSI 七层模型\"></p>\n<ul>\n<li><strong>四层负载均衡</strong> 工作在 OSI 模型第四层，也就是传输层，这一层的主要协议是 TCP/UDP，负载均衡器在这一层能够看到数据包里的源端口地址以及目的端口地址，会基于这些信息通过一定的负载均衡算法将数据包转发到后端真实服务器。也就是说，四层负载均衡的核心就是 IP+端口层面的负载均衡，不涉及具体的报文内容。</li>\n<li><strong>七层负载均衡</strong> 工作在 OSI 模型第七层，也就是应用层，这一层的主要协议是 HTTP 。这一层的负载均衡比四层负载均衡路由网络请求的方式更加复杂，它会读取报文的数据部分（比如说我们的 HTTP 部分的报文），然后根据读取到的数据内容（如 URL、Cookie）做出负载均衡决策。也就是说，七层负载均衡器的核心是报文内容（如 URL、Cookie）层面的负载均衡，执行第七层负载均衡的设备通常被称为 <strong>反向代理服务器</strong> 。</li>\n</ul>\n<p>七层负载均衡比四层负载均衡会消耗更多的性能，不过，也相对更加灵活，能够更加智能地路由网络请求，比如说你可以根据请求的内容进行优化如缓存、压缩、加密。</p>\n<p>简单来说，<strong>四层负载均衡性能很强，七层负载均衡功能更强！</strong> 不过，对于绝大部分业务场景来说，四层负载均衡和七层负载均衡的性能差异基本可以忽略不计的。</p>\n<p>下面这段话摘自 Nginx 官网的 <a href=\"https://www.nginx.com/resources/glossary/layer-4-load-balancing/\" target=\"_blank\" rel=\"noopener noreferrer\">What Is Layer 4 Load Balancing?</a> 这篇文章。</p>\n<blockquote>\n<p>Layer 4 load balancing was a popular architectural approach to traffic handling when commodity hardware was not as powerful as it is now, and the interaction between clients and application servers was much less complex. It requires less computation than more sophisticated load balancing methods (such as Layer 7), but CPU and memory are now sufficiently fast and cheap that the performance advantage for Layer 4 load balancing has become negligible or irrelevant in most situations.</p>\n<p>第 4 层负载平衡是一种流行的流量处理体系结构方法，当时商用硬件没有现在这么强大，客户端和应用程序服务器之间的交互也不那么复杂。它比更复杂的负载平衡方法(如第 7 层)需要更少的计算量，但是 CPU 和内存现在足够快和便宜，在大多数情况下，第 4 层负载平衡的性能优势已经变得微不足道或无关紧要。</p>\n</blockquote>\n<p>在工作中，我们通常会使用 <strong>Nginx</strong> 来做七层负载均衡，LVS(Linux Virtual Server 虚拟服务器， Linux 内核的 4 层负载均衡)来做四层负载均衡。</p>\n<p>关于 Nginx 的常见知识点总结，<a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a> 中「技术面试题篇」中已经有对应的内容了，感兴趣的小伙伴可以去看看。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/image-20220328105759300.png\" alt=\"\"></p>\n<p>不过，LVS 这个绝大部分公司真用不上，像阿里、百度、腾讯、eBay 等大厂才会使用到，用的最多的还是 Nginx。</p>\n<h3>客户端负载均衡</h3>\n<p><strong>客户端负载均衡</strong> 主要应用于系统内部的不同的服务之间，可以使用现成的负载均衡组件来实现。</p>\n<p>在客户端负载均衡中，客户端会自己维护一份服务器的地址列表，发送请求之前，客户端会根据对应的负载均衡算法来选择具体某一台服务器处理请求。</p>\n<p>客户端负载均衡器和服务运行在同一个进程或者说 Java 程序里，不存在额外的网络开销。不过，客户端负载均衡的实现会受到编程语言的限制，比如说 Spring Cloud Load Balancer 就只能用于 Java 语言。</p>\n<p>Java 领域主流的微服务框架 Dubbo、Spring Cloud 等都内置了开箱即用的客户端负载均衡实现。Dubbo 属于是默认自带了负载均衡功能，Spring Cloud 是通过组件的形式实现的负载均衡，属于可选项，比较常用的是 Spring Cloud Load Balancer（官方，推荐） 和 Ribbon（Netflix，已被弃用）。</p>\n<p>下图是我画的一个简单的基于 Spring Cloud Load Balancer（Ribbon 也类似） 的客户端负载均衡示意图：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/spring-cloud-lb-gateway.png\" alt=\"\"></p>\n<h2>负载均衡常见的算法有哪些？</h2>\n<h3>随机法</h3>\n<p><strong>随机法</strong> 是最简单粗暴的负载均衡算法。</p>\n<p>如果没有配置权重的话，所有的服务器被访问到的概率都是相同的。如果配置权重的话，权重越高的服务器被访问的概率就越大。</p>\n<p>未加权重的随机算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权随机算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p>\n<p>不过，随机算法有一个比较明显的缺陷：部分机器在一段时间之内无法被随机到，毕竟是概率算法，就算是大家权重一样， 也可能会出现这种情况。</p>\n<p>于是，<strong>轮询法</strong> 来了！</p>\n<h3>轮询法</h3>\n<p>轮询法是挨个轮询服务器处理，也可以设置权重。</p>\n<p>如果没有配置权重的话，每个请求按时间顺序逐一分配到不同的服务器处理。如果配置权重的话，权重越高的服务器被访问的次数就越多。</p>\n<p>未加权重的轮询算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权轮询算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p>\n<p>在加权轮询的基础上，还有进一步改进得到的负载均衡算法，比如平滑的加权轮训算法。</p>\n<p>平滑的加权轮训算法最早是在 Nginx 中被实现，可以参考这个 commit：<a href=\"https://github.com/phusion/nginx/commit/27e94984486058d73157038f7950a0a36ecc6e35\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/phusion/nginx/commit/27e94984486058d73157038f7950a0a36ecc6e35</a>。如果你认真学习过 Dubbo 负载均衡策略的话，就会发现 Dubbo 的加权轮询就借鉴了该算法实现并进一步做了优化。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/dubbo-round-robin-load-balance.png\" alt=\"Dubbo 加权轮询负载均衡算法\"></p>\n<h3>两次随机法</h3>\n<p>两次随机法在随机法的基础上多增加了一次随机，多选出一个服务器。随后再根据两台服务器的负载等情况，从其中选择出一个最合适的服务器。</p>\n<p>两次随机法的好处是可以动态地调节后端节点的负载，使其更加均衡。如果只使用一次随机法，可能会导致某些服务器过载，而某些服务器空闲。</p>\n<h3>哈希法</h3>\n<p>将请求的参数信息通过哈希函数转换成一个哈希值，然后根据哈希值来决定请求被哪一台服务器处理。</p>\n<p>在服务器数量不变的情况下，相同参数的请求总是发到同一台服务器处理，比如同个 IP 的请求、同一个用户的请求。</p>\n<h3>一致性 Hash 法</h3>\n<p>和哈希法类似，一致性 Hash 法也可以让相同参数的请求总是发到同一台服务器处理。不过，它解决了哈希法存在的一些问题。</p>\n<p>常规哈希法在服务器数量变化时，哈希值会重新落在不同的服务器上，这明显违背了使用哈希法的本意。而一致性哈希法的核心思想是将数据和节点都映射到一个哈希环上，然后根据哈希值的顺序来确定数据属于哪个节点。当服务器增加或删除时，只影响该服务器的哈希，而不会导致整个服务集群的哈希键值重新分布。</p>\n<h3>最小连接法</h3>\n<p>当有新的请求出现时，遍历服务器节点列表并选取其中连接数最小的一台服务器来响应当前请求。相同连接的情况下，可以进行加权随机。</p>\n<p>最少连接数基于一个服务器连接数越多，负载就越高这一理想假设。然而， 实际情况是连接数并不能代表服务器的实际负载，有些连接耗费系统资源更多，有些连接不怎么耗费系统资源。</p>\n<h3>最少活跃法</h3>\n<p>最少活跃法和最小连接法类似，但要更科学一些。最少活跃法以活动连接数为标准，活动连接数可以理解为当前正在处理的请求数。活跃数越低，说明处理能力越强，这样就可以使处理能力强的服务器处理更多请求。相同活跃数的情况下，可以进行加权随机。</p>\n<h3>最快响应时间法</h3>\n<p>不同于最小连接法和最少活跃法，最快响应时间法以响应时间为标准来选择具体是哪一台服务器处理。客户端会维持每个服务器的响应时间，每次请求挑选响应时间最短的。相同响应时间的情况下，可以进行加权随机。</p>\n<p>这种算法可以使得请求被更快处理，但可能会造成流量过于集中于高性能服务器的问题。</p>\n<h2>七层负载均衡可以怎么做？</h2>\n<p>简单介绍两种项目中常用的七层负载均衡解决方案：DNS 解析和反向代理。</p>\n<p>除了我介绍的这两种解决方案之外，HTTP 重定向等手段也可以用来实现负载均衡，不过，相对来说，还是 DNS 解析和反向代理用的更多一些，也更推荐一些。</p>\n<h3>DNS 解析</h3>\n<p>DNS 解析是比较早期的七层负载均衡实现方式，非常简单。</p>\n<p>DNS 解析实现负载均衡的原理是这样的：在 DNS 服务器中为同一个主机记录配置多个 IP 地址，这些 IP 地址对应不同的服务器。当用户请求域名的时候，DNS 服务器采用轮询算法返回 IP 地址，这样就实现了轮询版负载均衡。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/6997605302452f07e8b28d257d349bf0.png\" alt=\"\"></p>\n<p>现在的 DNS 解析几乎都支持 IP 地址的权重配置，这样的话，在服务器性能不等的集群中请求分配会更加合理化。像我自己目前正在用的阿里云 DNS 就支持权重配置。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/aliyun-dns-weight-setting.png\" alt=\"\"></p>\n<h3>反向代理</h3>\n<p>客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器，获取数据后再返回给客户端。对外暴露的是反向代理服务器地址，隐藏了真实服务器 IP 地址。反向代理“代理”的是目标服务器，这一个过程对于客户端而言是透明的。</p>\n<p>Nginx 就是最常用的反向代理服务器，它可以将接收到的客户端请求以一定的规则（负载均衡策略）均匀地分配到这个服务器集群中所有的服务器上。</p>\n<p>反向代理负载均衡同样属于七层负载均衡。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/nginx-load-balance.png\" alt=\"\"></p>\n<h2>客户端负载均衡通常是怎么做的？</h2>\n<p>我们上面也说了，客户端负载均衡可以使用现成的负载均衡组件来实现。</p>\n<p><strong>Netflix Ribbon</strong> 和 <strong>Spring Cloud Load Balancer</strong> 就是目前 Java 生态最流行的两个负载均衡组件。</p>\n<p>Ribbon 是老牌负载均衡组件，由 Netflix 开发，功能比较全面，支持的负载均衡策略也比较多。 Spring Cloud Load Balancer 是 Spring 官方为了取代 Ribbon 而推出的，功能相对更简单一些，支持的负载均衡也少一些。</p>\n<p>Ribbon 支持的 7 种负载均衡策略：</p>\n<ul>\n<li><code>RandomRule</code>：随机策略。</li>\n<li><code>RoundRobinRule</code>（默认）：轮询策略</li>\n<li><code>WeightedResponseTimeRule</code>：权重（根据响应时间决定权重）策略</li>\n<li><code>BestAvailableRule</code>：最小连接数策略</li>\n<li><code>RetryRule</code>：重试策略（按照轮询策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内不断地进行重试来获取服务，如果超过指定时间依然没获取到服务实例则返回 null）</li>\n<li><code>AvailabilityFilteringRule</code>：可用敏感性策略（先过滤掉非健康的服务实例，然后再选择连接数较小的服务实例）</li>\n<li><code>ZoneAvoidanceRule</code>：区域敏感性策略（根据服务所在区域的性能和服务的可用性来选择服务实例）</li>\n</ul>\n<p>Spring Cloud Load Balancer 支持的 2 种负载均衡策略：</p>\n<ul>\n<li><code>RandomLoadBalancer</code>：随机策略</li>\n<li><code>RoundRobinLoadBalancer</code>（默认）：轮询策略</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> CustomLoadBalancerConfiguration</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Bean</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ReactorLoadBalancer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ServiceInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> randomLoadBalancer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Environment</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> environment</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">            LoadBalancerClientFactory</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> loadBalancerClientFactory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> environment</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getProperty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">LoadBalancerClientFactory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">PROPERTY_NAME</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RandomLoadBalancer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(loadBalancerClientFactory</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getLazyProvider</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(name, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">ServiceInstanceListSupplier</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                name);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>不过，Spring Cloud Load Balancer 支持的负载均衡策略其实不止这两种，<code>ServiceInstanceListSupplier</code> 的实现类同样可以让其支持类似于 Ribbon 的负载均衡策略。这个应该是后续慢慢完善引入的，不看官方文档还真发现不了，所以说阅读官方文档真的很重要！</p>\n<p>这里举两个官方的例子：</p>\n<ul>\n<li><code>ZonePreferenceServiceInstanceListSupplier</code>：实现基于区域的负载平衡</li>\n<li><code>HintBasedServiceInstanceListSupplier</code>：实现基于 hint 提示的负载均衡</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> CustomLoadBalancerConfiguration</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 使用基于区域的负载平衡方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Bean</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ServiceInstanceListSupplier</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> discoveryClientServiceInstanceListSupplier</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">            ConfigurableApplicationContext</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> context</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> ServiceInstanceListSupplier</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">builder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">withDiscoveryClient</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">withZonePreference</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">withCaching</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">build</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(context);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>关于 Spring Cloud Load Balancer 更详细更新的介绍，推荐大家看看官方文档：<a href=\"https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer</a> ，一切以官方文档为主。</p>\n<p>轮询策略基本可以满足绝大部分项目的需求，我们的实际项目中如果没有特殊需求的话，通常使用的就是默认的轮询策略。并且，Ribbon 和 Spring Cloud Load Balancer 都支持自定义负载均衡策略。</p>\n<p>个人建议如非必需 Ribbon 某个特有的功能或者负载均衡策略的话，就优先选择 Spring 官方提供的 Spring Cloud Load Balancer。</p>\n<p>最后再说说为什么我不太推荐使用 Ribbon 。</p>\n<p>Spring Cloud 2020.0.0 版本移除了 Netflix 除 Eureka 外的所有组件。Spring Cloud Hoxton.M2 是第一个支持 Spring Cloud Load Balancer 来替代 Netfix Ribbon 的版本。</p>\n<p>我们早期学习微服务，肯定接触过 Netflix 公司开源的 Feign、Ribbon、Zuul、Hystrix、Eureka 等知名的微服务系统构建所必须的组件，直到现在依然有非常非常多的公司在使用这些组件。不夸张地说，Netflix 公司引领了 Java 技术栈下的微服务发展。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/SpringCloudNetflix.png\" alt=\"\"></p>\n<p><strong>那为什么 Spring Cloud 这么急着移除 Netflix 的组件呢？</strong> 主要是因为在 2018 年的时候，Netflix 宣布其开源的核心组件 Hystrix、Ribbon、Zuul、Eureka 等进入维护状态，不再进行新特性开发，只修 BUG。于是，Spring 官方不得不考虑移除 Netflix 的组件。</p>\n<p><strong>Spring Cloud Alibaba</strong> 是一个不错的选择，尤其是对于国内的公司和个人开发者来说。</p>\n<h2>参考</h2>\n<ul>\n<li>干货 | eBay 的 4 层软件负载均衡实现：<a href=\"https://mp.weixin.qq.com/s/bZMxLTECOK3mjdgiLbHj-g\" target=\"_blank\" rel=\"noopener noreferrer\">https://mp.weixin.qq.com/s/bZMxLTECOK3mjdgiLbHj-g</a></li>\n<li>HTTP Load Balancing（Nginx 官方文档）：<a href=\"https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/</a></li>\n<li>深入浅出负载均衡 - vivo 互联网技术：<a href=\"https://www.cnblogs.com/vivotech/p/14859041.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/vivotech/p/14859041.html</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/multi-service-load-balancing.drawio.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高性能"
      ]
    },
    {
      "title": "读写分离和分库分表详解",
      "url": "https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html",
      "id": "https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html",
      "summary": "读写分离 什么是读写分离？ 见名思意，根据读写分离的名字，我们就可以知道：读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。 这样的话，就能够小幅提升写性能，大幅提升读性能。 我简单画了一张图来帮助不太清楚读写分离的小伙伴理解。 读写分离示意图 一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其他的从数据库负责读。主库和从库之...",
      "content_html": "<h2>读写分离</h2>\n<h3>什么是读写分离？</h3>\n<p>见名思意，根据读写分离的名字，我们就可以知道：<strong>读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。</strong> 这样的话，就能够小幅提升写性能，大幅提升读性能。</p>\n<p>我简单画了一张图来帮助不太清楚读写分离的小伙伴理解。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation.png\" alt=\"读写分离示意图\"></p>\n<p>一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其他的从数据库负责读。主库和从库之间会进行数据同步，以保证从库中数据的准确性。这样的架构实现起来比较简单，并且也符合系统的写少读多的特点。</p>\n<h3>如何实现读写分离？</h3>\n<p>不论是使用哪一种读写分离具体的实现方案，想要实现读写分离一般包含如下几步：</p>\n<ol>\n<li>部署多台数据库，选择其中的一台作为主数据库，其他的一台或者多台作为从数据库。</li>\n<li>保证主数据库和从数据库之间的数据是实时同步的，这个过程也就是我们常说的<strong>主从复制</strong>。</li>\n<li>系统将写请求交给主数据库处理，读请求交给从数据库处理。</li>\n</ol>\n<p>落实到项目本身的话，常用的方式有两种：</p>\n<p><strong>1. 代理方式</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation-proxy.png\" alt=\"代理方式实现读写分离\"></p>\n<p>我们可以在应用和数据中间加了一个代理层。应用程序所有的数据请求都交给代理层处理，代理层负责分离读写请求，将它们路由到对应的数据库中。</p>\n<p>提供类似功能的中间件有 <strong>MySQL Router</strong>（官方， MySQL Proxy 的替代方案）、<strong>Atlas</strong>（基于 MySQL Proxy）、<strong>MaxScale</strong>、<strong>MyCat</strong>。</p>\n<p>关于 MySQL Router 多提一点：在 MySQL 8.2 的版本中，MySQL Router 能自动分辨对数据库读写/操作并把这些操作路由到正确的实例上。这是一项有价值的功能，可以优化数据库性能和可扩展性，而无需在应用程序中进行任何更改。具体介绍可以参考官方博客：<a href=\"https://blogs.oracle.com/mysql/post/mysql-82-transparent-readwrite-splitting\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL 8.2 – transparent read/write splitting</a>。</p>\n<p><strong>2. 组件方式</strong></p>\n<p>在这种方式中，我们可以通过引入第三方组件来帮助我们读写请求。</p>\n<p>这也是我比较推荐的一种方式。这种方式目前在各种互联网公司中用的最多的，相关的实际的案例也非常多。如果你要采用这种方式的话，推荐使用 <code>sharding-jdbc</code> ，直接引入 jar 包即可使用，非常方便。同时，也节省了很多运维的成本。</p>\n<p>你可以在 shardingsphere 官方找到 <a href=\"https://shardingsphere.apache.org/document/legacy/3.x/document/cn/manual/sharding-jdbc/usage/read-write-splitting/\" target=\"_blank\" rel=\"noopener noreferrer\">sharding-jdbc 关于读写分离的操作</a>。</p>\n<h3>主从复制原理是什么？</h3>\n<p>MySQL binlog(binary log 即二进制日志文件) 主要记录了 MySQL 数据库中数据的所有变化(数据库执行的所有 DDL 和 DML 语句)。因此，我们根据主库的 MySQL binlog 日志就能够将主库的数据同步到从库中。</p>\n<p>更具体和详细的过程是这个样子的（图片来自于：<a href=\"https://www.toptal.com/mysql/mysql-master-slave-replication-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">《MySQL Master-Slave Replication on the Same Machine》</a>）：</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/78816271d3ab52424bfd5ad3086c1a0f.png\" alt=\"MySQL主从复制\"></p>\n<ol>\n<li>主库将数据库中数据的变化写入到 binlog</li>\n<li>从库连接主库</li>\n<li>从库会创建一个 I/O 线程向主库请求更新的 binlog</li>\n<li>主库会创建一个 binlog dump 线程来发送 binlog ，从库中的 I/O 线程负责接收</li>\n<li>从库的 I/O 线程将接收的 binlog 写入到 relay log 中。</li>\n<li>从库的 SQL 线程读取 relay log 同步数据到本地（也就是再执行一遍 SQL ）。</li>\n</ol>\n<p>怎么样？看了我对主从复制这个过程的讲解，你应该搞明白了吧!</p>\n<p>你一般看到 binlog 就要想到主从复制。当然，除了主从复制之外，binlog 还能帮助我们实现数据恢复。</p>\n<p>🌈 拓展一下：</p>\n<p>不知道大家有没有使用过阿里开源的一个叫做 canal 的工具。这个工具可以帮助我们实现 MySQL 和其他数据源比如 Elasticsearch 或者另外一台 MySQL 数据库之间的数据同步。很显然，这个工具的底层原理肯定也是依赖 binlog。canal 的原理就是模拟 MySQL 主从复制的过程，解析 binlog 将数据同步到其他的数据源。</p>\n<p>另外，像咱们常用的分布式缓存组件 Redis 也是通过主从复制实现的读写分离。</p>\n<p>🌕 简单总结一下：</p>\n<p><strong>MySQL 主从复制是依赖于 binlog 。另外，常见的一些同步 MySQL 数据到其他数据源的工具（比如 canal）的底层一般也是依赖 binlog 。</strong></p>\n<h3>如何避免主从延迟？</h3>\n<p>读写分离对于提升数据库的并发非常有效，但是，同时也会引来一个问题：主库和从库的数据存在延迟，比如你写完主库之后，主库的数据同步到从库是需要时间的，这个时间差就导致了主库和从库的数据不一致性问题。这也就是我们经常说的 <strong>主从同步延迟</strong> 。</p>\n<p>如果我们的业务场景无法容忍主从同步延迟的话，应该如何避免呢（注意：我这里说的是避免而不是减少延迟）？</p>\n<p>这里提供两种我知道的方案（能力有限，欢迎补充），你可以根据自己的业务场景参考一下。</p>\n<h4>强制将读请求路由到主库处理</h4>\n<p>既然你从库的数据过期了，那我就直接从主库读取嘛！这种方案虽然会增加主库的压力，但是，实现起来比较简单，也是我了解到的使用最多的一种方式。</p>\n<p>比如 <code>Sharding-JDBC</code> 就是采用的这种方案。通过使用 Sharding-JDBC 的 <code>HintManager</code> 分片键值管理器，我们可以强制使用主库。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">HintManager</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> hintManager </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> HintManager</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">hintManager</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setMasterRouteOnly</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 继续JDBC操作</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于这种方案，你可以将那些必须获取最新数据的读请求都交给主库处理。</p>\n<h4>延迟读取</h4>\n<p>还有一些朋友肯定会想既然主从同步存在延迟，那我就在延迟之后读取啊，比如主从同步延迟 0.5s,那我就 1s 之后再读取数据。这样多方便啊！方便是方便，但是也很扯淡。</p>\n<p>不过，如果你是这样设计业务流程就会好很多：对于一些对数据比较敏感的场景，你可以在完成写请求之后，避免立即进行请求操作。比如你支付成功之后，跳转到一个支付成功的页面，当你点击返回之后才返回自己的账户。</p>\n<h4>总结</h4>\n<p>关于如何避免主从延迟，我们这里介绍了两种方案。实际上，延迟读取这种方案没办法完全避免主从延迟，只能说可以减少出现延迟的概率而已，实际项目中一般不会使用。</p>\n<p>总的来说，要想不出现延迟问题，一般还是要强制将那些必须获取最新数据的读请求都交给主库处理。如果你的项目的大部分业务场景对数据准确性要求不是那么高的话，这种方案还是可以选择的。</p>\n<h3>什么情况下会出现主从延迟？如何尽量减少延迟？</h3>\n<p>我们在上面的内容中也提到了主从延迟以及避免主从延迟的方法，这里我们再来详细分析一下主从延迟出现的原因以及应该如何尽量减少主从延迟。</p>\n<p>要搞懂什么情况下会出现主从延迟，我们需要先搞懂什么是主从延迟。</p>\n<p>MySQL 主从同步延时是指从库的数据落后于主库的数据，这种情况可能由以下两个原因造成：</p>\n<ol>\n<li>从库 I/O 线程接收 binlog 的速度跟不上主库写入 binlog 的速度，导致从库 relay log 的数据滞后于主库 binlog 的数据；</li>\n<li>从库 SQL 线程执行 relay log 的速度跟不上从库 I/O 线程接收 binlog 的速度，导致从库的数据滞后于从库 relay log 的数据。</li>\n</ol>\n<p>与主从同步有关的时间点主要有 3 个：</p>\n<ol>\n<li>主库执行完一个事务，写入 binlog，将这个时刻记为 T1；</li>\n<li>从库 I/O 线程接收到 binlog 并写入 relay log 的时刻记为 T2；</li>\n<li>从库 SQL 线程读取 relay log 同步数据本地的时刻记为 T3。</li>\n</ol>\n<p>结合我们上面讲到的主从复制原理，可以得出：</p>\n<ul>\n<li>T2 和 T1 的差值反映了从库 I/O 线程的性能和网络传输的效率，这个差值越小说明从库 I/O 线程的性能和网络传输效率越高。</li>\n<li>T3 和 T2 的差值反映了从库 SQL 线程执行的速度，这个差值越小，说明从库 SQL 线程执行速度越快。</li>\n</ul>\n<p>那什么情况下会出现出从延迟呢？这里列举几种常见的情况：</p>\n<ol>\n<li><strong>从库机器性能比主库差</strong>：从库接收 binlog 并写入 relay log 以及执行 SQL 语句的速度会比较慢（也就是 T2-T1 和 T3-T2 的值会较大），进而导致延迟。解决方法是选择与主库一样规格或更高规格的机器作为从库，或者对从库进行性能优化，比如调整参数、增加缓存、使用 SSD 等。</li>\n<li><strong>从库处理的读请求过多</strong>：从库需要执行主库的所有写操作，同时还要响应读请求，如果读请求过多，会占用从库的 CPU、内存、网络等资源，影响从库的复制效率（也就是 T2-T1 和 T3-T2 的值会较大，和前一种情况类似）。解决方法是引入缓存（推荐）、使用一主多从的架构，将读请求分散到不同的从库，或者使用其他系统来提供查询的能力，比如将 binlog 接入到 Hadoop、Elasticsearch 等系统中。</li>\n<li><strong>大事务</strong>：运行时间比较长，长时间未提交的事务就可以称为大事务。由于大事务执行时间长，并且从库上的大事务会比主库上的大事务花费更多的时间和资源，因此非常容易造成主从延迟。解决办法是避免大批量修改数据，尽量分批进行。类似的情况还有执行时间较长的慢 SQL ，实际项目遇到慢 SQL 应该进行优化。</li>\n<li><strong>从库太多</strong>：主库需要将 binlog 同步到所有的从库，如果从库数量太多，会增加同步的时间和开销（也就是 T2-T1 的值会比较大，但这里是因为主库同步压力大导致的）。解决方案是减少从库的数量，或者将从库分为不同的层级，让上层的从库再同步给下层的从库，减少主库的压力。</li>\n<li><strong>网络延迟</strong>：如果主从之间的网络传输速度慢，或者出现丢包、抖动等问题，那么就会影响 binlog 的传输效率，导致从库延迟。解决方法是优化网络环境，比如提升带宽、降低延迟、增加稳定性等。</li>\n<li><strong>单线程复制</strong>：MySQL5.5 及之前，只支持单线程复制。为了优化复制性能，MySQL 5.6 引入了 <strong>多线程复制</strong>，MySQL 5.7 还进一步完善了多线程复制。</li>\n<li><strong>复制模式</strong>：MySQL 默认的复制是异步的，必然会存在延迟问题。全同步复制不存在延迟问题，但性能太差了。半同步复制是一种折中方案，相对于异步复制，半同步复制提高了数据的安全性，减少了主从延迟（还是有一定程度的延迟）。MySQL 5.5 开始，MySQL 以插件的形式支持 <strong>semi-sync 半同步复制</strong>。并且，MySQL 5.7 引入了 <strong>增强半同步复制</strong> 。</li>\n<li>……</li>\n</ol>\n<p><a href=\"https://time.geekbang.org/column/intro/100020801?code=ieY8HeRSlDsFbuRtggbBQGxdTh-1jMASqEIeqzHAKrI%3D\" target=\"_blank\" rel=\"noopener noreferrer\">《MySQL 实战 45 讲》</a>这个专栏中的<a href=\"https://time.geekbang.org/column/article/77636\" target=\"_blank\" rel=\"noopener noreferrer\">读写分离有哪些坑？</a>这篇文章也有对主从延迟解决方案这一话题进行探讨，感兴趣的可以阅读学习一下。</p>\n<h2>分库分表</h2>\n<p>读写分离主要应对的是数据库读并发，没有解决数据库存储问题。试想一下：<strong>如果 MySQL 一张表的数据量过大怎么办?</strong></p>\n<p>换言之，<strong>我们该如何解决 MySQL 的存储压力呢？</strong></p>\n<p>答案之一就是 <strong>分库分表</strong>。</p>\n<h3>什么是分库？</h3>\n<p><strong>分库</strong> 就是将数据库中的数据分散到不同的数据库上，可以垂直分库，也可以水平分库。</p>\n<p><strong>垂直分库</strong> 就是把单一数据库按照业务进行划分，不同的业务使用不同的数据库，进而将一个数据库的压力分担到多个数据库。</p>\n<p>举个例子：说你将数据库中的用户表、订单表和商品表分别单独拆分为用户数据库、订单数据库和商品数据库。</p>\n<p></p>\n<p><strong>水平分库</strong> 是把同一个表按一定规则拆分到不同的数据库中，每个库可以位于不同的服务器上，这样就实现了水平扩展，解决了单表的存储和性能瓶颈的问题。</p>\n<p>举个例子：订单表数据量太大，你对订单表进行了水平切分（水平分表），然后将切分后的 2 张订单表分别放在两个不同的数据库。</p>\n<p></p>\n<h3>什么是分表？</h3>\n<p><strong>分表</strong> 就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。</p>\n<p><strong>垂直分表</strong> 是对数据表列的拆分，把一张列比较多的表拆分为多张表。</p>\n<p>举个例子：我们可以将用户信息表中的一些列单独抽出来作为一个表。</p>\n<p><strong>水平分表</strong> 是对数据表行的拆分，把一张行比较多的表拆分为多张表，可以解决单一表数据量过大的问题。</p>\n<p>举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。</p>\n<p>水平拆分只能解决单表数据量大的问题，为了提升性能，我们通常会选择将拆分后的多张表放在不同的数据库中。也就是说，水平分表通常和水平分库同时出现。</p>\n<p></p>\n<h3>什么情况下需要分库分表？</h3>\n<p>遇到下面几种场景可以考虑分库分表：</p>\n<ul>\n<li>单表的数据达到千万级别以上，数据库读写速度比较缓慢。</li>\n<li>数据库中的数据占用的空间越来越大，备份时间越来越长。</li>\n<li>应用的并发量太大（应该优先考虑其他性能优化方法，而非分库分表）。</li>\n</ul>\n<p>不过，分库分表的成本太高，如非必要尽量不要采用。而且，并不一定是单表千万级数据量就要分表，毕竟每张表包含的字段不同，它们在不错的性能下能够存放的数据量也不同，还是要具体情况具体分析。</p>\n<p>之前看过一篇文章分析 “<a href=\"https://juejin.cn/post/7165689453124517896\" target=\"_blank\" rel=\"noopener noreferrer\">InnoDB 中高度为 3 的 B+ 树最多可以存多少数据</a>”，写的挺不错，感兴趣的可以看看。</p>\n<h3>常见的分片算法有哪些？</h3>\n<p>分片算法主要解决了数据被水平分片之后，数据究竟该存放在哪个表的问题。</p>\n<p>常见的分片算法有：</p>\n<ul>\n<li><strong>哈希分片</strong>：求指定分片键的哈希，然后根据哈希值确定数据应被放置在哪个表中。哈希分片比较适合随机读写的场景，不太适合经常需要范围查询的场景。哈希分片可以使每个表的数据分布相对均匀，但对动态伸缩（例如新增一个表或者库）不友好。</li>\n<li><strong>范围分片</strong>：按照特定的范围区间（比如时间区间、ID 区间）来分配数据，比如 将 <code>id</code> 为 <code>1~299999</code> 的记录分到第一个表， <code>300000~599999</code> 的分到第二个表。范围分片适合需要经常进行范围查找且数据分布均匀的场景，不太适合随机读写的场景（数据未被分散，容易出现热点数据的问题）。</li>\n<li><strong>映射表分片</strong>：使用一个单独的表（称为映射表）来存储分片键和分片位置的对应关系。映射表分片策略可以支持任何类型的分片算法，如哈希分片、范围分片等。映射表分片策略是可以灵活地调整分片规则，不需要修改应用程序代码或重新分布数据。不过，这种方式需要维护额外的表，还增加了查询的开销和复杂度。</li>\n<li><strong>一致性哈希分片</strong>：将哈希空间组织成一个环形结构，将分片键和节点（数据库或表）都映射到这个环上，然后根据顺时针的规则确定数据或请求应该分配到哪个节点上，解决了传统哈希对动态伸缩不友好的问题。</li>\n<li><strong>地理位置分片</strong>：很多 NewSQL 数据库都支持地理位置分片算法，也就是根据地理位置（如城市、地域）来分配数据。</li>\n<li><strong>融合算法分片</strong>：灵活组合多种分片算法，比如将哈希分片和范围分片组合。</li>\n<li>……</li>\n</ul>\n<h3>分片键如何选择？</h3>\n<p>分片键（Sharding Key）是数据分片的关键字段。分片键的选择非常重要，它关系着数据的分布和查询效率。一般来说，分片键应该具备以下特点：</p>\n<ul>\n<li>具有共性，即能够覆盖绝大多数的查询场景，尽量减少单次查询所涉及的分片数量，降低数据库压力；</li>\n<li>具有离散性，即能够将数据均匀地分散到各个分片上，避免数据倾斜和热点问题；</li>\n<li>具有稳定性，即分片键的值不会发生变化，避免数据迁移和一致性问题；</li>\n<li>具有扩展性，即能够支持分片的动态增加和减少，避免数据重新分片的开销。</li>\n</ul>\n<p>实际项目中，分片键很难满足上面提到的所有特点，需要权衡一下。并且，分片键可以是表中多个字段的组合，例如取用户 ID 后四位作为订单 ID 后缀。</p>\n<h3>分库分表会带来什么问题呢？</h3>\n<p>记住，你在公司做的任何技术决策，不光是要考虑这个技术能不能满足我们的要求，是否适合当前业务场景，还要重点考虑其带来的成本。</p>\n<p>引入分库分表之后，会给系统带来什么挑战呢？</p>\n<ul>\n<li><strong>join 操作</strong>：同一个数据库中的表分布在了不同的数据库中，导致无法使用 join 操作。这样就导致我们需要手动进行数据的封装，比如你在一个数据库中查询到一个数据之后，再根据这个数据去另外一个数据库中找对应的数据。不过，很多大厂的资深 DBA 都是建议尽量不要使用 join 操作。因为 join 的效率低，并且会对分库分表造成影响。对于需要用到 join 操作的地方，可以采用多次查询业务层进行数据组装的方法。不过，这种方法需要考虑业务上多次查询的事务性的容忍度。</li>\n<li><strong>事务问题</strong>：同一个数据库中的表分布在了不同的数据库中，如果单个操作涉及到多个数据库，那么数据库自带的事务就无法满足我们的要求了。这个时候，我们就需要引入分布式事务了。关于分布式事务常见解决方案总结，网站上也有对应的总结：<a href=\"https://javaguide.cn/distributed-system/distributed-transaction.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://javaguide.cn/distributed-system/distributed-transaction.html</a> 。</li>\n<li><strong>分布式 ID</strong>：分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。我们如何为不同的数据节点生成全局唯一主键呢？这个时候，我们就需要为我们的系统引入分布式 ID 了。关于分布式 ID 的详细介绍&amp;实现方案总结，可以看我写的这篇文章：<a href=\"https://javaguide.cn/distributed-system/distributed-id.html\" target=\"_blank\" rel=\"noopener noreferrer\">分布式 ID 介绍&amp;实现方案总结</a>。</li>\n<li><strong>跨库聚合查询问题</strong>：分库分表会导致常规聚合查询操作，如 group by，order by 等变得异常复杂。这是因为这些操作需要在多个分片上进行数据汇总和排序，而不是在单个数据库上进行。为了实现这些操作，需要编写复杂的业务代码，或者使用中间件来协调分片间的通信和数据传输。这样会增加开发和维护的成本，以及影响查询的性能和可扩展性。</li>\n<li>……</li>\n</ul>\n<p>另外，引入分库分表之后，一般需要 DBA 的参与，同时还需要更多的数据库服务器，这些都属于成本。</p>\n<h3>分库分表有没有什么比较推荐的方案？</h3>\n<p>Apache ShardingSphere 是一款分布式的数据库生态系统， 可以将任意数据库转换为分布式数据库，并通过数据分片、弹性伸缩、加密等能力对原有数据库进行增强。</p>\n<p>ShardingSphere 项目（包括 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar）是当当捐入 Apache 的，目前主要由京东数科的一些巨佬维护。</p>\n<p>ShardingSphere 绝对可以说是当前分库分表的首选！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理、影子库、数据加密和脱敏等功能。</p>\n<p>ShardingSphere 提供的功能如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/high-performance/shardingsphere-features.png\" alt=\"ShardingSphere 提供的功能\"></p>\n<p>ShardingSphere 的优势如下（摘自 ShardingSphere 官方文档：<a href=\"https://shardingsphere.apache.org/document/current/cn/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">https://shardingsphere.apache.org/document/current/cn/overview/</a>）：</p>\n<ul>\n<li>极致性能：驱动程序端历经长年打磨，效率接近原生 JDBC，性能极致。</li>\n<li>生态兼容：代理端支持任何通过 MySQL/PostgreSQL 协议的应用访问，驱动程序端可对接任意实现 JDBC 规范的数据库。</li>\n<li>业务零侵入：面对数据库替换场景，ShardingSphere 可满足业务无需改造，实现平滑业务迁移。</li>\n<li>运维低成本：在保留原技术栈不变前提下，对 DBA 学习、管理成本低，交互友好。</li>\n<li>安全稳定：基于成熟数据库底座之上提供增量能力，兼顾安全性及稳定性。</li>\n<li>弹性扩展：具备计算、存储平滑在线扩展能力，可满足业务多变的需求。</li>\n<li>开放生态：通过多层次（内核、功能、生态）插件化能力，为用户提供可定制满足自身特殊需求的独有系统。</li>\n</ul>\n<p>另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。</p>\n<p>不过，还是要多提一句：<strong>现在很多公司都是用的类似于 TiDB 这种分布式关系型数据库，不需要我们手动进行分库分表（数据库层面已经帮我们做了），也不需要解决手动分库分表引入的各种问题，直接一步到位，内置很多实用的功能（如无感扩容和缩容、冷热存储分离）！如果公司条件允许的话，个人也是比较推荐这种方式！</strong></p>\n<h3>分库分表后，数据怎么迁移呢？</h3>\n<p>分库分表之后，我们如何将老库（单库单表）的数据迁移到新库（分库分表后的数据库系统）呢？</p>\n<p>比较简单同时也是非常常用的方案就是<strong>停机迁移</strong>，写个脚本老库的数据写到新库中。比如你在凌晨 2 点，系统使用的人数非常少的时候，挂一个公告说系统要维护升级预计 1 小时。然后，你写一个脚本将老库的数据都同步到新库中。</p>\n<p>如果你不想停机迁移数据的话，也可以考虑<strong>双写方案</strong>。双写方案是针对那种不能停机迁移的场景，实现起来要稍微麻烦一些。具体原理是这样的：</p>\n<ul>\n<li>我们对老库的更新操作（增删改），同时也要写入新库（双写）。如果操作的数据不存在于新库的话，需要插入到新库中。 这样就能保证，咱们新库里的数据是最新的。</li>\n<li>在迁移过程，双写只会让被更新操作过的老库中的数据同步到新库，我们还需要自己写脚本将老库中的数据和新库的数据做比对。如果新库中没有，那咱们就把数据插入到新库。如果新库有，旧库没有，就把新库对应的数据删除（冗余数据清理）。</li>\n<li>重复上一步的操作，直到老库和新库的数据一致为止。</li>\n</ul>\n<p>想要在项目中实施双写还是比较麻烦的，很容易会出现问题。我们可以借助上面提到的数据库同步工具 Canal 做增量数据迁移（还是依赖 binlog，开发和维护成本较低）。</p>\n<h2>总结</h2>\n<ul>\n<li>读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。 这样的话，就能够小幅提升写性能，大幅提升读性能。</li>\n<li>读写分离基于主从复制，MySQL 主从复制是依赖于 binlog 。</li>\n<li><strong>分库</strong> 就是将数据库中的数据分散到不同的数据库上。<strong>分表</strong> 就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。</li>\n<li>引入分库分表之后，需要系统解决事务、分布式 id、无法 join 操作问题。</li>\n<li>现在很多公司都是用的类似于 TiDB 这种分布式关系型数据库，不需要我们手动进行分库分表（数据库层面已经帮我们做了），也不需要解决手动分库分表引入的各种问题，直接一步到位，内置很多实用的功能（如无感扩容和缩容、冷热存储分离）！如果公司条件允许的话，个人也是比较推荐这种方式！</li>\n<li>如果必须要手动分库分表的话，ShardingSphere 是首选！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理等功能。另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高性能"
      ]
    },
    {
      "title": "常见SQL优化手段总结（付费）",
      "url": "https://javaguide.cn/high-performance/sql-optimization.html",
      "id": "https://javaguide.cn/high-performance/sql-optimization.html",
      "summary": "常见 SQL 优化手段总结 相关的内容为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。 （点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 JavaGuide 的补充完善，两者可以配合使用。 《Java 面试指北》内容概览 为了帮助更多同学准备 Java 面试以及学习 Java ，我创...",
      "content_html": "<p><strong>常见 SQL 优化手段总结</strong> 相关的内容为我的<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了<a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a>中。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/sql-optimization.png\" alt=\"\"></p>\n<p><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href=\"https://javaguide.cn/#/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的补充完善，两者可以配合使用。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a> 。</p>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> ，干货多多！</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/javamianshizhibei/sql-optimization.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "高性能"
      ]
    },
    {
      "title": "程序人生",
      "url": "https://javaguide.cn/high-quality-technical-articles/",
      "id": "https://javaguide.cn/high-quality-technical-articles/",
      "summary": "程序人生 这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 这里主要会收录一些我看到的或者我自己写的和程序员密切相关的非技术类的优质文章，每一篇都值得你阅读...",
      "content_html": "\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>这里主要会收录一些我看到的或者我自己写的和程序员密切相关的非技术类的优质文章，每一篇都值得你阅读 3 遍以上！常看常新！</p>\n<h2>练级攻略</h2>\n<ul>\n<li><a href=\"/high-quality-technical-articles/advanced-programmer/programmer-quickly-learn-new-technology.html\" target=\"_blank\">程序员如何快速学习新技术</a></li>\n<li><a href=\"/high-quality-technical-articles/advanced-programmer/the-growth-strategy-of-the-technological-giant.html\" target=\"_blank\">程序员的技术成长战略</a></li>\n<li><a href=\"/high-quality-technical-articles/advanced-programmer/ten-years-of-dachang-growth-road.html\" target=\"_blank\">十年大厂成长之路</a></li>\n<li><a href=\"/high-quality-technical-articles/advanced-programmer/meituan-three-year-summary-lesson-10.html\" target=\"_blank\">美团三年，总结的 10 条血泪教训</a></li>\n<li><a href=\"/high-quality-technical-articles/advanced-programmer/seven-tips-for-becoming-an-advanced-programmer.html\" target=\"_blank\">给想成长为高级别开发同学的七条建议</a></li>\n<li><a href=\"/high-quality-technical-articles/advanced-programmer/20-bad-habits-of-bad-programmers.html\" target=\"_blank\">糟糕程序员的 20 个坏习惯</a></li>\n<li><a href=\"/high-quality-technical-articles/advanced-programmer/thinking-about-technology-and-business-after-five-years-of-work.html\" target=\"_blank\">工作五年之后，对技术和业务的思考</a></li>\n</ul>\n<h2>个人经历</h2>\n<ul>\n<li><a href=\"/high-quality-technical-articles/personal-experience/four-year-work-in-tencent-summary.html\" target=\"_blank\">从校招入职腾讯的四年工作总结</a></li>\n<li><a href=\"/high-quality-technical-articles/personal-experience/two-years-of-back-end-develop--experience-in-didi-and-toutiao.html\" target=\"_blank\">我在滴滴和头条的两年后端研发工作经验分享</a></li>\n<li><a href=\"/high-quality-technical-articles/personal-experience/8-years-programmer-work-summary.html\" target=\"_blank\">一个中科大差生的 8 年程序员工作总结</a></li>\n<li><a href=\"/high-quality-technical-articles/personal-experience/huawei-od-275-days.html\" target=\"_blank\">华为 OD 275 天后，我进了腾讯！</a></li>\n</ul>\n<h2>程序员</h2>\n<ul>\n<li><a href=\"/high-quality-technical-articles/programmer/high-value-certifications-for-programmers.html\" target=\"_blank\">程序员最该拿的几种高含金量证书</a></li>\n<li><a href=\"/high-quality-technical-articles/programmer/how-do-programmers-publish-a-technical-book.html\" target=\"_blank\">程序员怎样出版一本技术书</a></li>\n<li><a href=\"/high-quality-technical-articles/programmer/efficient-book-publishing-and-practice-guide.html\" target=\"_blank\">程序员高效出书避坑和实践指南</a></li>\n</ul>\n<h2>面试</h2>\n<ul>\n<li><a href=\"/high-quality-technical-articles/interview/the-experience-of-get-offer-from-over-20-big-companies.html\" target=\"_blank\">斩获 20+ 大厂 offer 的面试经验分享</a></li>\n<li><a href=\"/high-quality-technical-articles/interview/the-experience-and-thinking-of-an-interview-experienced-by-an-older-programmer.html\" target=\"_blank\">一位大龄程序员所经历的面试的历炼和思考</a></li>\n<li><a href=\"/high-quality-technical-articles/interview/technical-preliminary-preparation.html\" target=\"_blank\">从面试官和候选者的角度谈如何准备技术初试</a></li>\n<li><a href=\"/high-quality-technical-articles/interview/screen-candidates-for-packaging.html\" target=\"_blank\">包装严重的 IT 行业，作为面试官，我是如何甄别应聘者的包装程度</a></li>\n<li><a href=\"/high-quality-technical-articles/interview/summary-of-spring-recruitment.html\" target=\"_blank\">普通人的春招总结（阿里、腾讯 offer）</a></li>\n<li><a href=\"/high-quality-technical-articles/interview/my-personal-experience-in-2021.html\" target=\"_blank\">2021 校招我的个人经历和经验</a></li>\n<li><a href=\"/high-quality-technical-articles/interview/how-to-examine-the-technical-ability-of-programmers-in-the-first-test-of-technology.html\" target=\"_blank\">如何在技术初试中考察程序员的技术能力</a></li>\n<li><a href=\"/high-quality-technical-articles/interview/some-secrets-about-alibaba-interview.html\" target=\"_blank\">阿里技术面试的一些秘密</a></li>\n</ul>\n<h2>工作</h2>\n<ul>\n<li><a href=\"/high-quality-technical-articles/work/get-into-work-mode-quickly-when-you-join-a-company.html\" target=\"_blank\">新入职一家公司如何快速进入工作状态</a></li>\n<li><a href=\"/high-quality-technical-articles/work/32-tips-improving-career.html\" target=\"_blank\">32 条总结教你提升职场经验</a></li>\n<li><a href=\"/high-quality-technical-articles/work/employee-performance.html\" target=\"_blank\">聊聊大厂的绩效考核</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "面试太紧张怎么办？",
      "url": "https://javaguide.cn/interview-preparation/how-to-handle-interview-nerves.html",
      "id": "https://javaguide.cn/interview-preparation/how-to-handle-interview-nerves.html",
      "summary": "很多小伙伴在第一次技术面试时都会感到紧张甚至害怕，面试结束后还会有种“懵懵的”感觉。我也经历过类似的状况，可以说是深有体会。其实，紧张是很正常的——它代表你对面试的重视，也来自于对未知结果的担忧。但如果过度紧张，反而会影响你的临场发挥。 下面，我就分享一些自己的心得，帮大家更好地应对面试中的紧张情绪。 试着接受紧张情绪，调整心态 首先要明白，紧张是正常...",
      "content_html": "<p>很多小伙伴在第一次技术面试时都会感到紧张甚至害怕，面试结束后还会有种“懵懵的”感觉。我也经历过类似的状况，可以说是深有体会。其实，<strong>紧张是很正常的</strong>——它代表你对面试的重视，也来自于对未知结果的担忧。但如果过度紧张，反而会影响你的临场发挥。</p>\n<p>下面，我就分享一些自己的心得，帮大家更好地应对面试中的紧张情绪。</p>\n<h2>试着接受紧张情绪，调整心态</h2>\n<p>首先要明白，紧张是正常情绪，特别是初次或前几次面试时，多少都会有点忐忑。不要过分排斥这种情绪，可以适当地“拥抱”它：</p>\n<ul>\n<li><strong>搞清楚面试的本质</strong>：面试本质上是一场与面试官的深入交流，是一个双向选择的过程。面试失败并不意味着你的价值和努力被否定，而可能只是因为你与目标岗位暂时不匹配，或者仅仅是一次 KPI 面试，这家公司可能压根就没有真正的招聘需求。失败的原因也可能是某些知识点、项目经验或表达方式未能充分展现出你的能力。即便这次面试未通过，也不妨碍你继续尝试其他公司，完全不慌！</li>\n<li><strong>不要害怕面试官</strong>：很多求职者平时和同学朋友交流沟通的蛮好，一到面试就害怕了。面试官和求职者双方是平等的，以后说不定就是同事关系。也不要觉得面试官就很厉害，实际上，面试官的水平也参差不齐。他们提出的问题，可能自己也没有完全理解。</li>\n<li><strong>给自己积极的心理暗示</strong>：告诉自己“有点紧张没关系，这只能让我更专注，心跳加快是我在给自己打气，我一定可以回答的很好！”。</li>\n</ul>\n<h2>提前准备，减少不确定性</h2>\n<p><strong>不确定性越多，越容易紧张。</strong> 如果你能够在面试前做充分的准备，很多“未知”就会消失，紧张情绪自然会减轻很多。</p>\n<h3>认真准备技术面试</h3>\n<ul>\n<li><strong>优先梳理核心知识点</strong>：比如计算基础、数据库、Java 基础、Java 集合、并发编程、SpringBoot（这里以 Java 后端方向为例）等。如果时间不够，可以分轻重缓急，有重点地复习。强烈推荐阅读一下 <a href=\"https://javaguide.cn/interview-preparation/key-points-of-interview.html\" target=\"_blank\" rel=\"noopener noreferrer\">Java 面试重点总结(重要)</a>这篇文章。</li>\n<li><strong>精心准备项目经历</strong>：认真思考你简历上最重要的项目（面试以前两个项目为主，尤其是第一个），它们的技术难点、业务逻辑、架构设计，以及可能被面试官深挖的点。把你的思考总结成可能出现的面试问题，并尝试回答。</li>\n</ul>\n<h3>模拟面试和自测</h3>\n<ul>\n<li><strong>约朋友或同学互相提问</strong>：以真实的面试场景来进行演练，并及时对回答进行诊断和反馈。</li>\n<li><strong>线上练习</strong>：很多平台都提供 AI 模拟面试，能比较真实地模拟面试官提问情境。</li>\n<li><strong>面经</strong>：平时可以多看一些前辈整理的面经，尤其是目标岗位或目标公司的面经，总结高频考点和常见问题。</li>\n<li><strong>技术面试题自测</strong>：在 <a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a> 的 「技术面试题自测篇」 ，我总结了 Java 面试中最重要的知识点的最常见的面试题并按照面试提问的方式展现出来。其中，每一个问题都有提示和重要程度说明，非常适合用来自测。</li>\n</ul>\n<p><a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a> 的 「技术面试题自测篇」概览：</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/technical-interview-questions-self-test.png\" alt=\"技术面试题自测篇\"></p>\n<h3>多表达</h3>\n<p>平时要多说，多表达出来，不要只是在心里面想，不然真正面试的时候会发现想的和说的不太一样。</p>\n<p>我前面推荐的模拟面试和自测，有一部分原因就是为了能够多多表达。</p>\n<h3>多面试</h3>\n<ul>\n<li><strong>先小厂后大厂</strong>：可以先去一些规模较小或者对你来说压力没那么大的公司试试手，积累一些实战经验，增加一些信心；等熟悉了面试流程、能够更从容地回答问题后，再去挑战自己心仪的大厂或热门公司。</li>\n<li><strong>积累“失败经验”</strong>：不要怕被拒，有些时候被拒绝却能从中学到更多。多复盘，多思考到底是哪个环节出了问题，再用更好的状态迎接下一次面试。</li>\n</ul>\n<h3>保证休息</h3>\n<ul>\n<li><strong>留出充裕时间</strong>：面试前尽量不要排太多事情，保证自己能有个好状态去参加面试。</li>\n<li><strong>保证休息</strong>：充足睡眠有助于情绪稳定，也能让你在面试时更清晰地思考问题。</li>\n</ul>\n<h2>遇到不会的问题不要慌</h2>\n<p>一场面试，不太可能面试官提的每一个问题你都能轻松应对，除非这场面试非常简单。</p>\n<p>在面试过程中，遇到不会的问题，首先要做的是快速回顾自己过往的知识，看是否能找到突破口。如果实在没有思路的话，可以真诚地向面试要一些提示比如谈谈你对这个问题的理解以及困惑点。一定不要觉得向面试官要提示很可耻，只要沟通没问题，这其实是很正常的。最怕的就是自己不会，还乱回答一通，这样会让面试官觉得你技术态度有问题。</p>\n<h2>面试结束后的复盘</h2>\n<p>很多人关注面试前的准备，却忽略了面试后的复盘，这一步真的非常非常非常重要：</p>\n<ol>\n<li><strong>记录面试中的问题</strong>：无论回答得好坏，都把它们写下来。如果问到了一些没想过的问题，可以认真思考并在面试后补上答案。</li>\n<li><strong>反思自己的表现</strong>：有没有遇到卡壳的地方？是知识没准备到还是过于紧张导致表达混乱？下次如何改进？</li>\n<li><strong>持续完善自己的“面试题库”</strong>：把新的问题补充进去，不断拓展自己的知识面，也逐步降低对未知问题的恐惧感。</li>\n</ol>\n",
      "image": "https://oss.javaguide.cn/javamianshizhibei/technical-interview-questions-self-test.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "面试准备"
      ]
    },
    {
      "title": "校招没有实习经历怎么办？",
      "url": "https://javaguide.cn/interview-preparation/internship-experience.html",
      "id": "https://javaguide.cn/interview-preparation/internship-experience.html",
      "summary": "由于目前的面试太卷，对于犹豫是否要找实习的同学来说，个人建议不论是本科生还是研究生都应该在参加校招面试之前，争取一下不错的实习机会，尤其是大厂的实习机会，日常实习或者暑期实习都可以。当然，如果大厂实习面不上，中小厂实习也是可以接受的。 不过，现在的实习是真难找，今年有非常多的同学没有找到实习，有一部分甚至是 211/985 名校的同学。 如果实在是找不...",
      "content_html": "<p>由于目前的面试太卷，对于犹豫是否要找实习的同学来说，个人建议不论是本科生还是研究生都应该在参加校招面试之前，争取一下不错的实习机会，尤其是大厂的实习机会，日常实习或者暑期实习都可以。当然，如果大厂实习面不上，中小厂实习也是可以接受的。</p>\n<p>不过，现在的实习是真难找，今年有非常多的同学没有找到实习，有一部分甚至是 211/985 名校的同学。</p>\n<p>如果实在是找不到合适的实习的话，那也没办法，我们应该多花时间去把下面这三件事情给做好：</p>\n<ol>\n<li>补强项目经历</li>\n<li>持续完善简历</li>\n<li>准备技术面试</li>\n</ol>\n<h2>补强项目经历</h2>\n<p>校招没有实习经历的话，找工作比较吃亏（没办法，太卷了），需要在项目经历部分多发力弥补一下。</p>\n<p>建议你尽全力地去补强自己的项目经历，完善现有的项目或者去做更有亮点的项目，尽可能地通过项目经历去弥补一些。</p>\n<p>你面试中的重点就是你的项目经历涉及到的知识点，如果你的项目经历比较简单的话，面试官直接不知道问啥了。另外，你的项目经历中不涉及的知识点，但在技能介绍中提到的知识点也很大概率会被问到。像 Redis 这种基本是面试 Java 后端岗位必备的技能，我觉得大部分面试官应该都会问。</p>\n<p>推荐阅读一下网站的这篇文章：<a href=\"https://javaguide.cn/interview-preparation/project-experience-guide.html\" target=\"_blank\" rel=\"noopener noreferrer\">项目经验指南</a>。</p>\n<h2><strong>完善简历</strong></h2>\n<p>一定一定一定要重视简历啊！建议至少花 2~3 天时间来专门完善自己的简历。并且，后续还要持续完善。</p>\n<p>对于面试官来说，筛选简历的时候会比较看重下面这些维度：</p>\n<ol>\n<li><strong>实习/工作经历</strong>：看你是否有不错的实习经历，大厂且与面试岗位相关的实习/工作经历最佳。</li>\n<li><strong>获奖经历</strong>：如果有含金量比较高（知名度较高的赛事比如 ACM、阿里云天池）的获奖经历的话，也是加分点，尤其是对于校招来说，这类求职者属于是很多大厂争抢的对象（但不是说获奖了就能进大厂，还是要面试表现还可以）。对于社招来说，获奖经历作用相对较小，通常会更看重过往的工作经历和项目经验。</li>\n<li><strong>项目经验</strong>：项目经验对于面试来说非常重要，面试官会重点关注，同时也是有水平的面试提问的重点。</li>\n<li><strong>技能匹配度</strong>：看你的技能是否满足岗位的需求。在投递简历之前，一定要确认一下自己的技能介绍中是否缺少一些你要投递的对应岗位的技能要求。</li>\n<li><strong>学历</strong>：相对其他行业来说，程序员求职面试对于学历的包容度还是比较高的，只要你在其他方面有过人之出的话，也是可以弥补一下学历的缺陷的。你要知道，很多行业比如律师、金融，学历就是敲门砖，学历没达到要求，直接面试机会都没有。不过，由于现在面试越来越卷，一些大厂、国企和研究所也开始卡学历了，很多岗位都要求 211/985，甚至必须需要硕士学历。总之，学历很难改变，学校较差的话，就投递那些对学历没有明确要求的公司即可，努力提升自己的其他方面的硬实力。</li>\n</ol>\n<p>对于大部分求职者来说，实习/工作经历、项目经验、技能匹配度更重要一些。不过，不排除一些公司会因为学历卡人。</p>\n<p>详细的程序员简历编写指南可以参考这篇文章：<a href=\"https://javaguide.cn/interview-preparation/resume-guide.html\" target=\"_blank\" rel=\"noopener noreferrer\">程序员简历编写指南(重要)</a>。</p>\n<h2><strong>准备技术面试</strong></h2>\n<p>面试之前一定要提前准备一下常见的面试题也就是八股文：</p>\n<ul>\n<li>自己面试中可能涉及哪些知识点、那些知识点是重点。</li>\n<li>面试中哪些问题会被经常问到、面试中自己该如何回答。(强烈不推荐死记硬背，第一：通过背这种方式你能记住多少？能记住多久？第二：背题的方式的学习很难坚持下去！)</li>\n</ul>\n<p>Java 后端面试复习的重点请看这篇文章：<a href=\"https://javaguide.cn/interview-preparation/key-points-of-interview.html\" target=\"_blank\" rel=\"noopener noreferrer\">Java 后端的面试重点是什么?</a>。</p>\n<p>不同类型的公司对于技能的要求侧重点是不同的比如腾讯、字节可能更重视计算机基础比如网络、操作系统这方面的内容。阿里、美团这种可能更重视你的项目经历、实战能力。</p>\n<p>一定不要抱着一种思想，觉得八股文或者基础问题的考查意义不大。如果你抱着这种思想复习的话，那效果可能不会太好。实际上，个人认为还是很有意义的，八股文或者基础性的知识在日常开发中也会需要经常用到。例如，线程池这块的拒绝策略、核心参数配置什么的，如果你不了解，实际项目中使用线程池可能就用的不是很明白，容易出现问题。而且，其实这种基础性的问题是最容易准备的，像各种底层原理、系统设计、场景题以及深挖你的项目这类才是最难的！</p>\n<p>八股文资料首推我的 <a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a> 和 <a href=\"https://javaguide.cn/home.html\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 。里面不仅仅是原创八股文，还有很多对实际开发有帮助的干货。除了我的资料之外，你还可以去网上找一些其他的优质的文章、视频来看。</p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "面试准备"
      ]
    },
    {
      "title": "优质面经汇总(付费)",
      "url": "https://javaguide.cn/interview-preparation/interview-experience.html",
      "id": "https://javaguide.cn/interview-preparation/interview-experience.html",
      "summary": "古人云:“他山之石，可以攻玉” 。善于学习借鉴别人的面试的成功经验或者失败的教训，可以让自己少走许多弯路。 在 的 「面经篇」 ，我分享了 15+ 篇高质量的 Java 后端面经，有校招的，也有社招的，有大厂的，也有中小厂的。 如果你是非科班的同学，也能在这些文章中找到对应的非科班的同学写的面经。 并且，知识星球还有专门分享面经和面试题的专题，里面会分...",
      "content_html": "<p>古人云:“<strong>他山之石，可以攻玉</strong>” 。善于学习借鉴别人的面试的成功经验或者失败的教训，可以让自己少走许多弯路。</p>\n<p>在 <strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong> 的 <strong>「面经篇」</strong> ，我分享了 15+ 篇高质量的 Java 后端面经，有校招的，也有社招的，有大厂的，也有中小厂的。</p>\n<p>如果你是非科班的同学，也能在这些文章中找到对应的非科班的同学写的面经。</p>\n<p><img src=\"https://oss.javaguide.cn/githubjuejinjihua/thinkimage-20220612185810480.png\" alt=\"\"></p>\n<p>并且，<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>还有专门分享面经和面试题的专题，里面会分享很多优质的面经和面试题。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304120018731.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220628101743381.png\" alt=\"\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220628101805897.png\" alt=\"\"></p>\n<p>相比于牛客网或者其他网站的面经，《Java 面试指北》中整理的面经质量更高，并且，我会提供优质的参考资料。</p>\n<p>有很多同学要说了：“为什么不直接给出具体答案呢？”。主要原因有如下两点：</p>\n<ol>\n<li>参考资料解释的要更详细一些，还可以顺便让你把相关的知识点复习一下。</li>\n<li>给出的参考资料基本都是我的原创，假如后续我想对面试问题的答案进行完善，就不需要挨个把之前的面经写的答案给修改了（面试中的很多问题都是比较类似的）。当然了，我的原创文章也不太可能覆盖到面试的每个点，部分面试问题的答案，我是精选的其他技术博主写的优质文章，文章质量都很高。</li>\n</ol>\n<p><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href=\"https://javaguide.cn/#/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的补充完善，两者可以配合使用。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a> 。</p>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> ，干货多多！</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n",
      "image": "https://oss.javaguide.cn/githubjuejinjihua/thinkimage-20220612185810480.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "Java 学习路线(最新版，4w+字)",
      "url": "https://javaguide.cn/interview-preparation/java-roadmap.html",
      "id": "https://javaguide.cn/interview-preparation/java-roadmap.html",
      "summary": "重要说明 本学习路线保持年度系统性修订，严格同步 Java 技术生态与招聘市场的最新动态，确保内容时效性与前瞻性。 历时一个月精心打磨，笔者基于当下 Java 后端开发岗位招聘的最新要求，对既有学习路线进行了全面升级。本次升级涵盖技术栈增删、学习路径优化、配套学习资源更新等维度，力争构建出更符合 Java 开发者成长曲线的知识体系。 Java 学习路线...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">重要说明</p>\n<p>本学习路线保持<strong>年度系统性修订</strong>，严格同步 Java 技术生态与招聘市场的最新动态，<strong>确保内容时效性与前瞻性</strong>。</p>\n</div>\n<p>历时一个月精心打磨，笔者基于当下 Java 后端开发岗位招聘的最新要求，对既有学习路线进行了全面升级。本次升级涵盖技术栈增删、学习路径优化、配套学习资源更新等维度，力争构建出更符合 Java 开发者成长曲线的知识体系。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/java-road-map-pdf.png\" alt=\"Java 学习路线 PDF 概览\"></p>\n<p>这可能是你见过的最用心、最全面的 Java 后端学习路线。这份学习路线共包含 <strong>4w+</strong> 字，但你完全不用担心内容过多而学不完。我会根据学习难度，划分出适合找小厂工作必学的内容，以及适合逐步提升 Java 后端开发能力的学习路径。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/java-road-map.png\" alt=\"Java 学习路线图\"></p>\n<p>对于初学者，你可以按照这篇文章推荐的学习路线和资料进行系统性的学习；对于有经验的开发者，你可以根据这篇文章更一步地深入学习 Java 后端开发，提升个人竞争力。</p>\n<p>在看这份学习路线的过程中，建议搭配 <a href=\"https://javaguide.cn/interview-preparation/key-points-of-interview.html\" target=\"_blank\" rel=\"noopener noreferrer\">Java 面试重点总结(重要)</a>，可以让你在学习过程中更有目的性。</p>\n<p>由于这份学习路线内容太多，因此我将其整理成了 PDF 版本（共 <strong>61</strong> 页），方便大家阅读。这份 PDF 有黑夜和白天两种阅读版本，满足大家的不同需求。</p>\n<p>这份学习路线的获取方法很简单：直接在公众号「<strong>JavaGuide</strong>」后台回复“<strong>学习路线</strong>”即可获取。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/interview-preparation/java-road-map-pdf.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "面试准备"
      ]
    },
    {
      "title": "Java后端面试重点总结",
      "url": "https://javaguide.cn/interview-preparation/key-points-of-interview.html",
      "id": "https://javaguide.cn/interview-preparation/key-points-of-interview.html",
      "summary": "友情提示 本文节选自 。这是一份教你如何更高效地准备面试的专栏，内容和 JavaGuide 互补，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ……）、优质面经等内容。 Java 后端面试哪些知识点是重点？ 准备面试的时候，具体哪些知识点是重点呢？如何把握重点？ 给你几点靠谱的建议： Java 基础、集合、并发、MySQL、Redis 、Spri...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">友情提示</p>\n<p>本文节选自 <strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong>。这是一份教你如何更高效地准备面试的专栏，内容和 JavaGuide 互补，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ……）、优质面经等内容。</p>\n</div>\n<h2>Java 后端面试哪些知识点是重点？</h2>\n<p><strong>准备面试的时候，具体哪些知识点是重点呢？如何把握重点？</strong></p>\n<p>给你几点靠谱的建议：</p>\n<ol>\n<li>Java 基础、集合、并发、MySQL、Redis 、Spring、Spring Boot 这些 Java 后端开发必备的知识点（MySQL + Redis &gt;= Java &gt; Spring + Spring Boot）。大厂以及中小厂的面试问的比较多的就是这些知识点。Spring 和 Spring Boot 这俩框架类的知识点相对前面的知识点来说重要性要稍低一些，但一般面试也会问一些，尤其是中小厂。并发知识一般中大厂提问更多也更难，尤其是大厂喜欢深挖底层，很容易把人问倒。计算机基础相关的内容会在下面提到。</li>\n<li>你的项目经历涉及到的知识点是重中之重，有水平的面试官都是会根据你的项目经历来问的。举个例子，你的项目经历使用了 Redis 来做限流，那 Redis 相关的八股文（比如 Redis 常见数据结构）以及限流相关的八股文（比如常见的限流算法）你就应该多花更多心思来搞懂吃透！你把项目经历上的知识点吃透之后，再把你简历上哪些写熟练掌握的技术给吃透，最后再去花时间准备其他知识点。</li>\n<li>针对自身找工作的需求，你又可以适当地调整复习的重点。像中小厂一般问计算机基础比较少一些，有些大厂比如字节比较重视计算机基础尤其是算法。这样的话，如果你的目标是中小厂的话，计算机基础就准备面试来说不是那么重要了。如果复习时间不够的话，可以暂时先放放，腾出时间给其他重要的知识点。</li>\n<li>一般校招的面试不会强制要求你会分布式/微服务、高并发的知识（不排除个别岗位有这方面的硬性要求），所以到底要不要掌握还是要看你个人当前的实际情况。如果你会这方面的知识的话，对面试相对来说还是会更有利一些（想要让项目经历有亮点，还是得会一些性能优化的知识。性能优化的知识这也算是高并发知识的一个小分支了）。如果你的技能介绍或者项目经历涉及到分布式/微服务、高并发的知识，那建议你尽量也要抽时间去认真准备一下，面试中很可能会被问到，尤其是项目经历用到的时候。不过，也还是主要准备写在简历上的那些知识点就好。</li>\n<li>JVM 相关的知识点，一般是大厂（例如美团、阿里）和一些不错的中厂（例如携程、顺丰、招银网络）才会问到，面试国企、差一点的中厂和小厂就没必要准备了。JVM 面试中比较常问的是 <a href=\"https://javaguide.cn/java/jvm/memory-area.html\" target=\"_blank\" rel=\"noopener noreferrer\">Java 内存区域</a>、<a href=\"https://javaguide.cn/java/jvm/jvm-garbage-collection.html\" target=\"_blank\" rel=\"noopener noreferrer\">JVM 垃圾回收</a>、<a href=\"https://javaguide.cn/java/jvm/classloader.html\" target=\"_blank\" rel=\"noopener noreferrer\">类加载器和双亲委派模型</a> 以及 JVM 调优和问题排查（我之前分享过一些<a href=\"https://t.zsxq.com/0bsAac47U\" target=\"_blank\" rel=\"noopener noreferrer\">常见的线上问题案例</a>，里面就有 JVM 相关的）。</li>\n<li>不同的大厂面试侧重点也会不同。比如说你要去阿里这种公司的话，项目和八股文就是重点，阿里笔试一般会有代码题，进入面试后就很少问代码题了，但是对原理性的问题问的比较深，经常会问一些你对技术的思考。再比如说你要面试字节这种公司，那计算机基础，尤其是算法是重点，字节的面试十分注重代码功底，有时候开始面试就会直接甩给你一道代码题，写出来再谈别的。也会问面试八股文，以及项目，不过，相对来说要少很多。建议你看一下这篇文章 <a href=\"https://mp.weixin.qq.com/s/pBsGQNxvRupZeWt4qZReIA\" target=\"_blank\" rel=\"noopener noreferrer\">为了解开互联网大厂秋招内幕，我把他们全面了一遍</a>，了解一下常见大厂的面试题侧重点。</li>\n<li>多去找一些面经看看，尤其你目标公司或者类似公司对应岗位的面经。这样可以实现针对性的复习，还能顺便自测一波，检查一下自己的掌握情况。</li>\n</ol>\n<p>看似 Java 后端八股文很多，实际把复习范围一缩小，重要的东西就是那些。考虑到时间问题，你不可能连一些比较冷门的知识点也给准备了。这没必要，主要精力先放在那些重要的知识点即可。</p>\n<h2>如何更高效地准备八股文？</h2>\n<p>对于技术八股文来说，尽量不要死记硬背，这种方式非常枯燥且对自身能力提升有限！但是！想要一点不背是不太现实的，只是说要结合实际应用场景和实战来理解记忆。</p>\n<p>我一直觉得面试八股文最好是和实际应用场景和实战相结合。很多同学现在的方向都错了，上来就是直接背八股文，硬生生学成了文科，那当然无趣了。</p>\n<p>举个例子：你的项目中需要用到 Redis 来做缓存，你对照着官网简单了解并实践了简单使用 Redis 之后，你去看了 Redis 对应的八股文。你发现 Redis 可以用来做限流、分布式锁，于是你去在项目中实践了一下并掌握了对应的八股文。紧接着，你又发现 Redis 内存不够用的情况下，还能使用 Redis Cluster 来解决，于是你就又去实践了一下并掌握了对应的八股文。</p>\n<p><strong>一定要记住你的主要目标是理解和记关键词，而不是像背课文一样一字一句地记下来，这样毫无意义！效率最低，对自身帮助也最小！</strong></p>\n<p>还要注意适当“投机取巧”，不要单纯死记八股，有些技术方案的实现有很多种，例如分布式 ID、分布式锁、幂等设计，想要完全记住所有方案不太现实，你就重点记忆你项目的实现方案以及选择该种实现方案的原因就好了。当然，其他方案还是建议你简单了解一下，不然也没办法和你选择的方案进行对比。</p>\n<p>想要检测自己是否搞懂或者加深印象，记录博客或者用自己的理解把对应的知识点讲给别人听也是一个不错的选择。</p>\n<p>另外，准备八股文的过程中，强烈建议你花个几个小时去根据你的简历（主要是项目经历部分）思考一下哪些地方可能被深挖，然后把你自己的思考以面试问题的形式体现出来。面试之后，你还要根据当下的面试情况复盘一波，对之前自己整理的面试问题进行完善补充。这个过程对于个人进一步熟悉自己的简历（尤其是项目经历）部分，非常非常有用。这些问题你也一定要多花一些时间搞懂吃透，能够流畅地表达出来。面试问题可以参考 <a href=\"https://t.zsxq.com/0eRq7EJPy\" target=\"_blank\" rel=\"noopener noreferrer\">Java 面试常见问题总结（2024 最新版）</a>，记得根据自己项目经历去深入拓展即可！</p>\n<p>最后，准备技术面试的同学一定要定期复习（自测的方式非常好），不然确实会遗忘的。</p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "面试准备"
      ]
    },
    {
      "title": "项目经验指南",
      "url": "https://javaguide.cn/interview-preparation/project-experience-guide.html",
      "id": "https://javaguide.cn/interview-preparation/project-experience-guide.html",
      "summary": "友情提示 本文节选自 。这是一份教你如何更高效地准备面试的专栏，内容和 JavaGuide 互补，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ……）、优质面经等内容。 没有项目经验怎么办? 没有项目经验是大部分应届生会碰到的一个问题。甚至说，有很多有工作经验的程序员，对自己在公司做的项目不满意，也想找一个比较有技术含量的项目来做。 说几种我觉得...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">友情提示</p>\n<p>本文节选自 <strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong>。这是一份教你如何更高效地准备面试的专栏，内容和 JavaGuide 互补，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ……）、优质面经等内容。</p>\n</div>\n<h2>没有项目经验怎么办?</h2>\n<p>没有项目经验是大部分应届生会碰到的一个问题。甚至说，有很多有工作经验的程序员，对自己在公司做的项目不满意，也想找一个比较有技术含量的项目来做。</p>\n<p>说几种我觉得比较靠谱的获取项目经验的方式，希望能够对你有启发。</p>\n<h3>实战项目视频/专栏</h3>\n<p>在网上找一个符合自己能力与找工作需求的实战项目视频或者专栏，跟着老师一起做。</p>\n<p>你可以通过慕课网、哔哩哔哩、拉勾、极客时间、培训机构（比如黑马、尚硅谷）等渠道获取到适合自己的实战项目视频/专栏。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/mukewangzhiazhanke.png\" alt=\"慕课网实战课\"></p>\n<p>尽量选择一个适合自己的项目，没必要必须做分布式/微服务项目，对于绝大部分同学来说，能把一个单机项目做好就已经很不错了。</p>\n<p>我面试过很多求职者，简历上看着有微服务的项目经验，结果随便问两个问题就知道根本不是自己做的或者说做的时候压根没认真思考。这种情况会给我留下非常不好的印象。</p>\n<p>我在 <strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong> 的「面试准备篇」中也说过：</p>\n<blockquote>\n<p>个人认为也没必要非要去做微服务或者分布式项目，不一定对你面试有利。微服务或者分布式项目涉及的知识点太多，一般人很难吃透。并且，这类项目其实对于校招生来说稍微有一点超标了。即使你做出来，很多面试官也会认为不是你独立完成的。</p>\n<p>其实，你能把一个单体项目做到极致也很好，对于个人能力提升不比做微服务或者分布式项目差。如何做到极致？代码质量这里就不提了，更重要的是你要尽量让自己的项目有一些亮点（比如你是如何提升项目性能的、如何解决项目中存在的一个痛点的），项目经历取得的成果尽量要量化一下比如我使用 xxx 技术解决了 xxx 问题，系统 qps 从 xxx 提高到了 xxx。</p>\n</blockquote>\n<p>跟着老师做的过程中，你一定要有自己的思考，不要浅尝辄止。对于很多知识点，别人的讲解可能只是满足项目就够了，你自己想多点知识的话，对于重要的知识点就要自己学会去深入学习。</p>\n<h3>实战类开源项目</h3>\n<p>GitHub 或者码云上面有很多实战类别项目，你可以选择一个来研究，为了让自己对这个项目更加理解，在理解原有代码的基础上，你可以对原有项目进行改进或者增加功能。</p>\n<p>你可以参考 <a href=\"https://javaguide.cn/open-source-project/practical-project.html\" title=\"Java 优质开源实战项目\" target=\"_blank\" rel=\"noopener noreferrer\">Java 优质开源实战项目</a> 上面推荐的实战类开源项目，质量都很高，项目类型也比较全面，涵盖博客/论坛系统、考试/刷题系统、商城系统、权限管理系统、快速开发脚手架以及各种轮子。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/javaguide-practical-project.png\" alt=\"Java 优质开源实战项目\"></p>\n<p>一定要记住：<strong>不光要做，还要改进，改善。不论是实战项目视频或者专栏还是实战类开源项目，都一定会有很多可以完善改进的地方。</strong></p>\n<h3>从头开始做</h3>\n<p>自己动手去做一个自己想完成的东西，遇到不会的东西就临时去学，现学现卖。</p>\n<p>这个要求比较高，我建议你已经有了一个项目经验之后，再采用这个方法。如果你没有做过项目的话，还是老老实实采用上面两个方法比较好。</p>\n<h3>参加各种大公司组织的各种大赛</h3>\n<p>如果参加这种赛事能获奖的话，项目含金量非常高。即使没获奖也没啥，也可以写简历上。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/up-673f598477242691900a1e72c5d8b26df2c.png\" alt=\"阿里云天池大赛\"></p>\n<h3>参与实际项目</h3>\n<p>通常情况下，你有如下途径接触到企业实际项目的开发：</p>\n<ol>\n<li>老师接的项目；</li>\n<li>自己接的私活；</li>\n<li>实习/工作接触到的项目；</li>\n</ol>\n<p>老师接的项目和自己接的私活通常都是一些偏业务的项目，很少会涉及到性能优化。这种情况下，你可以考虑对项目进行改进，别怕花时间，某个时间用心做好一件事情就好比如你对项目的数据模型进行改进、引入缓存提高访问速度等等。</p>\n<p>实习/工作接触到的项目类似，如果遇到一些偏业务的项目，也是要自己私下对项目进行改进优化。</p>\n<p>尽量是真的对项目进行了优化，这本身也是对个人能力的提升。如果你实在是没时间去实践的话，也没关系，吃透这个项目优化手段就好，把一些面试可能会遇到的问题提前准备一下。</p>\n<h2>有没有还不错的项目推荐？</h2>\n<p><strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong> 的「面试准备篇」中有一篇文章专门整理了一些比较高质量的实战项目，非常适合用来学习或者作为项目经验。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/project-experience-guide.png\" alt=\"\"></p>\n<p>这篇文章一共推荐了 15+ 个实战项目，有业务类的，也有轮子类的，有开源项目、也有视频教程。对于参加校招的小伙伴，我更建议做一个业务类项目加上一个轮子类的项目。</p>\n<h2>我跟着视频做的项目会被面试官嫌弃不？</h2>\n<p>很多应届生都是跟着视频做的项目，这个大部分面试官都心知肚明。</p>\n<p>不排除确实有些面试官不吃这一套，这个也看人。不过我相信大多数面试官都是能理解的，毕竟你在学校的时候实际上是没有什么获得实际项目经验的途径的。</p>\n<p>大部分应届生的项目经验都是自己在网上找的或者像你一样买的付费课程跟着做的，极少部分是比较真实的项目。 从你能想着做一个实战项目来说，我觉得初衷是好的，确实也能真正学到东西。 但是，究竟有多少是自己掌握了很重要。看视频最忌讳的是被动接受，自己多改进一下，多思考一下！就算是你跟着视频做的项目，也是可以优化的！</p>\n<p><strong>如果你想真正学到东西的话，建议不光要把项目单纯完成跑起来，还要去自己尝试着优化！</strong></p>\n<p>简单说几个比较容易的优化点：</p>\n<ol>\n<li><strong>全局异常处理</strong>：很多项目这方面都做的不是很好，可以参考我的这篇文章：<a href=\"https://mp.weixin.qq.com/s/Y4Q4yWRqKG_lw0GLUsY2qw\" target=\"_blank\" rel=\"noopener noreferrer\">《使用枚举简单封装一个优雅的 Spring Boot 全局异常处理！》</a> 来做优化。</li>\n<li><strong>项目的技术选型优化</strong>：比如使用 Guava 做本地缓存的地方可以换成 <strong>Caffeine</strong> 。Caffeine 的各方面的表现要更加好！再比如 Controller 层是否放了太多的业务逻辑。</li>\n<li><strong>数据库方面</strong>：数据库设计可否优化？索引是否使用使用正确？SQL 语句是否可以优化？是否需要进行读写分离？</li>\n<li><strong>缓存</strong>：项目有没有哪些数据是经常被访问的？是否引入缓存来提高响应速度？</li>\n<li><strong>安全</strong>：项目是否存在安全问题？</li>\n<li>……</li>\n</ol>\n<p>另外，我在星球分享过常见的性能优化方向实践案例，涉及到多线程、异步、索引、缓存等方向，强烈推荐你看看：<a href=\"https://t.zsxq.com/06EqfeMZZ\" target=\"_blank\" rel=\"noopener noreferrer\">https://t.zsxq.com/06EqfeMZZ</a> 。</p>\n<p>最后，<strong>再给大家推荐一个 IDEA 优化代码的小技巧，超级实用！</strong></p>\n<p>分析你的代码：右键项目-&gt; Analyze-&gt;Inspect Code</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/up-651672bce128025a135c1536cd5dc00532e.png\" alt=\"\"></p>\n<p>扫描完成之后，IDEA 会给出一些可能存在的代码坏味道比如命名问题。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/up-05c83b319941995b07c8020fddc57f26037.png\" alt=\"\"></p>\n<p>并且，你还可以自定义检查规则。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/up-6b618ad3bad0bc3f76e6066d90c8cd2f255.png\" alt=\"\"></p>\n",
      "image": "https://oss.javaguide.cn/javamianshizhibei/mukewangzhiazhanke.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "面试准备"
      ]
    },
    {
      "title": "程序员简历编写指南",
      "url": "https://javaguide.cn/interview-preparation/resume-guide.html",
      "id": "https://javaguide.cn/interview-preparation/resume-guide.html",
      "summary": "友情提示 本文节选自 。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ……）、优质面经等内容。 前言 一份好的简历可以在整个申请面试以及面试过程中起到非常重要的作用。 为什么说简历很重要呢？ 我们可以从下面几点来说： 1、简历就像是我们的一个门面一样，它在很大程度上决定了是否能够获得面试机会。 假如你是网申...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">友情提示</p>\n<p>本文节选自 <strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong>。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ……）、优质面经等内容。</p>\n</div>\n<h2>前言</h2>\n<p>一份好的简历可以在整个申请面试以及面试过程中起到非常重要的作用。</p>\n<p><strong>为什么说简历很重要呢？</strong> 我们可以从下面几点来说：</p>\n<p><strong>1、简历就像是我们的一个门面一样，它在很大程度上决定了是否能够获得面试机会。</strong></p>\n<ul>\n<li>假如你是网申，你的简历必然会经过 HR 的筛选，一张简历 HR 可能也就花费 10 秒钟左右看一下，然后决定你能否进入面试。</li>\n<li>假如你是内推，如果你的简历没有什么优势的话，就算是内推你的人再用心，也无能为力。</li>\n</ul>\n<p>另外，就算你通过了第一轮的筛选获得面试机会，后面的面试中，面试官也会根据你的简历来判断你究竟是否值得他花费很多时间去面试。</p>\n<p><strong>2、简历上的内容很大程度上决定了面试官提问的侧重点。</strong></p>\n<ul>\n<li>一般情况下你的简历上注明你会的东西才会被问到（Java 基础、集合、并发、MySQL、Redis 、Spring、Spring Boot 这些算是每个人必问的），比如写了你熟练使用 Redis,那面试官就很大概率会问你 Redis 的一些问题，再比如你写了你在项目中使用了消息队列，那面试官大概率问很多消息队列相关的问题。</li>\n<li>技能熟练度在很大程度上也决定了面试官提问的深度。</li>\n</ul>\n<p>在不夸大自己能力的情况下，写出一份好的简历也是一项很棒的能力。一般情况下，技术能力和学习能力比较厉害的，写出来的简历也比较棒！</p>\n<h2>简历模板</h2>\n<p>简历的样式真的非常非常重要！！！如果你的简历样式丑到没朋友的话，面试官真的没有看下去的欲望。一天处理上百份的简历的痛苦，你不懂！</p>\n<p>我这里的话，推荐大家使用 Markdown 语法写简历，然后再将 Markdown 格式转换为 PDF 格式后进行简历投递。如果你对 Markdown 语法不太了解的话，可以花半个小时简单看一下 Markdown 语法说明: <a href=\"http://www.markdown.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.markdown.cn/</a>。</p>\n<p>下面是我收集的一些还不错的简历模板：</p>\n<ul>\n<li>适合中文的简历模板收集（推荐，开源免费）：<a href=\"https://github.com/dyweb/awesome-resume-for-chinese\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dyweb/awesome-resume-for-chinese</a></li>\n<li>木及简历（推荐，部分免费） ： <a href=\"https://www.mujicv.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.mujicv.com/</a></li>\n<li>简单简历（推荐，部分免费）：<a href=\"https://easycv.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">https://easycv.cn/</a></li>\n<li>极简简历（免费）： <a href=\"https://www.polebrief.com/index\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.polebrief.com/index</a></li>\n<li>Markdown 简历排版工具（开源免费）：<a href=\"https://resume.mdnice.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://resume.mdnice.com/</a></li>\n<li>站长简历（收费，支持 AI 生成）：<a href=\"https://jianli.chinaz.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jianli.chinaz.com/</a></li>\n<li>typora+markdown+css 自定义简历模板 ：<a href=\"https://github.com/Snailclimb/typora-markdown-resume\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Snailclimb/typora-markdown-resume</a></li>\n<li>超级简历（部分收费） ： <a href=\"https://www.wondercv.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.wondercv.com/</a></li>\n</ul>\n<p>上面这些简历模板大多是只有 1 页内容，很难展现足够的信息量。如果你不是顶级大牛（比如 ACM 大赛获奖）的话，我建议还是尽可能多写一点可以突出你自己能力的内容（校招生 2 页之内，社招生 3 页之内，记得精炼语言，不要过多废话）。</p>\n<p>再总结几点 <strong>简历排版的注意事项</strong>：</p>\n<ul>\n<li>尽量简洁，不要太花里胡哨。</li>\n<li>技术名词最好规范大小写比较好，比如 java-&gt;Java ，spring boot -&gt; Spring Boot 。这个虽然有些面试官不会介意，但是很多面试官都会在意这个细节的。</li>\n<li>中文和数字英文之间加上空格的话看起来会舒服一点。</li>\n</ul>\n<p>另外，知识星球里还有真实的简历模板可供参考，地址：<a href=\"https://t.zsxq.com/12ypxGNzU\" target=\"_blank\" rel=\"noopener noreferrer\">https://t.zsxq.com/12ypxGNzU</a> （需加入<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>获取）。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/image-20230918073550606.png\" alt=\"\"></p>\n<h2>简历内容</h2>\n<h3>个人信息</h3>\n<ul>\n<li>最基本的 ：姓名（身份证上的那个）、年龄、电话、籍贯、联系方式、邮箱地址</li>\n<li>潜在加分项 ： Github 地址、博客地址（如果技术博客和 Github 上没有什么内容的话，就不要写了）</li>\n</ul>\n<p>示例：</p>\n<p><img src=\"https://oss.javaguide.cn/zhishixingqiu/20210428212337599.png\" alt=\"\"></p>\n<p><strong>简历要不要放照片呢？</strong> 很多人写简历的时候都有这个问题。</p>\n<p>其实放不放都行，影响不大，完全不用在意这个问题。除非，你投递的岗位明确要求要放照片。 不过，如果要放的话，不要放生活照，还是应该放正规一些的照片比如证件照。</p>\n<h3>求职意向</h3>\n<p>你想要应聘什么岗位，希望在什么城市。另外，你也可以将求职意向放到个人信息这块写。</p>\n<p>示例：</p>\n<p><img src=\"https://oss.javaguide.cn/zhishixingqiu/20210428212410288.png\" alt=\"\"></p>\n<h3>教育经历</h3>\n<p>教育经历也不可或缺。通过教育经历的介绍，你要确保能让面试官就可以知道你的学历、专业、毕业学校以及毕业的日期。</p>\n<p>示例：</p>\n<blockquote>\n<p>北京理工大学 硕士，软件工程 2019.09 - 2022.01<br>\n湖南大学 学士，应用化学 2015.09 ~ 2019.06</p>\n</blockquote>\n<h3>专业技能</h3>\n<p>先问一下你自己会什么，然后看看你意向的公司需要什么。一般 HR 可能并不太懂技术，所以他在筛选简历的时候可能就盯着你专业技能的关键词来看。对于公司有要求而你不会的技能，你可以花几天时间学习一下，然后在简历上可以写上自己了解这个技能。</p>\n<p>下面是一份最新的 Java 后端开发技能清单，你可以根据自身情况以及岗位招聘要求做动态调整，核心思想就是尽可能满足岗位招聘的所有技能要求。</p>\n<p><img src=\"https://oss.javaguide.cn/zhishixingqiu/jinengmuban.png\" alt=\"Java 后端技能模板\"></p>\n<p>我这里再单独放一个我看过的某位同学的技能介绍，我们来找找问题。</p>\n<p><img src=\"https://oss.javaguide.cn/zhishixingqiu/up-a58d644340f8ce5cd32f9963f003abe4233.png\" alt=\"\"></p>\n<p>上图中的技能介绍存在的问题：</p>\n<ul>\n<li>技术名词最好规范大小写比较好，比如 java-&gt;Java ，spring boot -&gt; Spring Boot 。这个虽然有些面试官不会介意，但是很多面试官都会在意这个细节的。</li>\n<li>技能介绍太杂，没有亮点。不需要全才，某个领域做得好就行了！</li>\n<li>对 Java 后台开发的部分技能比如 Spring Boot 的熟悉度仅仅为了解，无法满足企业的要求。</li>\n</ul>\n<h3>实习经历/工作经历（重要）</h3>\n<p>工作经历针对社招，实习经历针对校招。</p>\n<p>工作经历建议采用时间倒序的方式来介绍。实习经历和工作经历都需要简单突出介绍自己在职期间主要做了什么。</p>\n<p>示例：</p>\n<blockquote>\n<p><strong>XXX 公司 （201X 年 X 月 ~ 201X 年 X 月 ）</strong></p>\n<ul>\n<li><strong>职位</strong>：Java 后端开发工程师</li>\n<li><strong>工作内容</strong>：主要负责 XXX</li>\n</ul>\n</blockquote>\n<h3>项目经历（重要）</h3>\n<p>简历上有一两个项目经历很正常，但是真正能把项目经历很好的展示给面试官的非常少。</p>\n<p>很多求职者的项目经历介绍都会面临过于啰嗦、过于简单、没突出亮点等问题。</p>\n<p>项目经历介绍模板如下：</p>\n<blockquote>\n<p>项目名称（字号要大一些）</p>\n<p>2017-05~2018-06 淘宝 Java 后端开发工程师</p>\n<ul>\n<li><strong>项目描述</strong> : 简单描述项目是做什么的。</li>\n<li><strong>技术栈</strong> ：用了什么技术（如 Spring Boot + MySQL + Redis + Mybatis-plus + Spring Security + Oauth2）</li>\n<li><strong>工作内容/个人职责</strong> : 简单描述自己做了什么，解决了什么问题，带来了什么实质性的改善。突出自己的能力，不要过于平淡的叙述。</li>\n<li><strong>个人收获（可选）</strong> : 从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用。通常是可以不用写个人收获的，因为你在个人职责介绍中写的东西已经表明了自己的主要收获。</li>\n<li><strong>项目成果（可选）</strong> :简单描述这个项目取得了什么成绩。</li>\n</ul>\n</blockquote>\n<p><strong>1、项目经历应该突出自己做了什么，简单概括项目基本情况。</strong></p>\n<p>项目介绍尽量压缩在两行之内，不需要介绍太多，但也不要随便几个字就介绍完了。</p>\n<p>另外，个人收获和项目成果都是可选的，如果选择写的话，也不要花费太多篇幅，记住你的重点是介绍工作内容/个人职责。</p>\n<p><strong>2、技术架构直接写技术名词就行，不要再介绍技术是干嘛的了，没意义，属于无效介绍。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/46c92fbc5160e65dd85c451143177144.png\" alt=\"\"></p>\n<p><strong>3、尽量减少纯业务的个人职责介绍，对于面试不太友好。尽量再多挖掘一些亮点（6~8 条个人职责介绍差不多了，做好筛选），最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目优化了某个模块的性能。</strong></p>\n<p>即使不是你做的功能模块或者解决的问题，你只要搞懂吃透了就能拿来自己用，适当润色即可！</p>\n<p>像性能优化方向上的亮点面试之前也比较容易准备，但也不要都是性能优化相关的，这种也算是一个极端。</p>\n<p>另外，技术优化取得的成果尽量要量化一下：</p>\n<ul>\n<li>使用 xxx 技术解决了 xxx 问题，系统 QPS 从 xxx 提高到了 xxx。</li>\n<li>使用 xxx 技术了优化了 xxx 接口，系统 QPS 从 xxx 提高到了 xxx。</li>\n<li>使用 xxx 技术解决了 xxx 问题，查询速度优化了 xxx，系统 QPS 达到 10w+。</li>\n<li>使用 xxx 技术优化了 xxx 模块，响应时间从 2s 降低到 0.2s。</li>\n<li>……</li>\n</ul>\n<p>个人职责介绍示例（这里只是举例，不要照搬，结合自己项目经历自己去写，不然面试的时候容易被问倒） ：</p>\n<ul>\n<li>基于 Spring Cloud Gateway + Spring Security OAuth2 + JWT 实现微服务统一认证授权和鉴权，使用 RBAC 权限模型实现动态权限控制。</li>\n<li>参与项目订单模块的开发，负责订单创建、删除、查询等功能，基于 Spring 状态机实现订单状态流转。</li>\n<li>商品和订单搜索场景引入 Elasticsearch，并且实现了相关商品推荐以及搜索提示功能。</li>\n<li>整合 Canal + RabbitMQ 将 MySQL 增量数据（如商品、订单数据）同步到 Elasticsearch。</li>\n<li>利用 RabbitMQ 官方提供的延迟队列插件实现延时任务场景比如订单超时自动取消、优惠券过期提醒、退款处理。</li>\n<li>消息推送系统引入 RabbitMQ 实现异步处理、削峰填谷和服务解耦，最高推送速度 10w/s，单日最大消息量 2000 万。</li>\n<li>使用 MAT 工具分析 dump 文件解决了广告服务新版本上线后导致大量的服务超时告警的问题。</li>\n<li>排查并解决扣费模块由于扣费父任务和反作弊子任务使用同一个线程池导致的死锁问题。</li>\n<li>基于 EasyExcel 实现广告投放数据的导入导出，通过 MyBatis 批处理插入数据，基于任务表实现异步。</li>\n<li>负责用户统计模块的开发，使用 CompletableFuture 并行加载后台用户统计模块的数据信息，平均相应时间从 3.5s 降低到 1s。</li>\n<li>基于 Sentinel 对核心场景(如用户登入注册、收货地址查询等)进行限流、降级，保护系统，提升用户体验。</li>\n<li>热门数据（如首页、热门博客）使用 Redis+Caffeine 两级缓存，解决了缓存击穿和穿透问题，查询速度毫秒级，QPS 30w+。</li>\n<li>使用 CompletableFuture 优化购物车查询模块，对获取用户信息、商品详情、优惠券信息等异步 RPC 调用进行编排，响应时间从 2s 降低为 0.2s。</li>\n<li>搭建 EasyMock 服务，用于模拟第三方平台接口，方便了在网络隔离情况下的接口对接工作。</li>\n<li>基于 SkyWalking + Elasticsearch 搭建分布式链路追踪系统实现全链路监控。</li>\n</ul>\n<p><strong>4、如果你觉得你的项目技术比较落后的话，可以自己私下进行改进。重要的是让项目比较有亮点，通过什么方式就无所谓了。</strong></p>\n<p>项目经历这部分对于简历来说非常重要，<a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a>的面试准备篇有好几篇关于优化项目经历的文章，建议你仔细阅读一下，应该会对你有帮助。</p>\n<p><img src=\"https://oss.javaguide.cn/zhishixingqiu/4e11dbc842054e53ad6c5f0445023eb5~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p><strong>5、避免个人职责介绍都是围绕一个技术点来写，非常不可取。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/zhishixingqiu/image-20230424222513028.png\" alt=\"\"></p>\n<p><strong>6、避免模糊性描述，介绍要具体（技术+场景+效果），也要注意精简语言（避免堆砌技术词，省略不必要的描述）。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/project-experience-avoiding-ambiguity-descriptio.png\" alt=\"\"></p>\n<h3>荣誉奖项（可选）</h3>\n<p>如果你有含金量比较高的竞赛（比如 ACM、阿里的天池大赛）的获奖经历的话，荣誉奖项这块内容一定要写一下！并且，你还可以将荣誉奖项这块内容适当往前放，放在一个更加显眼的位置。</p>\n<h3>校园经历（可选）</h3>\n<p>如果有比较亮眼的校园经历的话就简单写一下，没有就不写！</p>\n<h3>个人评价</h3>\n<p><strong>个人评价就是对自己的解读，一定要用简洁的语言突出自己的特点和优势，避免废话！</strong> 像勤奋、吃苦这些比较虚的东西就不要扯了，面试官看着这种个人评价就烦。</p>\n<p>我们可以从下面几个角度来写个人评价：</p>\n<ul>\n<li>文档编写能力、学习能力、沟通能力、团队协作能力</li>\n<li>对待工作的态度以及个人的责任心</li>\n<li>能承受的工作压力以及对待困难的态度</li>\n<li>对技术的追求、对代码质量的追求</li>\n<li>分布式、高并发系统开发或维护经验</li>\n</ul>\n<p>列举 3 个实际的例子：</p>\n<ul>\n<li>学习能力较强，大三参加国家软件设计大赛的时候快速上手 Python 写了一个可配置化的爬虫系统。</li>\n<li>具有团队协作精神，大三参加国家软件设计大赛的时候协调项目组内 5 名开发同学，并对编码遇到困难的同学提供帮助，最终顺利在 1 个月的时间完成项目的核心功能。</li>\n<li>项目经验丰富，在校期间主导过多个企业级项目的开发。</li>\n</ul>\n<h2>STAR 法则和 FAB 法则</h2>\n<h3>STAR 法则（Situation Task Action Result）</h3>\n<p>相信大家一定听说过 STAR 法则。对于面试，你可以将这个法则用在自己的简历以及和面试官沟通交流的过程中。</p>\n<p>STAR 法则由下面 4 个单词组成（STAR 法则的名字就是由它们的首字母组成）：</p>\n<ul>\n<li><strong>Situation：</strong> 情景。 事情是在什么情况下发生的？</li>\n<li><strong>Task：</strong> 任务。你的任务是什么？</li>\n<li><strong>Action：</strong> 行动。你做了什么？</li>\n<li><strong>Result：</strong> 结果。最终的结果怎样？</li>\n</ul>\n<h3>FAB 法则（Feature Advantage Benefit）</h3>\n<p>除了 STAR 法则，你还需要了解在销售行业经常用到的一个叫做 FAB 的法则。</p>\n<p>FAB 法则由下面 3 个单词组成（FAB 法则的名字就是由它们的首字母组成）：</p>\n<ul>\n<li><strong>Feature：</strong> 你的特征/优势是什么？</li>\n<li><strong>Advantage：</strong> 比别人好在哪些地方；</li>\n<li><strong>Benefit：</strong> 如果雇佣你，招聘方会得到什么好处。</li>\n</ul>\n<p>简单来说，<strong>FAB 法则主要是让你的面试官知道你的优势和你能为公司带来的价值。</strong></p>\n<h2>建议</h2>\n<h3>避免页数过多</h3>\n<p>精简表述，突出亮点。校招简历建议不要超过 2 页，社招简历建议不要超过 3 页。如果内容过多的话，不需要非把内容压缩到一页，保持排版干净整洁就可以了。</p>\n<p>看了几千份简历，有少部分同学的简历页数都接近 10 页了，让我头皮发麻。</p>\n<p><img src=\"https://oss.javaguide.cn/zhishixingqiu/image-20230508223646164.png\" alt=\"简历页数过多\"></p>\n<h3>避免语义模糊</h3>\n<p>尽量避免主观表述，少一点语义模糊的形容词。表述要简洁明了，简历结构要清晰。</p>\n<p>举例：</p>\n<ul>\n<li>不好的表述：我在团队中扮演了很重要的角色。</li>\n<li>好的表述：我作为后端技术负责人，领导团队完成后端项目的设计与开发。</li>\n</ul>\n<h3>注意简历样式</h3>\n<p>简历样式同样很重要，一定要注意！不必追求花里胡哨，但要尽量保证结构清晰且易于阅读。</p>\n<h3>其他</h3>\n<ul>\n<li>一定要使用 PDF 格式投递，不要使用 Word 或者其他格式投递。这是最基本的！</li>\n<li>不会的东西就不要写在简历上了。注意简历真实性，适当润色没有问题。</li>\n<li>工作经历建议采用时间倒序的方式来介绍，实习经历建议将最有价值的放在最前面。</li>\n<li>将自己的项目经历完美的展示出来非常重要，重点是突出自己做了什么（挖掘亮点），而不是介绍项目是做什么的。</li>\n<li>项目经历建议以时间倒序排序，另外项目经历不在于多（精选 2~3 即可），而在于有亮点。</li>\n<li>准备面试的过程中应该将你写在简历上的东西作为重点，尤其是项目经历上和技能介绍上的。</li>\n<li>面试和工作是两回事，聪明的人会把面试官往自己擅长的领域领，其他人则被面试官牵着鼻子走。虽说面试和工作是两回事，但是你要想要获得自己满意的 offer ，你自身的实力必须要强。</li>\n</ul>\n<h2>简历修改</h2>\n<p>到目前为止，我至少帮助 <strong>6000+</strong> 位球友提供了免费的简历修改服务。由于个人精力有限，修改简历仅限加入星球的读者，需要帮看简历的话，可以加入 <a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html#%E7%AE%80%E5%8E%86%E4%BF%AE%E6%94%B9\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>JavaGuide 官方知识星球</strong></a>（点击链接查看详细介绍）。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/简历修改2.jpg\" alt=\"img\"></p>\n<p>虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p>这里再提供一份限时专属优惠卷：</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n",
      "image": "https://oss.javaguide.cn/javamianshizhibei/image-20230918073550606.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "面试准备"
      ]
    },
    {
      "title": "常见面试题自测(付费)",
      "url": "https://javaguide.cn/interview-preparation/self-test-of-common-interview-questions.html",
      "id": "https://javaguide.cn/interview-preparation/self-test-of-common-interview-questions.html",
      "summary": "面试之前，强烈建议大家多拿常见的面试题来进行自测，检查一下自己的掌握情况，这是一种非常实用的备战技术面试的小技巧。 在 的 「技术面试题自测篇」 ，我总结了 Java 面试中最重要的知识点的最常见的面试题并按照面试提问的方式展现出来。 每一道用于自测的面试题我都会给出重要程度，方便大家在时间比较紧张的时候根据自身情况来选择性自测。并且，我还会给出提示，...",
      "content_html": "<p>面试之前，强烈建议大家多拿常见的面试题来进行自测，检查一下自己的掌握情况，这是一种非常实用的备战技术面试的小技巧。</p>\n<p>在 <strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong> 的 <strong>「技术面试题自测篇」</strong> ，我总结了 Java 面试中最重要的知识点的最常见的面试题并按照面试提问的方式展现出来。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220628102643202.png\" alt=\"\"></p>\n<p>每一道用于自测的面试题我都会给出重要程度，方便大家在时间比较紧张的时候根据自身情况来选择性自测。并且，我还会给出提示，方便你回忆起对应的知识点。</p>\n<p>在面试中如果你实在没有头绪的话，一个好的面试官也是会给你提示的。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220628102848236.png\" alt=\"\"></p>\n<p><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href=\"https://javaguide.cn/#/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的补充完善，两者可以配合使用。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a> 。</p>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> ，干货多多！</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/image-20220628102643202.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "如何高效准备Java面试？",
      "url": "https://javaguide.cn/interview-preparation/teach-you-how-to-prepare-for-the-interview-hand-in-hand.html",
      "id": "https://javaguide.cn/interview-preparation/teach-you-how-to-prepare-for-the-interview-hand-in-hand.html",
      "summary": "友情提示 本文节选自 。这是一份教你如何更高效地准备面试的专栏，内容和 JavaGuide 互补，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ……）、优质面经等内容。 你的身边一定有很多编程比你厉害但是找的工作并没有你好的朋友！技术面试不同于编程，编程厉害不代表技术面试就一定能过。 现在你去面个试，不认真准备一下，那简直就是往枪口上撞。我们大部...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">友情提示</p>\n<p>本文节选自 <strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong>。这是一份教你如何更高效地准备面试的专栏，内容和 JavaGuide 互补，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ……）、优质面经等内容。</p>\n</div>\n<p>你的身边一定有很多编程比你厉害但是找的工作并没有你好的朋友！<strong>技术面试不同于编程，编程厉害不代表技术面试就一定能过。</strong></p>\n<p>现在你去面个试，不认真准备一下，那简直就是往枪口上撞。我们大部分都只是普通人，没有发过顶级周刊或者获得过顶级大赛奖项。在这样一个技术面试氛围下，我们需要花费很多精力来准备面试，来提高自己的技术能力。“<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247491596&amp;idx=1&amp;sn=36fbf80922f71c200990de11514955f7&amp;chksm=cea1afc7f9d626d1c70d5e54505495ac499ce6eb5e05ba4f4bb079a8563a84e27f17ceff38af&amp;token=353590436&amp;lang=zh_CN&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">面试造火箭，工作拧螺丝钉</a>” 就是目前的一个常态，预计未来很长很长一段时间也还是会是这样。</p>\n<p>准备面试不等于耍小聪明或者死记硬背面试题。 <strong>一定不要对面试抱有侥幸心理。打铁还需自身硬！</strong> 千万不要觉得自己看几篇面经，看几篇面试题解析就能通过面试了。一定要静下心来深入学习！</p>\n<p>这篇我会从宏观面出发简单聊聊如何准备 Java 面试，让你少走弯路！</p>\n<h2>尽早以求职为导向来学习</h2>\n<p>我是比较建议还在学校的同学尽可能早一点以求职为导向来学习的。</p>\n<p><strong>这样更有针对性，并且可以大概率减少自己处在迷茫的时间，很大程度上还可以让自己少走很多弯路。</strong></p>\n<p>但是！不要把“以求职为导向学习”理解为“我就不用学课堂上那些计算机基础课程了”！</p>\n<p>我在之前的很多次分享中都强调过：<strong>一定要用心学习计算机基础知识！操作系统、计算机组成原理、计算机网络真的不是没有实际用处的学科！！！</strong></p>\n<p>你会发现大厂面试你会用到，以后工作之后你也会用到。我分别列举 2 个例子吧！</p>\n<ul>\n<li><strong>面试中</strong>：像字节、腾讯这些大厂的技术面试以及几乎所有公司的笔试都会考操作系统相关的问题。</li>\n<li><strong>工作中</strong>：在实际使用缓存的时候，软件层次而言的缓存思想，则是源自数据库速度、Redis（内存中间件）速度、本地内存速度之间的不匹配；而在计算机存储层次结构设计中，我们也能发现同样的问题及缓存思想的使用：内存用于解决磁盘访问速度过慢的问题，CPU 用三级缓存缓解寄存器和内存之间的速度差异。它们面临的都是同一个问题（速度不匹配）和同一个思想，那么计算机先驱者在存储层次结构设计上对缓存性能的优化措施，同样也适用于软件层次缓存的性能优化。</li>\n</ul>\n<p><strong>如何求职为导向学习呢？</strong> 简答来说就是：根据招聘要求整理一份目标岗位的技能清单，然后按照技能清单去学习和提升。</p>\n<ol>\n<li>你首先搞清楚自己要找什么工作</li>\n<li>然后根据招聘岗位的要求梳理一份技能清单</li>\n<li>根据技能清单写好最终的简历</li>\n<li>最后再按照简历的要求去学习和提升。</li>\n</ol>\n<p>这其实也是 <strong>以终为始</strong> 思想的运用。</p>\n<p><strong>何为以终为始？</strong> 简单来说，以终为始就是我们可以站在结果来考虑问题，从结果出发，根据结果来确定自己要做的事情。</p>\n<p>你会发现，其实几乎任何领域都可以用到 <strong>以终为始</strong> 的思想。</p>\n<h2>了解投递简历的黄金时间</h2>\n<p>面试之前，你肯定是先要搞清楚春招和秋招的具体时间的。</p>\n<p>正所谓金三银四，金九银十，错过了这个时间，很多公司都没有 HC 了。</p>\n<p><strong>秋招一般 7 月份就开始了，大概一直持续到 9 月底。</strong></p>\n<p><strong>春招一般 3 月份就开始了，大概一直持续到 4 月底。</strong></p>\n<p>很多公司（尤其大厂）到了 9 月中旬(秋招)/3 月中旬（春招），很可能就会没有 HC 了。面试的话一般都是至少是 3 轮起步，一些大厂比如阿里、字节可能会有 5 轮面试。<strong>面试失败话的不要紧，某一面表现差的话也不要紧，调整好心态。又不是单一选择对吧？你能投这么多企业呢! 调整心态。</strong> 今年面试的话，因为疫情原因，有些公司还是可能会还是集中在线上进行面试。然后，还是因为疫情的影响，可能会比往年更难找工作（对大厂影响较小）。</p>\n<h2>知道如何获取招聘信息</h2>\n<p>下面是常见的获取招聘信息的渠道：</p>\n<ul>\n<li><strong>目标企业的官网/公众号</strong>：最及时最权威的获取招聘信息的途径。</li>\n<li><strong>招聘网站</strong>：<a href=\"https://www.zhipin.com/\" target=\"_blank\" rel=\"noopener noreferrer\">BOSS 直聘</a>、<a href=\"https://www.zhaopin.com/\" target=\"_blank\" rel=\"noopener noreferrer\">智联招聘</a>、<a href=\"https://www.lagou.com/\" target=\"_blank\" rel=\"noopener noreferrer\">拉勾招聘</a>……。</li>\n<li><strong>牛客网</strong>：每年秋招/春招，都会有大批量的公司会到牛客网发布招聘信息，并且还会有大量的公司员工来到这里发内推的帖子。地址：<a href=\"https://www.nowcoder.com/jobs/recommend/campus\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.nowcoder.com/jobs/recommend/campus</a> 。</li>\n<li><strong>超级简历</strong>：超级简历目前整合了各大企业的校园招聘入口，地址：<a href=\"https://www.wondercv.com/jobs/%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%98%AF%E6%A0%A1%E6%8B%9B%E7%9A%84%E8%AF%9D%EF%BC%8C%E7%82%B9%E5%87%BB%E2%80%9C%E6%A0%A1%E6%8B%9B%E7%BD%91%E7%94%B3%E2%80%9D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%90%84%E5%A4%A7%E4%BC%81%E4%B8%9A%E7%9A%84%E6%A0%A1%E5%9B%AD%E6%8B%9B%E8%81%98%E5%85%A5%E5%8F%A3%E7%9A%84%E6%95%B4%E5%90%88%E9%A1%B5%E9%9D%A2%E4%BA%86%E3%80%82\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.wondercv.com/jobs/。如果你是校招的话，点击“校招网申”就可以直接跳转到各大企业的校园招聘入口的整合页面了。</a></li>\n<li><strong>认识的朋友</strong>：如果你有认识的朋友在目标企业工作的话，你也可以找他们了解招聘信息，并且可以让他们帮你内推。</li>\n<li><strong>宣讲会</strong>：宣讲会也是一个不错的途径，不过，好的企业通常只会去比较好的学校，可以留意一下意向公司的宣讲会安排或者直接去到一所比较好的学校参加宣讲会。像我当时校招就去参加了几场宣讲会。不过，我是在荆州上学，那边没什么比较好的学校，一般没有公司去开宣讲会。所以，我当时是直接跑到武汉来了，参加了武汉理工大学以及华中科技大学的几场宣讲会。总体感觉还是很不错的！</li>\n<li><strong>其他</strong>：校园就业信息网、学校论坛、班级 or 年级 QQ 群。</li>\n</ul>\n<p>校招的话，建议以官网为准，有宣讲会的话更好。社招的话，可以多留意一下各大招聘网站比如 BOSS 直聘、拉勾上的职位信息。</p>\n<p>不论校招和社招，如果能找到比较靠谱的内推机会的话，获得面试的机会的概率还是非常大的。而且，你可以让内推你的人定向地给你一些建议。找内推的方式有很多，首选比较熟悉的朋友、同学，还可以留意技术交流社区和公众号上的内推信息。</p>\n<p>一般是只能投递一个岗位，不过，也有极少数投递不同部门两个岗位的情况，这个应该不会有影响，但你的前一次面试情况可能会被记录，也就是说就算你投递成功两个岗位，第一个岗位面试失败的话，对第二个岗位也会有影响，很可能直接就被 pass。</p>\n<h2>多花点时间完善简历</h2>\n<p>一定一定一定要重视简历啊！朋友们！至少要花 2~3 天时间来专门完善自己的简历。</p>\n<p>最近看了很多份简历，满意的很少，我简单拿出一份来说分析一下（欢迎在评论区补充）。</p>\n<p><strong>1.个人介绍没太多实用的信息。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png.png\" alt=\"\"></p>\n<p>技术博客、GitHub 以及在校获奖经历的话，能写就尽量写在这里。 你可以参考下面 👇 的模板进行修改：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png-20230309224235808.png\" alt=\"\"></p>\n<p><strong>2.项目经历过于简单，完全没有质量可言</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png-20230309224240305.png\" alt=\"\"></p>\n<p>每一个项目经历真的就一两句话可以描述了么？还是自己不想写？还是说不是自己做的，不敢多写。</p>\n<p>如果有项目的话，技术面试第一步，面试官一般都是让你自己介绍一下你的项目。你可以从下面几个方向来考虑：</p>\n<ol>\n<li>你对项目整体设计的一个感受（面试官可能会让你画系统的架构图）</li>\n<li>你在这个项目中你负责了什么、做了什么、担任了什么角色。</li>\n<li>从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用。</li>\n<li>你在这个项目中是否解决过什么问题？怎么解决的？收获了什么？</li>\n<li>你的项目用到了哪些技术？这些技术你吃透了没有？举个例子，你的项目经历使用了 Seata 来做分布式事务，那 Seata 相关的问题你要提前准备一下吧，比如说 Seata 支持哪些配置中心、Seata 的事务分组是怎么做的、Seata 支持哪些事务模式，怎么选择？</li>\n<li>你在这个项目中犯过的错误，最后是怎么弥补的？</li>\n</ol>\n<p><strong>3.计算机二级这个证书对于计算机专业完全不用写了，没有含金量的。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png-20230309224247261.png\" alt=\"\"></p>\n<p><strong>4.技能介绍问题太大。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/interview-preparation/93da1096fb02e19071ba13b4f6a7471c.png\" alt=\"\"></p>\n<ul>\n<li>技术名词最好规范大小写比较好，比如 java-&gt;Java ，spring boot -&gt; Spring Boot 。这个虽然有些面试官不会介意，但是很多面试官都会在意这个细节的。</li>\n<li>技能介绍太杂，没有亮点。不需要全才，某个领域做得好就行了！</li>\n<li>对 Java 后台开发的部分技能比如 Spring Boot 的熟悉度仅仅为了解，无法满足企业的要求。</li>\n</ul>\n<p>详细的程序员简历编写指南请参考：<a href=\"https://javaguide.cn/interview-preparation/resume-guide.html\" target=\"_blank\" rel=\"noopener noreferrer\">程序员简历到底该怎么写？</a>。</p>\n<h2>岗位匹配度很重要</h2>\n<p>校招通常会对你的项目经历的研究方向比较宽容，即使你的项目经历和对应公司的具体业务没有关系，影响其实也并不大。</p>\n<p>社招的话就不一样了，毕竟公司是要招聘可以直接来干活的人，你有相关的经验，公司会比较省事。社招通常会比较重视你的过往工作经历以及项目经历，HR 在筛选简历的时候会根据这两方面信息来判断你是否满足他们的招聘要求。就比如说你投递电商公司，而你之前的并没有和电商相关的工作经历以及项目经历，那 HR 在筛简历的时候很可能会直接把你 Pass 掉。</p>\n<p>不过，这个也并不绝对，也有一些公司在招聘的时候更看重的是你的过往经历，较少地关注岗位匹配度，优秀公司的工作经历以及有亮点的项目经验都是加分项。这类公司相信你既然在某个领域（比如电商、支付）已经做的不错了，那应该也可以在另外一个领域（比如流媒体平台、社交软件）很快成为专家。这个领域指的不是技术领域，更多的是业务方向。横跨技术领域（比如后端转算法、后端转大数据）找工作，你又没有相关的经验，几乎是没办法找到的。即使找到了，也大概率会面临 HR 压薪资的问题。</p>\n<h2>提前准备技术面试</h2>\n<p>面试之前一定要提前准备一下常见的面试题也就是八股文：</p>\n<ul>\n<li>自己面试中可能涉及哪些知识点、那些知识点是重点。</li>\n<li>面试中哪些问题会被经常问到、面试中自己该如何回答。(强烈不推荐死记硬背，第一：通过背这种方式你能记住多少？能记住多久？第二：背题的方式的学习很难坚持下去！)</li>\n</ul>\n<p>Java 后端面试复习的重点请看这篇文章：<a href=\"https://javaguide.cn/interview-preparation/key-points-of-interview.html\" target=\"_blank\" rel=\"noopener noreferrer\">Java 面试重点总结(重要)</a>。</p>\n<p>不同类型的公司对于技能的要求侧重点是不同的比如腾讯、字节可能更重视计算机基础比如网络、操作系统这方面的内容。阿里、美团这种可能更重视你的项目经历、实战能力。</p>\n<p>一定不要抱着一种思想，觉得八股文或者基础问题的考查意义不大。如果你抱着这种思想复习的话，那效果可能不会太好。实际上，个人认为还是很有意义的，八股文或者基础性的知识在日常开发中也会需要经常用到。例如，线程池这块的拒绝策略、核心参数配置什么的，如果你不了解，实际项目中使用线程池可能就用的不是很明白，容易出现问题。而且，其实这种基础性的问题是最容易准备的，像各种底层原理、系统设计、场景题以及深挖你的项目这类才是最难的！</p>\n<p>八股文资料首推我的 <a href=\"https://t.zsxq.com/11rZ6D7Wk\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a> (配合 JavaGuide 使用，会根据每一年的面试情况对内容进行更新完善)和 <a href=\"https://javaguide.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 。里面不仅仅是原创八股文，还有很多对实际开发有帮助的干货。除了我的资料之外，你还可以去网上找一些其他的优质的文章、视频来看。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/javamianshizhibei-content-overview.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<h2>提前准备手撕算法</h2>\n<p>很明显，国内现在的校招面试开始越来越重视算法了，尤其是像字节跳动、腾讯这类大公司。绝大部分公司的校招笔试是有算法题的，如果 AC 率比较低的话，基本就挂掉了。</p>\n<p>社招的话，算法面试同样会有。不过，面试官可能会更看重你的工程能力，你的项目经历。如果你的其他方面都很优秀，但是算法很菜的话，不一定会挂掉。不过，还是建议刷下算法题，避免让其成为自己在面试中的短板。</p>\n<p>社招往往是在技术面试的最后，面试官给你一个算法题目让你做。</p>\n<p>关于如何准备算法面试<a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a> 的面试准备篇有详细介绍到。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/preparation-for-interview.png\" alt=\"《Java 面试指北》面试准备篇\"></p>\n<h2>提前准备自我介绍</h2>\n<p>自我介绍一般是你和面试官的第一次面对面正式交流，换位思考一下，假如你是面试官的话，你想听到被你面试的人如何介绍自己呢？一定不是客套地说说自己喜欢编程、平时花了很多时间来学习、自己的兴趣爱好是打球吧？</p>\n<p>我觉得一个好的自我介绍至少应该包含这几点要素：</p>\n<ul>\n<li>用简洁的话说清楚自己主要的技术栈于擅长的领域；</li>\n<li>把重点放在自己在行的地方以及自己的优势之处；</li>\n<li>重点突出自己的能力比如自己的定位的 bug 的能力特别厉害；</li>\n</ul>\n<p>简单来说就是用简洁的语言突出自己的亮点，也就是推销自己嘛！</p>\n<ul>\n<li>如果你去过大公司实习，那对应的实习经历就是你的亮点。</li>\n<li>如果你参加过技术竞赛，那竞赛经历就是你的亮点。</li>\n<li>如果你大学就接触过企业级项目的开发，实战经验比较多，那这些项目经历就是你的亮点。</li>\n<li>……</li>\n</ul>\n<p>从社招和校招两个角度来举例子吧！我下面的两个例子仅供参考，自我介绍并不需要死记硬背，记住要说的要点，面试的时候根据公司的情况临场发挥也是没问题的。另外，网上一般建议的是准备好两份自我介绍：一份对 hr 说的，主要讲能突出自己的经历，会的编程技术一语带过；另一份对技术面试官说的，主要讲自己会的技术细节和项目经验。</p>\n<p><strong>社招：</strong></p>\n<blockquote>\n<p>面试官，您好！我叫独秀儿。我目前有 1 年半的工作经验，熟练使用 Spring、MyBatis 等框架、了解 Java 底层原理比如 JVM 调优并且有着丰富的分布式开发经验。离开上一家公司是因为我想在技术上得到更多的锻炼。在上一个公司我参与了一个分布式电子交易系统的开发，负责搭建了整个项目的基础架构并且通过分库分表解决了原始数据库以及一些相关表过于庞大的问题，目前这个网站最高支持 10 万人同时访问。工作之余，我利用自己的业余时间写了一个简单的 RPC 框架，这个框架用到了 Netty 进行网络通信， 目前我已经将这个项目开源，在 GitHub 上收获了 2k 的 Star! 说到业余爱好的话，我比较喜欢通过博客整理分享自己所学知识，现在已经是多个博客平台的认证作者。 生活中我是一个比较积极乐观的人，一般会通过运动打球的方式来放松。我一直都非常想加入贵公司，我觉得贵公司的文化和技术氛围我都非常喜欢，期待能与你共事！</p>\n</blockquote>\n<p><strong>校招：</strong></p>\n<blockquote>\n<p>面试官，您好！我叫秀儿。大学时间我主要利用课外时间学习了 Java 以及 Spring、MyBatis 等框架 。在校期间参与过一个考试系统的开发，这个系统的主要用了 Spring、MyBatis 和 shiro 这三种框架。我在其中主要担任后端开发，主要负责了权限管理功能模块的搭建。另外，我在大学的时候参加过一次软件编程大赛，我和我的团队做的在线订餐系统成功获得了第二名的成绩。我还利用自己的业余时间写了一个简单的 RPC 框架，这个框架用到了 Netty 进行网络通信， 目前我已经将这个项目开源，在 GitHub 上收获了 2k 的 Star! 说到业余爱好的话，我比较喜欢通过博客整理分享自己所学知识，现在已经是多个博客平台的认证作者。 生活中我是一个比较积极乐观的人，一般会通过运动打球的方式来放松。我一直都非常想加入贵公司，我觉得贵公司的文化和技术氛围我都非常喜欢，期待能与你共事！</p>\n</blockquote>\n<h2>减少抱怨</h2>\n<p>就像现在的技术面试一样，大家都说内卷了，抱怨现在的面试真特么难。然而，单纯抱怨有用么？你对其他求职者说：“大家都不要刷 Leetcode 了啊！都不要再准备高并发、高可用的面试题了啊！现在都这么卷了！”</p>\n<p>会有人听你的么？<strong>你不准备面试，但是其他人会准备面试啊！那你是不是傻啊？还是真的厉害到不需要准备面试呢？</strong></p>\n<p>因此，准备 Java 面试的第一步，我们一定要尽量减少抱怨。抱怨的声音多了之后，会十分影响自己，会让自己变得十分焦虑。</p>\n<h2>面试之后及时复盘</h2>\n<p>如果失败，不要灰心；如果通过，切勿狂喜。面试和工作实际上是两回事，可能很多面试未通过的人，工作能力比你强的多，反之亦然。</p>\n<p>面试就像是一场全新的征程，失败和胜利都是平常之事。所以，劝各位不要因为面试失败而灰心、丧失斗志。也不要因为面试通过而沾沾自喜，等待你的将是更美好的未来，继续加油！</p>\n<h2>总结</h2>\n<p>这篇文章内容有点多，如果这篇文章只能让你记住 7 句话，那请记住下面这 7 句：</p>\n<ol>\n<li>\n<p>一定要提前准备面试！技术面试不同于编程，编程厉害不代表技术面试就一定能过。</p>\n</li>\n<li>\n<p>一定不要对面试抱有侥幸心理。打铁还需自身硬！千万不要觉得自己看几篇面经，看几篇面试题解析就能通过面试了。一定要静下心来深入学习！尤其是目标是大厂的同学，那更要深挖原理！</p>\n</li>\n<li>\n<p>建议大学生尽可能早一点以求职为导向来学习的。这样更有针对性，并且可以大概率减少自己处在迷茫的时间，很大程度上还可以让自己少走很多弯路。 但是，不要把“以求职为导向学习”理解为“我就不用学课堂上那些计算机基础课程了”！</p>\n</li>\n<li>\n<p>一定不要抱着一种思想，觉得八股文或者基础问题的考查意义不大。如果你抱着这种思想复习的话，那效果可能不会太好。实际上，个人认为还是很有意义的，八股文或者基础性的知识在日常开发中也会需要经常用到。例如，线程池这块的拒绝策略、核心参数配置什么的，如果你不了解，实际项目中使用线程池可能就用的不是很明白，容易出现问题。</p>\n</li>\n<li>\n<p>手撕算法是当下技术面试的标配，尽早准备！</p>\n</li>\n<li>\n<p>岗位匹配度很重要。校招通常会对你的项目经历的研究方向比较宽容，即使你的项目经历和对应公司的具体业务没有关系，影响其实也并不大。社招的话就不一样了，毕竟公司是要招聘可以直接来干活的人，你有相关的经验，公司会比较省事。</p>\n</li>\n<li>\n<p>面试之后及时复盘。面试就像是一场全新的征程，失败和胜利都是平常之事。所以，劝各位不要因为面试失败而灰心、丧失斗志。也不要因为面试通过而沾沾自喜，等待你的将是更美好的未来，继续加油！</p>\n</li>\n</ol>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "贡献指南",
      "url": "https://javaguide.cn/javaguide/contribution-guideline.html",
      "id": "https://javaguide.cn/javaguide/contribution-guideline.html",
      "summary": "欢迎参与 JavaGuide 的维护工作，这是一件非常有意义的事情。详细信息请看：JavaGuide 贡献指南 。 你可以从下面几个方向来做贡献： 修改错别字，毕竟内容基本都是手敲，难免会有笔误。 对原有内容进行修改完善，例如对某个面试问题的答案进行完善、对某篇文章的内容进行完善。 新增内容，例如新增面试常问的问题、添加重要知识点的详解。 目前的贡献奖...",
      "content_html": "<p>欢迎参与 JavaGuide 的维护工作，这是一件非常有意义的事情。详细信息请看：<a href=\"https://zhuanlan.zhihu.com/p/464832264\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide 贡献指南</a> 。</p>\n<p>你可以从下面几个方向来做贡献：</p>\n<ul>\n<li>修改错别字，毕竟内容基本都是手敲，难免会有笔误。</li>\n<li>对原有内容进行修改完善，例如对某个面试问题的答案进行完善、对某篇文章的内容进行完善。</li>\n<li>新增内容，例如新增面试常问的问题、添加重要知识点的详解。</li>\n</ul>\n<p>目前的贡献奖励也比较丰富和完善，对于多次贡献的用户，有耳机、键盘等实物奖励以及现金奖励！</p>\n<p>一定一定一定要注意 <strong>排版规范</strong>：</p>\n<ul>\n<li><a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\" target=\"_blank\" rel=\"noopener noreferrer\">中文文案排版指北 - GitHub</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20506092\" target=\"_blank\" rel=\"noopener noreferrer\">写给大家看的中文排版指南 - 知乎</a></li>\n<li><a href=\"https://dawner.top/posts/chinese-copywriting-rules/\" target=\"_blank\" rel=\"noopener noreferrer\">中文文案排版细则 - Dawner</a></li>\n<li><a href=\"https://github.com/yikeke/zh-style-guide/\" target=\"_blank\" rel=\"noopener noreferrer\">中文技术文档写作风格指南</a></li>\n<li><a href=\"https://www.w3.org/TR/clreq/\" target=\"_blank\" rel=\"noopener noreferrer\">中文排版需求</a></li>\n</ul>\n<p>如果要提 issue/question 的话，强烈推荐阅读下面这些资料：</p>\n<ul>\n<li><a href=\"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way\" target=\"_blank\" rel=\"noopener noreferrer\">《提问的智慧》</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/545\" target=\"_blank\" rel=\"noopener noreferrer\">《如何向开源社区提问题》</a></li>\n<li><a href=\"http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html\" target=\"_blank\" rel=\"noopener noreferrer\">《如何有效地报告 Bug》</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25795393\" target=\"_blank\" rel=\"noopener noreferrer\">《如何向开源项目提交无法解答的问题》</a>。</li>\n</ul>\n<p>另外，你可以参考学习别人的文章，但一定一定一定不能复制粘贴别人的内容，努力比别人写的更容易理解，用自己的话讲出来，适当简化表达，突出重点！</p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近项目"
      ]
    },
    {
      "title": "常见问题",
      "url": "https://javaguide.cn/javaguide/faq.html",
      "id": "https://javaguide.cn/javaguide/faq.html",
      "summary": "JavaGuide 是否支持 RSS？ 必须支持！推荐 RSS 订阅本网站获取最新更新。 JavaGuide 有没有 PDF 版本？ 由于 JavaGuide 内容在持续完善，所以并没有一个完全与之同步的 PDF 版本提供。如果你想要 PDF 版本的话，可以考虑 《JavaGuide 面试突击版》 ，这是对 JavaGuide 内容的浓缩总结。 《Ja...",
      "content_html": "<h2>JavaGuide 是否支持 RSS？</h2>\n<p>必须支持！推荐 RSS 订阅本网站获取最新更新。</p>\n<h2>JavaGuide 有没有 PDF 版本？</h2>\n<p>由于 JavaGuide 内容在持续完善，所以并没有一个完全与之同步的 PDF 版本提供。如果你想要 PDF 版本的话，可以考虑 <strong>《JavaGuide 面试突击版》</strong> ，这是对 JavaGuide 内容的浓缩总结。</p>\n<p>《JavaGuide 面试突击版》在我的公众号后台回复“<strong>PDF</strong>”即可获取，免费的。除了 《JavaGuide 面试突击版》之外，还会免费送你多本优质面试 PDF 手册。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"公众号\"></p>\n<h2>如何看待 JavaGuide 的 star 数量很多？</h2>\n<p><a href=\"https://github.com/Snailclimb\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 目前已经是 Java 领域 star 数量最多的几个项目之一，登顶过很多次 GitHub Trending。</p>\n<p>不过，这个真心没啥好嘚瑟的。因为，教程类的含金量其实是比较低的，star 数量比较多主要也是因为受众面比较广，大家觉得不错，点个 star 就相当于收藏了。很多特别优秀的框架，star 数量可能只有几 K。所以，单纯看 star 数量没啥意思，就当看个笑话吧！</p>\n<p>维护这个项目的过程中，也被某些人 diss 过：“md 项目，没啥含金量，给国人丢脸！”。</p>\n<p>对于说这类话的人，我觉得对我没啥影响，就持续完善，把 JavaGuide 做的更好吧！其实，国外的很多项目也是纯 MD 啊！就比如外国的朋友发起的 awesome 系列、求职面试系列。无需多说，行动自证！凎！</p>\n<p>开源非常重要的一点就是协作。如果你开源了一个项目之后，就不再维护，别人给你提交 issue/pr，你都不处理，那开源也没啥意义了！</p>\n<h2>JavaGuide 会不会推出纸质书籍？</h2>\n<p>可以给出一个比较明确的答案：<strong>暂时没有考虑出书</strong> 。</p>\n<p>JavaGuide 这个项目诞生一年左右就有出版社的老师联系我了，由于自知个人能力尚需沉淀，我都婉拒了。这几年的话，由于项目还是有一点知名度的，找我出书的出版社老师更多了，也都被我一一婉拒了。</p>\n<p><strong>出书既能博名又能赚点钱，我为啥不考虑出书呢？</strong></p>\n<ul>\n<li>JavaGuide 的很多内容我还不是很满意，也一直在维护中，细心的小伙伴看我的<a href=\"https://github.com/Snailclimb/JavaGuide/commits/main\" target=\"_blank\" rel=\"noopener noreferrer\">提交记录</a>就明白了。</li>\n<li>开源版本更容易维护和修改，也能让更多人更方便地参与到项目的建设中，这也是我最初做这个项目的初衷。</li>\n<li>我觉得出书是一件神圣的事情，自认能力还不够。</li>\n<li>个人精力有限，不光有本职工作，还弄了一个<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>赚点外快，还要维护完善 JavaGuide。</li>\n<li>……</li>\n</ul>\n<p>这几年一直在默默完善，真心希望 JavaGuide 越来越好，帮助到更多朋友！也欢迎大家参与进来！</p>\n<h2>JavaGuide 上为什么有一些付费文章？</h2>\n<p>是这样的，JavaGuide 上确实有非常非常少的付费文章，差不多 10 篇不到吧，这对于整个网站的内容来说算是微不足道了。</p>\n<p>这些付费文章属于<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>专属，是我用来引流知识星球的，对整体阅读其实并没有什么影响的。</p>\n<p>我也知道大家不喜欢营销，所以我会让自己控制好一个度。我一不割韭菜，二不贩卖焦虑，仅仅赚一份小钱提升家人生活品质。</p>\n<p><strong>用心做内容，真心希望能帮助到其他人。</strong></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近项目"
      ]
    },
    {
      "title": "网站历史",
      "url": "https://javaguide.cn/javaguide/history.html",
      "id": "https://javaguide.cn/javaguide/history.html",
      "summary": "由于项目内容一直持续在更新迭代，所以，这里就不记录项目内容的具体更新情况了。 你可以通过 RSS 订阅获取网站的最新更新，你还可以通过 https://javaguide.cn/article/获取到网站最新更新的文章。 这里只记录一些比较重要的一些节点： 2022-06-13：完善网站排版以及样式。 2022-04-09：添加技术书籍精选。 2021...",
      "content_html": "<p>由于项目内容一直持续在更新迭代，所以，这里就不记录项目内容的具体更新情况了。</p>\n<p>你可以通过 <a href=\"https://javaguide.cn/feed.json\" target=\"_blank\" rel=\"noopener noreferrer\">RSS 订阅</a>获取网站的最新更新，你还可以通过 <a href=\"https://javaguide.cn/article/\" target=\"_blank\" rel=\"noopener noreferrer\">https://javaguide.cn/article/</a>获取到网站最新更新的文章。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguideimage-20220614172338606.png\" alt=\"\"></p>\n<p>这里只记录一些比较重要的一些节点：</p>\n<ul>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide/commit/83efb36fb56d197f2c4b471084b884c6a4f23e37\" target=\"_blank\" rel=\"noopener noreferrer\">2022-06-13</a>：完善网站排版以及样式。</li>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide/commit/618477f96c4a976cfe5a3bba2f646c0d20e3137e\" target=\"_blank\" rel=\"noopener noreferrer\">2022-04-09</a>：添加<a href=\"https://javaguide.cn/books/\" target=\"_blank\" rel=\"noopener noreferrer\">技术书籍精选</a>。</li>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide/commit/5c45af9c7a7cff0d3bc905b09b3bc42f2ee8a88a\" target=\"_blank\" rel=\"noopener noreferrer\">2021-03-13</a>：添加<a href=\"https://javaguide.cn/open-source-project/\" target=\"_blank\" rel=\"noopener noreferrer\">开源项目精选</a>。</li>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide/commit/827996e7722fd51718863d4bee156a8c6c759ff5\" target=\"_blank\" rel=\"noopener noreferrer\">2021-03-03</a> : 移除了开发工具的部分内容。</li>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide/commit/5a5f8ccb3bfb8d6ba8ac41295f1a1e4555395260\" target=\"_blank\" rel=\"noopener noreferrer\">2021-03-03</a>：vuepress-theme-hope 主题更新升级（比较重要的一次主题更新，从 1.x 版本升级到 2.x 版本，网站性能提升）。</li>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide/commit/dc45389934b7763f4f9789168f71c72ef303d3c4\" target=\"_blank\" rel=\"noopener noreferrer\">2021-11-09</a> : 基于 vuepress 重构整个项目，提升阅读体验。</li>\n</ul>\n",
      "image": "https://oss.javaguide.cn/github/javaguideimage-20220614172338606.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近项目"
      ]
    },
    {
      "title": "项目介绍",
      "url": "https://javaguide.cn/javaguide/intro.html",
      "id": "https://javaguide.cn/javaguide/intro.html",
      "summary": "我是 19 年大学毕业的，在大三准备面试的时候，我开源了 JavaGuide 。我把自己准备面试过程中的一些总结都毫不保留地通过 JavaGuide 分享了出来。 开源 JavaGuide 初始想法源于自己的个人那一段比较迷茫的学习经历，主要目的是为了通过这个开源平台来帮助一些在学习 Java 或者面试过程中遇到问题的小伙伴。 对于 Java 初学者来...",
      "content_html": "<p>我是 19 年大学毕业的，在大三准备面试的时候，我开源了 JavaGuide 。我把自己准备面试过程中的一些总结都毫不保留地通过 JavaGuide 分享了出来。</p>\n<p>开源 JavaGuide 初始想法源于自己的个人那一段比较迷茫的学习经历，主要目的是为了通过这个开源平台来帮助一些在学习 Java 或者面试过程中遇到问题的小伙伴。</p>\n<ul>\n<li><strong>对于 Java 初学者来说：</strong> 本文档倾向于给你提供一个比较详细的学习路径，目录清晰，让你对于 Java 整体的知识体系有一个清晰认识。你可以跟着视频或者书籍学习完某个知识点之后，然后来这里找对应的总结，帮助你更好地掌握对应的知识点。</li>\n<li><strong>对于非 Java 初学者来说：</strong> 本文档更适合回顾知识，准备面试，让你搞清面试应该把重心放在哪些问题上。</li>\n</ul>\n<p><strong>由于本网站的内容完全开源，由大家共同维护完善，因此内容质量比较高。</strong> 如果你也想要参与 JavaGuide 的维护建设工作，请查阅<a href=\"/javaguide/contribution-guideline.html\" target=\"_blank\">贡献指南</a>。</p>\n<p>相比于其他通过 JavaGuide 学到东西或者说助力获得 offer 的朋友来说 ， JavaGuide 对我的意义更加重大。不夸张的说，有时候真的感觉像是自己的孩子一点一点长大一样，我一直用心呵护着它。虽然，我花了很长时间来维护它，但是，我觉得非常值得！非常有意义！</p>\n<p>不过，希望大家对面试不要抱有侥幸的心理，打铁还需自身硬！ <strong>我希望这个文档是为你学习 Java 指明方向，而不仅仅是用来应付面试用的。</strong></p>\n<p>另外，JavaGuide 不可能把面试中的所有内容都给涵盖住，尤其是阿里、美团这种挖的比较深入的面试。你可以根据你的目标公司进行针对性的深入学习，多看一些目标公司的面经进行查漏补缺，没事就自测一下，多多思考总结。</p>\n<p>加油！奥利给！</p>\n<h2>官方知识星球</h2>\n<p>对于准备面试的同学来说，强烈推荐我创建的一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>，干货非常多，学习氛围也很不错！</p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<h2>项目说明</h2>\n<ul>\n<li><a href=\"https://javaguide.cn\" target=\"_blank\" rel=\"noopener noreferrer\">在线阅读网站</a>基于 Vuepress 搭建，使用的是主题是 <a href=\"https://github.com/vuepress-theme-hope/vuepress-theme-hope\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-theme-hope</a>（很 Nice 的一个主题）。</li>\n<li>项目的 Markdown 格式参考：<a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Markdown 格式</a>，表情素材来自：<a href=\"https://www.webpagefx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"noopener noreferrer\">EMOJI CHEAT SHEET</a>。</li>\n<li>Logo 下的小图标是使用<a href=\"https://shields.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Shields.IO</a> 生成的。</li>\n</ul>\n<h2>贡献者</h2>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide/graphs/contributors\" target=\"_blank\" rel=\"noopener noreferrer\">你可以点此链接查看 JavaGuide 的所有贡献者。</a> 感谢你们让 JavaGuide 变得更好！如果你们来到武汉一定要找我，我请你们吃饭玩耍。</p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/xingqiufuwu.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近项目"
      ]
    },
    {
      "title": "使用建议",
      "url": "https://javaguide.cn/javaguide/use-suggestion.html",
      "id": "https://javaguide.cn/javaguide/use-suggestion.html",
      "summary": "对于不准备面试的同学来说 ，本文档倾向于给你提供一个比较详细的学习路径，目录清晰，让你对于 Java 整体的知识体系有一个清晰认识。你可以跟着视频、书籍或者官方文档学习完某个知识点之后，然后来这里找对应的总结，帮助你更好地掌握对应的知识点。甚至说，你在有编程基础的情况下，想要学习某个知识点的话，可以直接看我的总结，这样学习效率会非常高。 对于准备面试的...",
      "content_html": "<p><strong>对于不准备面试的同学来说</strong> ，本文档倾向于给你提供一个比较详细的学习路径，目录清晰，让你对于 Java 整体的知识体系有一个清晰认识。你可以跟着视频、书籍或者官方文档学习完某个知识点之后，然后来这里找对应的总结，帮助你更好地掌握对应的知识点。甚至说，你在有编程基础的情况下，想要学习某个知识点的话，可以直接看我的总结，这样学习效率会非常高。</p>\n<p><strong>对于准备面试的同学来说</strong> ，本文档涵盖 Java 程序员所需要掌握的核心知识的常见面试问题总结。</p>\n<p>大部分人看 JavaGuide 应该都是为了准备技术八股文。<strong>那如何才能更高效地准备技术八股文？</strong></p>\n<p>对于技术八股文来说，尽量不要死记硬背，这种方式非常枯燥且对自身能力提升有限！但是！想要一点不背是不太现实的，只是说要结合实际应用场景和实战来理解记忆。</p>\n<p>我一直觉得面试八股文最好是和实际应用场景和实战相结合。很多同学现在的方向都错了，上来就是直接背八股文，硬生生学成了文科，那当然无趣了。</p>\n<p>举个例子：你的项目中需要用到 Redis 来做缓存，你对照着官网简单了解并实践了简单使用 Redis 之后，你去看了 Redis 对应的八股文。你发现 Redis 可以用来做限流、分布式锁，于是你去在项目中实践了一下并掌握了对应的八股文。紧接着，你又发现 Redis 内存不够用的情况下，还能使用 Redis Cluster 来解决，于是你就又去实践了一下并掌握了对应的八股文。</p>\n<p>而且， <strong>面试中有水平的面试官都是根据你的项目经历来顺带着问一些技术八股文</strong> 。</p>\n<p>举个例子：你的项目用到了消息队列，那面试官可能就会问你：为什么使用消息队列？项目中什么模块用到了消息队列？如何保证消息不丢失？如何保证消息的顺序性?（结合你使用的具体的消息队列来准备）……。</p>\n<p><strong>一定要记住你的主要目标是理解和记关键词，而不是像背课文一样一字一句地记下来！</strong></p>\n<p>另外，记录博客或者用自己的理解把对应的知识点讲给别人听也是一个不错的选择。</p>\n<p>最后，准备技术面试的同学一定要定期复习（自测的方式非常好），不然确实会遗忘的。</p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "走近项目"
      ]
    },
    {
      "title": "Java 开源项目精选",
      "url": "https://javaguide.cn/open-source-project/",
      "id": "https://javaguide.cn/open-source-project/",
      "summary": "这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 精选 GitHub 和 Gitee 上优质的 Java 开源项目。 灵感来源于awesome-java 这...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>精选 GitHub 和 Gitee 上优质的 Java 开源项目。</p>\n<p>灵感来源于<a href=\"https://github.com/akullpp/awesome-java\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-java</a> 这个项目，可以看作是这个项目的中文本土版本，项目类型更全面且加入了更多中文开源项目。</p>\n<p>欢迎大家在项目 <a href=\"https://github.com/CodingDocs/awesome-java/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issues 区</a>推荐自己认可的 Java 开源项目，让我们共同维护一个优质的 Java 开源项目精选集！</p>\n<ul>\n<li>GitHub 地址：<a href=\"https://github.com/CodingDocs/awesome-java\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/CodingDocs/awesome-java</a></li>\n<li>Gitee 地址：<a href=\"https://gitee.com/SnailClimb/awesome-java\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/SnailClimb/awesome-java</a></li>\n</ul>\n<p>如果内容对你有帮助的话，欢迎给本项目点个 Star。我会用我的业余时间持续完善这份名单，感谢！</p>\n<p>另外，我的公众号还会定期分享优质开源项目，每月一期，每一期我都会精选 5 个高质量的 Java 开源项目。</p>\n<p>目前已经更新到了第 24 期：</p>\n<ol>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247515383&amp;idx=1&amp;sn=ba7244020c05d966b483d8c302d54e85&amp;chksm=cea1f33cf9d67a2a111bcf6cadc3cc1c44828ba2302cd3e13bbd88349e43d4254808e6434133&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">一款基于 Spring Boot + Vue 的一站式开源持续测试平台</a>。</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247515981&amp;idx=1&amp;sn=e4b9c06af65f739bdcdf76bdc35d59f6&amp;chksm=cea1f086f9d679908bd6604b1c42d67580160d9789951f3707ad2f5de4d97aa72121d8fe777e&amp;token=435278690&amp;lang=zh_CN&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">用 Java 写个沙盒塔防游戏！已上架 Steam,Apple Store</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247516459&amp;idx=1&amp;sn=a86fefe083fa91c83638243d75500a04&amp;chksm=cea1cee0f9d647f69237357e869f52e0903afad62f365e18b04ff1851aeb4c80c8d31a488fee&amp;scene=21&amp;cur_album_id=1345382825083895808#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">一款基于 Java 的可视化 HTTP API 接口开发神器</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247518215&amp;idx=1&amp;sn=91e467f39322d2e7979b85fe235822d2&amp;chksm=cea1c7ccf9d64edaf966c95923d72d337bf5e655a773a3d295d65fc92e4535ae5d8b0e6d9d86&amp;token=660789642&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">一款对业务代码无侵入的可视化 Java 进程管理平台</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247519466&amp;idx=1&amp;sn=0dd412d5220444b37a1101f77ccdc65d&amp;chksm=cea1c321f9d64a376ef7de329b5c91e593a32c7a8e5c179b7ab3619296feea35939deb1f6a3f&amp;scene=178&amp;cur_album_id=1345382825083895808#rd\" target=\"_blank\" rel=\"noopener noreferrer\">一个比 Spring 更轻量级的 Web 框架！！！微软、红帽都在用</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247519972&amp;idx=1&amp;sn=f03c67e6e24eda2ccf703c8a9bc8c8f8&amp;chksm=cea1c12ff9d6483943f409e5ab50b773b5750b63d00950805fa340a67ad7b52ee74ff6651043&amp;scene=178&amp;cur_album_id=1345382825083895808#rd\" target=\"_blank\" rel=\"noopener noreferrer\">轻量！Google 开源了一个简易版 Spring ！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247520633&amp;idx=1&amp;sn=aec35af40e3ed3b1e844addd04e31af5&amp;chksm=cea1deb2f9d657a46a0684bbcbcb2900cebff39a2b2746a4a809b6b5306bce08d4382efd5ca8&amp;scene=178&amp;cur_album_id=1345382825083895808#rd\" target=\"_blank\" rel=\"noopener noreferrer\">一款跨时代的高性能 Java 框架！启动速度快到飞起</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kRgqHt73ZJGFQ2XmKG4PXw\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Boot+MyBatis Plus+JWT 问卷系统！开源！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/v3FUp-keswE2EhcTaLpSMQ\" target=\"_blank\" rel=\"noopener noreferrer\">手写一个简化版的 Spring Cloud！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/CCzsX3Sn2Q3vhuBDEmRTlw\" target=\"_blank\" rel=\"noopener noreferrer\">这个 SpringBoot+ Vue 开源博客系统太酷炫了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2OTA0Njk0OA==&amp;action=getalbum&amp;album_id=1345382825083895808&amp;scene=173&amp;from_msgid=2247530323&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">手写一个简易版数据库！项目经验稳了</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Ecjm801RpS34Mhj02bIOsQ\" target=\"_blank\" rel=\"noopener noreferrer\">一款强大的快速开发脚手架，前后端分离，干掉 70% 重复工作！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247530783&amp;idx=1&amp;sn=c9fdc0c71e2fc95d88ba954291b07e29&amp;chksm=cea136d4f9d6bfc2931a18a42f7bd9903503963e8a85a318adcce579614c0831b1881be3267d&amp;token=1811572747&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">手写一个入门级编译器！YYDS！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/vfPSXtOgefwonbnP53KlOQ\" target=\"_blank\" rel=\"noopener noreferrer\">8.8k star，这可能是我见过最强的开源支付系统！！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/esaivn2z_66CcrRJlDYLEA\" target=\"_blank\" rel=\"noopener noreferrer\">31.2k！这是我见过最强的后台管理系统 ！！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6-TnCHUMEIFWQVl-pIWBOA\" target=\"_blank\" rel=\"noopener noreferrer\">14.3k star，这是我见过最强的第三方登录工具库！！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/heag76H4UwZmr8oBY_2gcw\" target=\"_blank\" rel=\"noopener noreferrer\">3.2k！这是我见过最强的消息推送平台！！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/w-JuBlcqCeAZR0xUFWzvHQ\" target=\"_blank\" rel=\"noopener noreferrer\">好家伙，又一本技术书籍开源了！！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/WhI2K1VF0h_57TEVGCwuCA\" target=\"_blank\" rel=\"noopener noreferrer\">开箱即用的 ChatGPT Java SDK！支持 GPT3.5、 GPT4 API</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/tdBQ0Td_Gsev4AaIlq5ltg\" target=\"_blank\" rel=\"noopener noreferrer\">这是我见过最强大的技术社区实战项目！！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_KXBGckyS--P97G48zXCrw\" target=\"_blank\" rel=\"noopener noreferrer\">颜值吊打 Postman，这款开源 API 调试工具我超爱！！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/tl2539hsYsvEm8wjmQwDEg\" target=\"_blank\" rel=\"noopener noreferrer\">轻量级 Spring，够优雅！！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/4hyQsTICIUf9EvAVrC6wEg\" target=\"_blank\" rel=\"noopener noreferrer\">这是我见过最强的 Java 版内网穿透神器！</a></li>\n</ol>\n<p>推荐你在我的公众号“<strong>JavaGuide</strong>”回复“<strong>开源</strong>”在线阅读<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2OTA0Njk0OA==&amp;action=getalbum&amp;album_id=1345382825083895808&amp;scene=173&amp;from_msgid=2247516459&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">「优质开源项目推荐」</a>系列。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/open-source-project/image-20220512211235432.png\" alt=\"“JavaGuide”公众号回复“开源”\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/books167598cd2e17b8ec.png\" alt=\"我的公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/open-source-project/image-20220512211235432.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "开源项目"
      ]
    },
    {
      "title": "Java 优质开源大数据项目",
      "url": "https://javaguide.cn/open-source-project/big-data.html",
      "id": "https://javaguide.cn/open-source-project/big-data.html",
      "summary": "Spark :Spark 是用于大规模数据处理的统一分析引擎。 Flink：Apache Flink 是一个框架和分布式处理引擎，用于在无边界和有边界数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。 HBase：HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分...",
      "content_html": "<ul>\n<li><strong><a href=\"https://github.com/apache/spark\" target=\"_blank\" rel=\"noopener noreferrer\">Spark</a></strong> :Spark 是用于大规模数据处理的统一分析引擎。</li>\n<li><strong><a href=\"https://github.com/apache/flink\" title=\"flink\" target=\"_blank\" rel=\"noopener noreferrer\">Flink</a></strong>：Apache Flink 是一个框架和分布式处理引擎，用于在<em>无边界和有边界</em>数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。</li>\n<li><strong><a href=\"https://hbase.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">HBase</a></strong>：HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。</li>\n<li><strong><a href=\"https://flume.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Flume</a></strong> :Apache Flume 是一个分布式的、可靠的、可用的，从多种不同的源收集、聚集、移动大量日志数据到集中数据存储的系统。</li>\n<li><strong><a href=\"https://storm.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Storm</a></strong> : 一个分布式，高容错的实时计算系统。</li>\n</ul>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "开源项目"
      ]
    },
    {
      "title": "Java 优质开源 AI 项目",
      "url": "https://javaguide.cn/open-source-project/machine-learning.html",
      "id": "https://javaguide.cn/open-source-project/machine-learning.html",
      "summary": "由于 Java 在 AI 领域目前的应用较少，因此相关的开源项目也非常少。 基础框架 Spring AI：人工智能工程应用框架，为开发 AI 应用程序提供了 Spring 友好的 API 和抽象。 Spring AI Alibaba：一款 Java 语言实现的 AI 应用开发框架，旨在简化 Java AI 应用程序开发，让 Java 开发者像使用 Sp...",
      "content_html": "<p>由于 Java 在 AI 领域目前的应用较少，因此相关的开源项目也非常少。</p>\n<h2>基础框架</h2>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-ai\" target=\"_blank\" rel=\"noopener noreferrer\">Spring AI</a>：人工智能工程应用框架，为开发 AI 应用程序提供了 Spring 友好的 API 和抽象。</li>\n<li><a href=\"https://github.com/alibaba/spring-ai-alibaba\" target=\"_blank\" rel=\"noopener noreferrer\">Spring AI Alibaba</a>：一款 Java 语言实现的 AI 应用开发框架，旨在简化 Java AI 应用程序开发，让 Java 开发者像使用 Spring 开发普通应用一样开发 AI 应用。</li>\n<li><a href=\"https://github.com/langchain4j/langchain4j\" target=\"_blank\" rel=\"noopener noreferrer\">LangChain4j</a>：LangChiain 的 Java 版本，用于简化将 LLM（Large Language Model，大语言模型） 集成到 Java 应用程序的过程。</li>\n<li><a href=\"https://github.com/eclipse/deeplearning4j\" target=\"_blank\" rel=\"noopener noreferrer\">Deeplearning4j</a>：Deeplearning4j 是第一个为 Java 和 Scala 编写的商业级，开源，分布式深度学习库。</li>\n<li><a href=\"https://github.com/haifengl/smile\" target=\"_blank\" rel=\"noopener noreferrer\">Smile</a>：基于 Java 和 Scala 的机器学习库。</li>\n<li><a href=\"https://github.com/libgdx/gdx-ai\" target=\"_blank\" rel=\"noopener noreferrer\">GdxAI</a>：完全用 Java 编写的人工智能框架，用于使用 libGDX 进行游戏开发。</li>\n</ul>\n<h2>实战</h2>\n<ul>\n<li><a href=\"https://github.com/274056675/springboot-openai-chatgpt\" target=\"_blank\" rel=\"noopener noreferrer\">springboot-openai-chatgpt</a>：一个基于 SpringCloud 微服务架构，已对接 GPT-3.5、GPT-4.0、百度文心一言、Midjourney 绘图等等。</li>\n<li><a href=\"https://github.com/hncboy/ai-beehive\" target=\"_blank\" rel=\"noopener noreferrer\">ai-beehive</a>：AI 蜂巢，基于 Java 使用 Spring Boot 3 和 JDK 17，支持的功能有 ChatGPT、OpenAi Image、Midjourney、NewBing、文心一言等等。</li>\n</ul>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "开源项目"
      ]
    },
    {
      "title": "Java 优质开源实战项目",
      "url": "https://javaguide.cn/open-source-project/practical-project.html",
      "id": "https://javaguide.cn/open-source-project/practical-project.html",
      "summary": "快速开发平台 Snowy：国内首个国密前后端分离快速开发平台。详细介绍：5.1k！这是我见过最强的前后端分离快速开发脚手架！！。 eladmin : 前后端分离的后台管理系统，项目采用分模块开发方式， 权限控制采用 RBAC，支持数据字典与数据权限管理，支持一键生成前后端代码，支持动态路由。 RuoYi：RuoYi 一款基于基于 SpringBoot ...",
      "content_html": "<h2>快速开发平台</h2>\n<ul>\n<li><a href=\"https://gitee.com/xiaonuobase/snowy\" target=\"_blank\" rel=\"noopener noreferrer\">Snowy</a>：国内首个国密前后端分离快速开发平台。详细介绍：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247534316&amp;idx=1&amp;sn=69938397674fc33ecda43c8c9d0a4039&amp;chksm=cea10927f9d68031bc862485c6be984ade5af233d4d871d498c38f22164a84314678c0c67cd7&amp;token=1464380539&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">5.1k！这是我见过最强的前后端分离快速开发脚手架！！</a>。</li>\n<li><a href=\"https://github.com/elunez/eladmin\" target=\"_blank\" rel=\"noopener noreferrer\">eladmin</a> : 前后端分离的后台管理系统，项目采用分模块开发方式， 权限控制采用 RBAC，支持数据字典与数据权限管理，支持一键生成前后端代码，支持动态路由。</li>\n<li><a href=\"https://gitee.com/y_project/RuoYi\" target=\"_blank\" rel=\"noopener noreferrer\">RuoYi</a>：RuoYi 一款基于基于 SpringBoot 的权限管理系统 易读易懂、界面简洁美观，直接运行即可用 。</li>\n<li><a href=\"https://github.com/valarchie/AgileBoot-Back-End\" target=\"_blank\" rel=\"noopener noreferrer\">AgileBoot-Back-End</a>：基于 Ruoyi 做了大量重构优化的基础快速开发框架。</li>\n<li><a href=\"https://gitee.com/lab1024/smart-admin\" target=\"_blank\" rel=\"noopener noreferrer\">SmartAdmin</a> : 一套简洁、易用的低代码中后台解决方案。</li>\n<li><a href=\"https://gitee.com/zhaoeryu/eu-backend\" target=\"_blank\" rel=\"noopener noreferrer\">EuBackend</a>：基于 SpringBoot 开发的轻量级快速开发平台。</li>\n<li><a href=\"https://github.com/YunaiV/ruoyi-vue-pro\" target=\"_blank\" rel=\"noopener noreferrer\">RuoYi-Vue-Pro</a>：RuoYi-Vue 全新 Pro 版本，优化重构所有功能，支持数据权限、SaaS 多租户、Flowable 工作流、三方登录、支付等功能。</li>\n<li><a href=\"https://gitee.com/dromara/RuoYi-Vue-Plus\" target=\"_blank\" rel=\"noopener noreferrer\">RuoYi-Vue-Plus</a>：RuoYi-Vue 全新 Plus 版本，重写了 RuoYi-Vue 所有功能，集成了 Sa-Token、Mybatis-Plus、Jackson、SpringDoc、Hutool、OSS 定期同步等。</li>\n<li><a href=\"https://gitee.com/log4j/pig\" title=\"pig\" target=\"_blank\" rel=\"noopener noreferrer\">pig</a>：基于 Spring Boot + Spring Cloud + OAuth2 的 RBAC 权限管理系统。</li>\n<li><a href=\"https://gitee.com/stylefeng/guns\" target=\"_blank\" rel=\"noopener noreferrer\">Guns</a>：现代化的 Java 应用开发基础框架。</li>\n<li><a href=\"https://github.com/zhangdaiscott/jeecg-boot\" target=\"_blank\" rel=\"noopener noreferrer\">JeecgBoot</a>：一款基于代码生成器的 J2EE 低代码快速开发平台，支持生成前后端分离架构的项目。</li>\n<li><a href=\"https://gitee.com/erupt/erupt\" target=\"_blank\" rel=\"noopener noreferrer\">Erupt</a> : 低代码全栈类框架，它使用 Java 注解 动态生成页面以及增、删、改、查、权限控制等后台功能。</li>\n<li><a href=\"https://github.com/ballcat-projects/ballcat\" target=\"_blank\" rel=\"noopener noreferrer\">BallCat</a>：一个功能完善的快速开发脚手架！除了最基本的权限管理，定时任务功能之外，还额外支持 XSS 过滤，SQL 防注入、数据脱敏等多种功能</li>\n<li><a href=\"https://github.com/jhipster/generator-jhipster\" target=\"_blank\" rel=\"noopener noreferrer\">JHipster</a> :开源应用程序平台，可在几秒钟内创建 Spring Boot + Angular / React 项目。</li>\n</ul>\n<h2>博客/论坛系统</h2>\n<p>下面这几个项目都是非常适合 Spring Boot 初学者学习的，下面的大部分项目的总体代码架构我都看过，个人觉得还算不错，不会误导没有实际做过项目的朋友。</p>\n<ul>\n<li><a href=\"https://github.com/itwanger/paicoding\" target=\"_blank\" rel=\"noopener noreferrer\">paicoding</a>：一款好用又强大的开源社区，基于 Spring Boot 系列主流技术栈，附详细的教程。</li>\n<li><a href=\"https://github.com/rymcu/forest\" target=\"_blank\" rel=\"noopener noreferrer\">forest</a>：下一代的知识社区系统，可以自定义专题和作品集。后端基于 SpringBoot + Shrio + MyBatis + JWT + Redis，前端基于 Vue + NuxtJS + Element-UI。</li>\n<li><a href=\"https://github.com/codedrinker/community\" target=\"_blank\" rel=\"noopener noreferrer\">community</a>：开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。功能持续更新中…… 技术栈 Spring、Spring Boot、MyBatis、MySQL/H2、Bootstrap。</li>\n<li><a href=\"https://gitee.com/yadong.zhang/DBlog\" target=\"_blank\" rel=\"noopener noreferrer\">OneBlog</a>：简洁美观、功能强大并且自适应的博客系统，支持广告位、SEO、实时通讯等功能。</li>\n<li><a href=\"https://github.com/lenve/VBlog\" target=\"_blank\" rel=\"noopener noreferrer\">VBlog</a>：V 部落，Vue+SpringBoot 实现的多用户博客管理平台!</li>\n<li><a href=\"https://github.com/ZHENFENG13/My-Blog\" target=\"_blank\" rel=\"noopener noreferrer\">My-Blog</a>： SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。</li>\n</ul>\n<h2>Wiki/文档系统</h2>\n<ul>\n<li><a href=\"https://gitee.com/dromara/zyplayer-doc\" target=\"_blank\" rel=\"noopener noreferrer\">zyplayer-doc</a>：适合团队和个人私有化部署使用的知识库、笔记、WIKI 文档管理工具，同时还包含数据库管理、Api 接口管理等模块。</li>\n<li><a href=\"https://gitee.com/kekingcn/file-online-preview\" target=\"_blank\" rel=\"noopener noreferrer\">kkFileView</a>：文档在线预览解决方案，支持几乎所有主流文档格式预览，例如 doc、docx、ppt、pptx、wps、xls、xlsx、zip、rar、ofd、xmind、bpmn 、eml 、epub、3ds、dwg、psd 、mp4、mp3 等等。</li>\n</ul>\n<h2>文件管理系统/网盘</h2>\n<ul>\n<li><a href=\"https://gitee.com/SnailClimb/cloud-drive\" target=\"_blank\" rel=\"noopener noreferrer\">cloud-drive</a>：一个极简的现代化云存储系统，基于阿里云 OSS，提供文件上传、下载、分享等功能。系统采用前后端分离架构，提供安全可靠的文件存储服务。</li>\n<li><a href=\"https://gitee.com/qiwen-cloud/qiwen-file\" target=\"_blank\" rel=\"noopener noreferrer\">qiwen-file</a>：基于 SpringBoot+Vue 实现的分布式文件系统，支持本地磁盘、阿里云 OSS 对象存储、FastDFS 存储、MinIO 存储等多种存储方式，支持 office 在线编辑、分片上传、技术秒传、断点续传等功能。</li>\n<li><a href=\"https://gitee.com/dh_free/free-fs\" target=\"_blank\" rel=\"noopener noreferrer\">free-fs</a>：基于 SpringBoot + MyBatis Plus + MySQL + Sa-Token + Layui 等搭配七牛云， 阿里云 OSS 实现的云存储管理系统。 包含文件上传、删除、在线预览、云资源列表查询、下载、文件移动、重命名、目录管理、登录、注册、以及权限控制等功能。</li>\n<li><a href=\"https://github.com/zfile-dev/zfile\" target=\"_blank\" rel=\"noopener noreferrer\">zfile</a>：基于 Spring Boot + Vue 实现的在线网盘，支持对接 S3、OneDrive、SharePoint、Google Drive、多吉云、又拍云、本地存储、FTP、SFTP 等存储源，支持在线浏览图片、播放音视频，文本文件、Office、obj（3d）等文件类型。</li>\n</ul>\n<h2>考试/刷题系统</h2>\n<ul>\n<li><a href=\"https://github.com/PlayEdu/PlayEdu\" target=\"_blank\" rel=\"noopener noreferrer\">PlayEdu</a>：一款适用于搭建内部培训平台的开源系统，旨在为企业/机构打造自己品牌的内部培训平台。</li>\n<li><a href=\"https://gitee.com/himitzh0730/hoj\" target=\"_blank\" rel=\"noopener noreferrer\">HOJ</a>：分布式架构的在线测评平台 OJ ，功能非常全面，支持刷题、训练、比赛、评测等功能。</li>\n<li><a href=\"https://github.com/simplefanC/voj\" target=\"_blank\" rel=\"noopener noreferrer\">VOJ</a>：基于微服务架构的高性能在线评测系统。拥有本地判题服务，同时支持其它知名 OJ (HDU、POJ...) 的远程判题。采用现阶段流行技术实现，采用 Docker 容器化部署。</li>\n<li><a href=\"https://github.com/SDUOJ/OnlineJudge\" target=\"_blank\" rel=\"noopener noreferrer\">OnlineJudge</a>：基于微服务架构的在线评测系统，支持多种国际赛制支持（ICPC/OI/IOI），采用 Docker 容器化部署。</li>\n<li><a href=\"https://gitee.com/wells2333/sg-exam\" target=\"_blank\" rel=\"noopener noreferrer\">sg-exam</a>：方便易用、高颜值的教学管理平台，提供多租户、权限管理、考试、练习、在线学习等功能。</li>\n<li><a href=\"https://gitee.com/mindskip/uexam\" target=\"_blank\" rel=\"noopener noreferrer\">uexam</a>：功能全面的在线考试系统，开发部署简单快捷、界面设计友好、代码结构清晰。相关阅读：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzg2OTA0Njk0OA%3D%3D%26mid%3D2247491585%26idx%3D1%26sn%3D8d3c6768c22e72d6bfcbeee9624886a7%26chksm%3Dcea1afcaf9d626dc918760289c37025ad526f6255786bc198d2402203df64c873ad7934f58df%26scene%3D178%26cur_album_id%3D1345382825083895808%23rd\" target=\"_blank\" rel=\"noopener noreferrer\">好一个 Spring Boot 开源在线考试系统！解决了我的燃眉之急</a> 。</li>\n<li><a href=\"https://github.com/Jackson0714/PassJava-Platform\" target=\"_blank\" rel=\"noopener noreferrer\">PassJava-Platform</a>：基于微服务架构的面试刷题小程序！相关阅读：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzg2OTA0Njk0OA%3D%3D%26mid%3D2247497045%26idx%3D1%26sn%3D577175bfd6c040a0df5a494fce6f9758%26chksm%3Dcea1ba9ef9d633883a2e213c0fb9a88bdc87051347d4b3fad2c2befb65d8b16e1ea81d8146dd%26scene%3D178%26cur_album_id%3D1345382825083895808%23rd\" target=\"_blank\" rel=\"noopener noreferrer\">一个基于 Spring Cloud 的面试刷题系统。面试、毕设、项目经验一网打尽</a>。</li>\n</ul>\n<h2>商城系统</h2>\n<p>下面的商城系统大多比较复杂比如 mall ,如果没有 Java 基础和 Spring Boot 都还没有摸熟的话不推荐过度研究下面几个项目或者使用这些项目当作毕业设计。</p>\n<ul>\n<li><a href=\"https://gitee.com/nageoffer/congomall\" target=\"_blank\" rel=\"noopener noreferrer\">congomall</a>：不一样的 TOC 商城系统，SpringCloud-Alibaba 微服务架构设计，基于 DDD 领域驱动模型开发，代码设计优雅，涵盖商城核心业务。</li>\n<li><a href=\"https://github.com/macrozheng/mall\" title=\"mall\" target=\"_blank\" rel=\"noopener noreferrer\">mall</a>：mall 项目是一套电商系统，包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现。</li>\n<li><a href=\"https://github.com/macrozheng/mall-swarm\" title=\"mall-swarm\" target=\"_blank\" rel=\"noopener noreferrer\">mall-swarm</a> : mall-swarm 是一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统。</li>\n<li><a href=\"https://github.com/linlinjava/litemall\" title=\"litemall\" target=\"_blank\" rel=\"noopener noreferrer\">litemall</a>：又一个小商城。litemall = Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端。</li>\n<li><a href=\"https://github.com/newbee-ltd/newbee-mall\" target=\"_blank\" rel=\"noopener noreferrer\">newbee-mall</a> :newbee-mall 项目（新蜂商城）是一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发。</li>\n</ul>\n<h2>售票系统</h2>\n<ul>\n<li><a href=\"https://gitee.com/nageoffer/12306\" target=\"_blank\" rel=\"noopener noreferrer\">12306</a> ：基于 JDK17 + SpringBoot3 + SpringCloud 微服务架构的高并发 12306 购票服务。</li>\n</ul>\n<h2>权限管理系统</h2>\n<p>权限管理系统在企业级的项目中一般都是非常重要的，如果你需求去实际了解一个不错的权限系统是如何设计的话，推荐你可以参考下面这些开源项目。</p>\n<ul>\n<li><a href=\"https://github.com/Heeexy/SpringBoot-Shiro-Vue\" target=\"_blank\" rel=\"noopener noreferrer\">SpringBoot-Shiro-Vue</a>：基于 Spring Boot-Shiro-Vue 的权限管理思路，前后端都加以控制，可以做到按钮/接口级别的权限。</li>\n<li><a href=\"https://gitee.com/renrenio/renren-security\" target=\"_blank\" rel=\"noopener noreferrer\">renren-security</a>：一套灵活的权限控制系统，可控制到页面或按钮，满足绝大部分的权限需求</li>\n</ul>\n<h2>造轮子</h2>\n<ul>\n<li><a href=\"https://github.com/Snailclimb/guide-rpc-framework\" target=\"_blank\" rel=\"noopener noreferrer\">guide-rpc-framework</a>：一款基于 Netty+Kyro+Zookeeper 实现的自定义 RPC 框架-附详细实现过程和相关教程。</li>\n<li><a href=\"https://github.com/DerekYRC/mini-spring\" target=\"_blank\" rel=\"noopener noreferrer\">mini-spring</a>：简化版的 Spring 框架，能帮助你快速熟悉 Spring 源码和掌握 Spring 的核心原理。代码极度简化，保留了 Spring 的核心功能，如 IoC 和 AOP、资源加载器等核心功能。</li>\n<li><a href=\"https://github.com/DerekYRC/mini-spring-cloud\" target=\"_blank\" rel=\"noopener noreferrer\">mini-spring-cloud</a>：一个手写的简化版的 Spring Cloud，旨在帮助你快速熟悉 Spring Cloud 源码及掌握其核心原理。相关阅读：<a href=\"https://mp.weixin.qq.com/s/v3FUp-keswE2EhcTaLpSMQ\" target=\"_blank\" rel=\"noopener noreferrer\">手写一个简化版的 Spring Cloud！</a> 。</li>\n<li><a href=\"https://github.com/FranzHaidnor/haidnorJVM\" target=\"_blank\" rel=\"noopener noreferrer\">haidnorJVM</a>：使用 Java 实现的简易版 Java 虚拟机，介绍：<a href=\"https://www.zhihu.com/question/28125278/answer/3137240457\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.zhihu.com/question/28125278/answer/3137240457</a>。</li>\n<li><a href=\"https://github.com/fuzhengwei/itstack-demo-jvm\" target=\"_blank\" rel=\"noopener noreferrer\">itstack-demo-jvm</a>：通过 Java 代码来实现 JVM 的基础功能（搜索解析 class 文件、字节码命令、运行时数据区等。相关阅读：<a href=\"https://zachaxy.github.io/tags/JVM/\" target=\"_blank\" rel=\"noopener noreferrer\">《zachaxy 的手写 JVM 系列》</a>。</li>\n<li><a href=\"https://github.com/alchemystar/Freedom\" target=\"_blank\" rel=\"noopener noreferrer\">Freedom</a>：自己 DIY 一个具有 ACID 的数据库。相关项目：<a href=\"https://github.com/CN-GuoZiyang/MYDB\" target=\"_blank\" rel=\"noopener noreferrer\">MYDB</a>（一个简单的数据库实现）、<a href=\"https://github.com/erikgrinaker/toydb\" target=\"_blank\" rel=\"noopener noreferrer\">toyDB</a>（Rust 实现的分布式 SQL 数据库）。</li>\n<li><a href=\"https://github.com/stateIs0/lu-raft-kv\" target=\"_blank\" rel=\"noopener noreferrer\">lu-raft-kv</a>：一个 Java 版本的 Raft(CP) KV 分布式存储实现，非常适合想要深入学习 Raft 协议的小伙伴研究。lu-raft-kv 已经实现了 Raft 协议其中的两个核心功能：leader 选举和日志复制。如果你想要学习这个项目的话，建议你提前看一下作者写的项目介绍，比较详细，地址：<a href=\"http://thinkinjava.cn/2019/01/12/2019/2019-01-12-lu-raft-kv/\" target=\"_blank\" rel=\"noopener noreferrer\">http://thinkinjava.cn/2019/01/12/2019/2019-01-12-lu-raft-kv/</a> 。</li>\n</ul>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "开源项目"
      ]
    },
    {
      "title": "Java 优质开源系统设计项目",
      "url": "https://javaguide.cn/open-source-project/system-design.html",
      "id": "https://javaguide.cn/open-source-project/system-design.html",
      "summary": "基础框架 Web 框架 Spring Boot：Spring Boot 可以轻松创建独立的生产级基于 Spring 的应用程序，内置 web 服务器让你可以像运行普通 Java 程序一样运行项 目。另外，大部分 Spring Boot 项目只需要少量的配置即可，这有别于 Spring 的重配置。 SOFABoot：SOFABoot 基于 Spring ...",
      "content_html": "<h2>基础框架</h2>\n<h3>Web 框架</h3>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-boot\" title=\"spring-boot\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Boot</a>：Spring Boot 可以轻松创建独立的生产级基于 Spring 的应用程序，内置 web 服务器让你可以像运行普通 Java 程序一样运行项 目。另外，大部分 Spring Boot 项目只需要少量的配置即可，这有别于 Spring 的重配置。</li>\n<li><a href=\"https://github.com/sofastack/sofa-boot\" target=\"_blank\" rel=\"noopener noreferrer\">SOFABoot</a>：SOFABoot 基于 Spring Boot ，不过在其基础上增加了 Readiness Check，类隔离，日志空间隔离等等能力。 配套提供的还有：SOFARPC（RPC 框架）、SOFABolt（基于 Netty 的远程通信框架）、SOFARegistry（注册中心）...详情请参考：<a href=\"https://github.com/sofastack\" target=\"_blank\" rel=\"noopener noreferrer\">SOFAStack</a> 。</li>\n<li><a href=\"https://gitee.com/opensolon/solon\" target=\"_blank\" rel=\"noopener noreferrer\">Solon</a>：国产面向全场景的 Java 企业级应用开发框架。</li>\n<li><a href=\"https://github.com/tipsy/javalin\" target=\"_blank\" rel=\"noopener noreferrer\">Javalin</a>：一个轻量级的 Web 框架，同时支持 Java 和 Kotlin，被微软、红帽、Uber 等公司使用。</li>\n<li><a href=\"https://github.com/playframework/playframework\" target=\"_blank\" rel=\"noopener noreferrer\">Play Framework</a>：面向 Java 和 Scala 的高速 Web 框架。</li>\n<li><a href=\"https://github.com/lets-blade/blade\" target=\"_blank\" rel=\"noopener noreferrer\">Blade</a>：一款追求简约、高效的 Web 框架，基于 Java8 + Netty4。</li>\n</ul>\n<h3>微服务/云原生</h3>\n<ul>\n<li><a href=\"https://github.com/line/armeria\" target=\"_blank\" rel=\"noopener noreferrer\">Armeria</a>：适合任何情况的微服务框架。你可以用你喜欢的技术构建任何类型的微服务，包括<a href=\"https://grpc.io/\" target=\"_blank\" rel=\"noopener noreferrer\">gRPC</a>、 <a href=\"https://thrift.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Thrift</a>、<a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin</a>、 <a href=\"https://square.github.io/retrofit/\" target=\"_blank\" rel=\"noopener noreferrer\">Retrofit</a>、<a href=\"https://www.reactive-streams.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Reactive Streams</a>、 <a href=\"https://spring.io/projects/spring-boot\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Boot</a>和<a href=\"https://www.dropwizard.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Dropwizard</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus\" target=\"_blank\" rel=\"noopener noreferrer\">Quarkus</a> : 用于编写 Java 应用程序的云原生和容器优先的框架。</li>\n<li><a href=\"https://github.com/helidon-io/helidon\" target=\"_blank\" rel=\"noopener noreferrer\">Helidon</a>：一组用于编写微服务的 Java 库，支持 Helidon MP 和 Helidon SE 两种编程模型。</li>\n</ul>\n<h3>API 文档</h3>\n<ul>\n<li><a href=\"https://swagger.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Swagger</a> ：较主流的 RESTful 风格的 API 文档工具，提供了一套工具和规范，让开发人员能够更轻松地创建和维护可读性强、易于使用和交互的 API 文档。</li>\n<li><a href=\"https://doc.xiaominfo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Knife4j</a>：集 Swagger2 和 OpenAPI3 为一体的增强解决方案。</li>\n</ul>\n<h3>Bean 映射</h3>\n<ul>\n<li><a href=\"https://github.com/mapstruct/mapstruct\" target=\"_blank\" rel=\"noopener noreferrer\">MapStruct</a>（推荐）：满足 JSR269 规范的一个 Java 注解处理器，用于为 Java Bean 生成类型安全且高性能的映射。它基于编译阶段生成 get/set 代码，此实现过程中没有反射，不会造成额外的性能损失。</li>\n<li><a href=\"https://github.com/linpeilie/mapstruct-plus\" target=\"_blank\" rel=\"noopener noreferrer\">MapStruct Plus</a>：MapStruct 增强版本，支持自动生成 Mapper 接口。</li>\n<li><a href=\"https://github.com/jmapper-framework/jmapper-core\" target=\"_blank\" rel=\"noopener noreferrer\">JMapper</a> : 一个高性能且易于使用的 Bean 映射框架。</li>\n</ul>\n<h3>其他</h3>\n<ul>\n<li><a href=\"https://github.com/google/guice\" target=\"_blank\" rel=\"noopener noreferrer\">Guice</a>：Google 开源的一个轻量级依赖注入框架，相当于一个功能极简化的轻量级 Spring Boot。在某些情况下非常实用，就比如说我们的项目只需要使用依赖注入，不需要 AOP 等功能特性。</li>\n<li><a href=\"https://github.com/spring-projects/spring-batch\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Batch</a> : Spring Batch 是一个轻量级但功能又十分全面的批处理框架，主要用于批处理场景比如从数据库、文件或队列中读取大量记录。不过，需要注意的是：Spring Batch 不是调度框架。商业和开源领域都有许多优秀的企业调度框架比如 Quartz、XXL-JOB、Elastic-Job。它旨在与调度程序一起工作，而不是取代调度程序。</li>\n</ul>\n<h2>认证授权</h2>\n<h3>权限认证</h3>\n<ul>\n<li><a href=\"https://github.com/dromara/sa-token\" target=\"_blank\" rel=\"noopener noreferrer\">Sa-Token</a>：轻量级 Java 权限认证框架。支持认证授权、单点登录、踢人下线、自动续签等功能。相比于 Spring Security 和 Shiro 来说，Sa-Token 内置的开箱即用的功能更多，使用也更简单。</li>\n<li><a href=\"https://github.com/spring-projects/spring-security\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Security</a>：Spring 官方安全框架，能够用于身份验证、授权、加密和会话管理，是目前使用最广泛的 Java 安全框架。</li>\n<li><a href=\"https://github.com/apache/shiro\" target=\"_blank\" rel=\"noopener noreferrer\">Shiro</a>：Java 安全框架，功能和 Spring Security 类似，但使用起来更简单。</li>\n</ul>\n<h3>第三方登录</h3>\n<ul>\n<li><a href=\"https://github.com/Wechat-Group/WxJava\" target=\"_blank\" rel=\"noopener noreferrer\">WxJava</a> : WxJava （微信开发 Java SDK），支持包括微信支付、开放平台、小程序、企业微信/企业号和公众号等的后端开发。</li>\n<li><a href=\"https://github.com/justauth/JustAuth\" target=\"_blank\" rel=\"noopener noreferrer\">JustAuth</a>：小而全而美的第三方登录开源组件。目前已经集成了诸如：GitHub、Gitee、支付宝、新浪微博、微信、Google、Facebook、Twitter、StackOverflow 等国内外数十家第三方平台。</li>\n</ul>\n<h3>单点登录（SSO）</h3>\n<ul>\n<li><a href=\"https://github.com/apereo/cas\" target=\"_blank\" rel=\"noopener noreferrer\">CAS</a>：企业多语言网络单点登录解决方案。</li>\n<li><a href=\"https://gitee.com/dromara/MaxKey\" target=\"_blank\" rel=\"noopener noreferrer\">MaxKey</a>：单点登录认证系统，提供安全、标准和开放的用户身份管理(IDM)、身份认证(AM)、单点登录(SSO)、RBAC 权限管理和资源管理等。</li>\n<li><a href=\"https://github.com/keycloak/keycloak\" target=\"_blank\" rel=\"noopener noreferrer\">Keycloak</a>：免费、开源身份认证和访问管理系统，支持高度可配置的单点登录功能。</li>\n</ul>\n<h2>网络通讯</h2>\n<ul>\n<li><a href=\"https://github.com/netty/netty\" target=\"_blank\" rel=\"noopener noreferrer\">Netty</a> : 一个基于 NIO 的 client-server(客户端服务器)框架，使用它可以快速简单地开发网络应用程序。</li>\n<li><a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener noreferrer\">Retrofit</a>：适用于 Android 和 Java 的类型安全的 HTTP 客户端。Retrofit 的 HTTP 请求使用的是 <a href=\"https://square.github.io/okhttp/\" target=\"_blank\" rel=\"noopener noreferrer\">OkHttp</a> 库（一款被广泛使用网络框架）。</li>\n<li><a href=\"https://gitee.com/dromara/forest\" target=\"_blank\" rel=\"noopener noreferrer\">Forest</a>：轻量级 HTTP 客户端 API 框架，让 Java 发送 HTTP/HTTPS 请求不再难。它比 OkHttp 和 HttpClient 更高层，是封装调用第三方 restful api client 接口的好帮手，是 retrofit 和 feign 之外另一个选择。</li>\n<li><a href=\"https://github.com/YeautyYE/netty-websocket-spring-boot-starter\" target=\"_blank\" rel=\"noopener noreferrer\">netty-websocket-spring-boot-starter</a> :帮助你在 Spring Boot 中使用 Netty 来开发 WebSocket 服务器，并像 spring-websocket 的注解开发一样简单。</li>\n</ul>\n<h2>数据库</h2>\n<h3>数据库连接池</h3>\n<ul>\n<li><a href=\"https://github.com/alibaba/druid\" target=\"_blank\" rel=\"noopener noreferrer\">Druid</a> : 阿里巴巴数据库事业部出品，为监控而生的数据库连接池。</li>\n<li><a href=\"https://github.com/brettwooldridge/HikariCP\" target=\"_blank\" rel=\"noopener noreferrer\">HikariCP</a> : 一个可靠的高性能 JDBC 连接池。Springboot 2.0 选择 HikariCP 作为默认数据库连接池。</li>\n</ul>\n<h3>数据库框架</h3>\n<ul>\n<li><a href=\"https://github.com/baomidou/mybatis-plus\" target=\"_blank\" rel=\"noopener noreferrer\">MyBatis-Plus</a> : <a href=\"http://www.mybatis.org/mybatis-3/\" target=\"_blank\" rel=\"noopener noreferrer\">MyBatis</a> 增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</li>\n<li><a href=\"https://gitee.com/mybatis-flex/mybatis-flex\" target=\"_blank\" rel=\"noopener noreferrer\">MyBatis-Flex</a>：一个优雅的 MyBatis 增强框架，无其他任何第三方依赖，支持 CRUD、分页查询、多表查询、批量操作。</li>\n<li><a href=\"https://github.com/jOOQ/jOOQ\" target=\"_blank\" rel=\"noopener noreferrer\">jOOQ</a>：用 Java 编写 SQL 的最佳方式。</li>\n<li><a href=\"https://github.com/redisson/redisson\" title=\"redisson\" target=\"_blank\" rel=\"noopener noreferrer\">Redisson</a>：Redisson 是一款架设在 Redis 基础之上的 Java 驻内存数据网格 (In-Memory Data Grid)，它充分利用了 Redis 键值数据库的优势，为 Java 开发者提供了一系列具有分布式特性的常用工具类。例如，分布式 Java 对象（<code>Set</code>，<code>SortedSet</code>，<code>Map</code>，<code>List</code>，<code>Queue</code>，<code>Deque</code> 等）、分布式锁等。详细介绍请看：<a href=\"https://github.com/redisson/redisson/wiki/Redisson%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\" title=\"Redisson项目介绍\" target=\"_blank\" rel=\"noopener noreferrer\">Redisson 项目介绍</a>。</li>\n</ul>\n<h3>数据同步</h3>\n<ul>\n<li><a href=\"https://github.com/alibaba/canal\" title=\"canal\" target=\"_blank\" rel=\"noopener noreferrer\">Canal</a> [kə'næl] : Canal 译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。</li>\n<li><a href=\"https://github.com/alibaba/DataX\" title=\"DataX\" target=\"_blank\" rel=\"noopener noreferrer\">DataX</a>：DataX 是阿里巴巴集团内被广泛使用的离线数据同步工具/平台，实现包括 MySQL、Oracle、SqlServer、Postgre、HDFS、Hive、ADS、HBase、TableStore(OTS)、MaxCompute(ODPS)、DRDS 等各种异构数据源之间高效的数据同步功能。相关项目：<a href=\"https://github.com/WeiYe-Jing/datax-web\" target=\"_blank\" rel=\"noopener noreferrer\">DataX-Web</a> （DataX 集成可视化页面，选择数据源即可一键生成数据同步任务）。</li>\n</ul>\n<p>其他：<a href=\"https://github.com/DTStack/flinkx\" target=\"_blank\" rel=\"noopener noreferrer\">Flinkx</a> （基于 Flink 的分布式数据同步工具）。</p>\n<h3>时序数据库</h3>\n<ul>\n<li><a href=\"https://github.com/apache/iotdb\" target=\"_blank\" rel=\"noopener noreferrer\">IoTDB</a>：一款 Java 语言编写的国产时序数据库，为用户提供数据收集、存储和分析等服务。与 Hadoop、Spark 和可视化工具(如 Grafana)无缝集成，满足了工业 IoT 领域中海量数据存储、高吞吐量数据写入和复杂数据查询分析的需求。</li>\n<li><a href=\"https://github.com/kairosdb/kairosdb\" target=\"_blank\" rel=\"noopener noreferrer\">KairosDB</a>：一个基于 Cassandra 的快速分布式可扩展时间序列数据库。</li>\n</ul>\n<h2>搜索引擎</h2>\n<ul>\n<li><a href=\"https://github.com/elastic/elasticsearch\" title=\"elasticsearch\" target=\"_blank\" rel=\"noopener noreferrer\">Elasticsearch</a> （推荐）：开源，分布式，RESTful 搜索引擎。</li>\n<li><a href=\"https://github.com/meilisearch/meilisearch\" target=\"_blank\" rel=\"noopener noreferrer\">Meilisearch</a>：一个功能强大、快速、开源、易于使用和部署的搜索引擎，支持中文搜索（不需要添加额外的配置）。</li>\n<li><a href=\"https://lucene.apache.org/solr/\" target=\"_blank\" rel=\"noopener noreferrer\">Solr</a> : Solr（读作“solar”）是 Apache Lucene 项目的开源企业搜索平台。</li>\n<li><a href=\"https://gitee.com/dromara/easy-es\" target=\"_blank\" rel=\"noopener noreferrer\">Easy-ES</a>：傻瓜级 ElasticSearch 搜索引擎 ORM 框架。</li>\n</ul>\n<h2>测试</h2>\n<h3>测试框架</h3>\n<ul>\n<li><a href=\"http://junit.org/\" target=\"_blank\" rel=\"noopener noreferrer\">JUnit</a> : Java 测试框架。</li>\n<li><a href=\"https://github.com/mockito/mockito\" target=\"_blank\" rel=\"noopener noreferrer\">Mockito</a>：Mockito 是一个模拟测试框架，可以让你用优雅，简洁的接口写出漂亮的单元测试。（对那些不容易构建的对象用一个虚拟对象来代替，使其在调试期间用来作为真实对象的替代品）</li>\n<li><a href=\"https://github.com/powermock/powermock\" target=\"_blank\" rel=\"noopener noreferrer\">PowerMock</a>：编写单元测试仅靠 Mockito 是不够。因为 Mockito 无法 mock 私有方法、final 方法及静态方法等。PowerMock 这个 framework，主要是为了扩展其他 mock 框架，如 Mockito、EasyMock。它使用一个自定义的类加载器，纂改字节码，突破 Mockito 无法 mock 静态方法、构造方法、final 类、final 方法以及私有方法的限制。</li>\n<li><a href=\"https://github.com/tomakehurst/wiremock\" target=\"_blank\" rel=\"noopener noreferrer\">WireMock</a>：模拟 HTTP 服务的工具（Mock your APIs）。</li>\n<li><a href=\"https://github.com/testcontainers/testcontainers-java\" target=\"_blank\" rel=\"noopener noreferrer\">Testcontainers</a>：一个支持 JUnit 的测试工具库，提供轻量级的且一次性的常见数据库测试支持、Selenium Web 浏览器或者其他任何可以在 Docker 容器中运行的实例支持。</li>\n</ul>\n<p>相关阅读：</p>\n<ul>\n<li><a href=\"https://martinfowler.com/articles/practical-test-pyramid.html\" target=\"_blank\" rel=\"noopener noreferrer\">The Practical Test Pyramid- Martin Fowler</a> (很赞的一篇文章，不过是英文的)</li>\n<li><a href=\"https://juejin.im/post/6844903982058618894\" target=\"_blank\" rel=\"noopener noreferrer\">浅谈测试之 PowerMock</a></li>\n</ul>\n<h3>测试平台</h3>\n<ul>\n<li><a href=\"https://github.com/metersphere/metersphere\" target=\"_blank\" rel=\"noopener noreferrer\">MeterSphere</a> : 一站式开源持续测试平台，涵盖测试跟踪、接口测试、性能测试、团队协作等功能，全面兼容 JMeter、Postman、Swagger 等开源、主流标准。</li>\n<li><a href=\"https://www.apifox.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Apifox</a>：API 文档、API 调试、API Mock、API 自动化测试。</li>\n</ul>\n<h3>API 调试</h3>\n<ul>\n<li><a href=\"https://reqable.com/zh-CN/\" target=\"_blank\" rel=\"noopener noreferrer\">Reqable</a>：新一代开源 API 开发工具。Reqable = Fiddler + Charles + Postman, 让 API 调试更快。</li>\n<li><a href=\"https://insomnia.rest/\" target=\"_blank\" rel=\"noopener noreferrer\">Insomnia</a> :像人类而不是机器人一样调试 API。我平时经常用的一款 API 开发工具，界面美观且轻量，总之很喜欢。</li>\n<li><a href=\"https://paw.cloud/\" target=\"_blank\" rel=\"noopener noreferrer\">RapidAPI</a>：一款功能齐全的 HTTP 客户端，但仅支持 Mac。</li>\n<li><a href=\"https://github.com/Postcatlab/postcat\" target=\"_blank\" rel=\"noopener noreferrer\">Postcat</a>：一个可扩展的开源 API 工具平台。</li>\n<li><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Postman</a>：开发者最常用的 API 测试工具之一。</li>\n<li><a href=\"https://github.com/liyasthomas/postwoman\" title=\"postwoman\" target=\"_blank\" rel=\"noopener noreferrer\">Hoppscotch</a>（原 Postwoman）：开源 API 测试工具。官方定位是 Postman、Insomnia 等产品的开源替代品。</li>\n<li><a href=\"https://gitee.com/dromara/fast-request\" target=\"_blank\" rel=\"noopener noreferrer\">Restful Fast Request</a>：IDEA 版 Postman，API 调试工具 + API 管理工具 + API 搜索工具。</li>\n</ul>\n<h2>任务调度</h2>\n<ul>\n<li><a href=\"https://github.com/quartz-scheduler/quartz\" target=\"_blank\" rel=\"noopener noreferrer\">Quartz</a>：一个很火的开源任务调度框架，Java 定时任务领域的老大哥或者说参考标准， 很多其他任务调度框架都是基于 <code>quartz</code> 开发的，比如当当网的<code>elastic-job</code>就是基于<code>quartz</code>二次开发之后的分布式调度解决方案</li>\n<li><a href=\"https://github.com/xuxueli/xxl-job\" target=\"_blank\" rel=\"noopener noreferrer\">XXL-JOB</a> :XXL-JOB 是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</li>\n<li><a href=\"http://elasticjob.io/index_zh.html\" target=\"_blank\" rel=\"noopener noreferrer\">Elastic-Job</a>：Elastic-Job 是当当网开源的一个基于 Quartz 和 Zookeeper 的分布式调度解决方案，由两个相互独立的子项目 Elastic-Job-Lite 和 Elastic-Job-Cloud 组成，一般我们只要使用 Elastic-Job-Lite 就好。</li>\n<li><a href=\"https://github.com/analysys/EasyScheduler\" title=\"EasyScheduler\" target=\"_blank\" rel=\"noopener noreferrer\">EasyScheduler</a> （已经更名为 DolphinScheduler，已经成为 Apache 孵化器项目）：分布式易扩展的可视化工作流任务调度平台，主要解决“复杂任务依赖但无法直接监控任务健康状态”的问题。</li>\n<li><a href=\"https://gitee.com/KFCFans/PowerJob\" target=\"_blank\" rel=\"noopener noreferrer\">PowerJob</a>：新一代分布式任务调度与计算框架，支持 CRON、API、固定频率、固定延迟等调度策略，提供工作流来编排任务解决依赖关系，使用简单，功能强大，文档齐全，欢迎各位接入使用！<a href=\"http://www.powerjob.tech/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.powerjob.tech/</a> 。</li>\n</ul>\n<h2>工作流</h2>\n<ol>\n<li><a href=\"https://github.com/flowable/flowable-engine\" target=\"_blank\" rel=\"noopener noreferrer\">Flowable</a> ：Activiti5 的一个分支发展而来，功能丰富，在 Activiti 的基础上，引入了更多高级功能，如更强大的 CMMN（案例管理模型与符号）、DMN（决策模型与符号）支持，以及更灵活的集成选项。</li>\n<li><a href=\"https://github.com/Activiti/Activiti\" target=\"_blank\" rel=\"noopener noreferrer\">Activiti</a>：功能扩展相对保守，适合需要稳定 BPMN 2.0 工作流引擎的传统企业应用。</li>\n<li><a href=\"https://gitee.com/dromara/warm-flow\" target=\"_blank\" rel=\"noopener noreferrer\">Warm-Flow</a>：国产开源工作流引擎，其特点简洁轻量但又不简单，五脏俱全，组件独立，可扩展。</li>\n<li><a href=\"https://gitee.com/aizuda/flowlong\" target=\"_blank\" rel=\"noopener noreferrer\">FlowLong</a>：国产开源工作流引擎，专门中国特色流程审批打造。</li>\n</ol>\n<h2>分布式</h2>\n<h3>API 网关</h3>\n<ul>\n<li><a href=\"https://github.com/Kong/kong\" title=\"kong\" target=\"_blank\" rel=\"noopener noreferrer\">Kong</a>：Kong 是一个云原生、快速的、可伸缩的分布式微服务抽象层(也称为 API 网关、API 中间件或在某些情况下称为服务网格)。2015 年作为开源项目发布，其核心价值是高性能和可扩展性。</li>\n<li><a href=\"https://github.com/Dromara/soul\" title=\"soul\" target=\"_blank\" rel=\"noopener noreferrer\">ShenYu</a>：适用于所有微服务的可伸缩、高性能、响应性 API 网关解决方案。</li>\n<li><a href=\"https://github.com/spring-cloud/spring-cloud-gateway\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Cloud Gateway</a> : 基于 Spring Framework 5.x 和 Spring Boot 2.x 构建的高性能网关。</li>\n<li><a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"noopener noreferrer\">Zuul</a> : Zuul 是一个 L7 应用程序网关，它提供了动态路由，监视，弹性，安全性等功能。</li>\n</ul>\n<h3>配置中心</h3>\n<ul>\n<li><a href=\"https://github.com/ctripcorp/apollo\" title=\"apollo\" target=\"_blank\" rel=\"noopener noreferrer\">Apollo</a>（推荐）：Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</li>\n<li><a href=\"https://github.com/alibaba/nacos\" target=\"_blank\" rel=\"noopener noreferrer\">Nacos</a>（推荐）：Nacos 是 Spring Cloud Alibaba 提供的服务注册发现组件，类似于 Consul、Eureka。并且，提供了分布式配置管理功能。</li>\n<li><a href=\"https://github.com/spring-cloud/spring-cloud-config\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Cloud Config</a>：Spring Cloud Config 是 Spring Cloud 家族中最早的配置中心，虽然后来又发布了 Consul 可以代替配置中心功能，但是 Config 依然适用于 Spring Cloud 项目，通过简单的配置即可实现功能。</li>\n<li><a href=\"https://github.com/hashicorp/consul\" target=\"_blank\" rel=\"noopener noreferrer\">Consul</a>：Consul 是 HashiCorp 公司推出的开源软件，提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之 Consul 提供了一种完整的服务网格解决方案。</li>\n</ul>\n<h3>链路追踪</h3>\n<ul>\n<li><a href=\"https://github.com/apache/skywalking\" title=\"skywalking\" target=\"_blank\" rel=\"noopener noreferrer\">Skywalking</a> : 针对分布式系统的应用性能监控，尤其是针对微服务、云原生和面向容器的分布式系统架构。</li>\n<li><a href=\"https://github.com/openzipkin/zipkin\" title=\"zipkin\" target=\"_blank\" rel=\"noopener noreferrer\">Zipkin</a>：Zipkin 是一个分布式跟踪系统。它有助于收集解决服务体系结构中的延迟问题所需的时序数据。功能包括该数据的收集和查找。</li>\n<li><a href=\"https://github.com/dianping/cat\" title=\"cat\" target=\"_blank\" rel=\"noopener noreferrer\">CAT</a>：CAT 作为服务端项目基础组件，提供了 Java, C/C++, Node.js, Python, Go 等多语言客户端，已经在美团点评的基础架构中间件框架（MVC 框架，RPC 框架，数据库框架，缓存框架等，消息队列，配置系统等）深度集成，为美团点评各业务线提供系统丰富的性能指标、健康状况、实时告警等。</li>\n</ul>\n<p>相关阅读：<a href=\"https://skywalking.apache.org/zh/blog/2019-03-29-introduction-of-skywalking-and-simple-practice.html\" target=\"_blank\" rel=\"noopener noreferrer\">Skywalking 官网对于主流开源链路追踪系统的对比</a></p>\n<h3>分布式锁</h3>\n<ul>\n<li><a href=\"https://gitee.com/baomidou/lock4j\" target=\"_blank\" rel=\"noopener noreferrer\">Lock4j</a>：支持 Redisson、ZooKeeper 等不同方案的高性能分布式锁。</li>\n<li><a href=\"https://github.com/redisson/redisson\" title=\"redisson\" target=\"_blank\" rel=\"noopener noreferrer\">Redisson</a>：Redisson 在分布式锁方面提供全面且强大的支持，超越了简单的 Redis 锁实现。</li>\n</ul>\n<h2>高性能</h2>\n<h3>多线程</h3>\n<ul>\n<li><a href=\"https://github.com/opengoofy/hippo4j\" target=\"_blank\" rel=\"noopener noreferrer\">Hippo4j</a>：异步线程池框架，支持线程池动态变更&amp;监控&amp;报警，无需修改代码轻松引入。支持多种使用模式，轻松引入，致力于提高系统运行保障能力。</li>\n<li><a href=\"https://github.com/dromara/dynamic-tp\" target=\"_blank\" rel=\"noopener noreferrer\">Dynamic Tp</a>：轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持 Nacos、Apollo，Zookeeper、Consul、Etcd，可通过 SPI 自定义实现）。</li>\n<li><a href=\"https://gitee.com/jd-platform-opensource/asyncTool\" target=\"_blank\" rel=\"noopener noreferrer\">asyncTool</a> : 京东的一位大佬开源的多线程工具库，里面大量使用到了 <code>CompletableFuture</code> ，可以解决任意的多线程并行、串行、阻塞、依赖、回调的并行框架，可以任意组合各线程的执行顺序，带全链路执行结果回调。</li>\n</ul>\n<h3>缓存</h3>\n<h4>本地缓存</h4>\n<ul>\n<li><a href=\"https://github.com/ben-manes/caffeine\" target=\"_blank\" rel=\"noopener noreferrer\">Caffeine</a> : 一款强大的本地缓存解决方案，性能非常强大。</li>\n<li><a href=\"https://github.com/google/guava\" target=\"_blank\" rel=\"noopener noreferrer\">Guava</a>：Google Java 核心库，内置了比较完善的本地缓存实现。</li>\n<li><a href=\"https://github.com/snazy/ohc\" target=\"_blank\" rel=\"noopener noreferrer\">OHC</a> ：Java 堆外缓存解决方案（项目从 2021 年开始就不再进行维护了）。</li>\n</ul>\n<h4>分布式缓存</h4>\n<ul>\n<li><a href=\"https://github.com/redis/redis\" target=\"_blank\" rel=\"noopener noreferrer\">Redis</a>：一个使用 C 语言开发的内存数据库，分布式缓存首选。</li>\n<li><a href=\"https://github.com/dragonflydb/dragonfly\" target=\"_blank\" rel=\"noopener noreferrer\">Dragonfly</a>：一种针对现代应用程序负荷需求而构建的内存数据库，完全兼容 Redis 和 Memcached 的 API，迁移时无需修改任何代码，号称全世界最快的内存数据库。</li>\n<li><a href=\"https://github.com/Snapchat/KeyDB\" target=\"_blank\" rel=\"noopener noreferrer\">KeyDB</a>： Redis 的一个高性能分支，专注于多线程、内存效率和高吞吐量。</li>\n</ul>\n<h4>多级缓存</h4>\n<ul>\n<li><a href=\"https://gitee.com/ld/J2Cache\" target=\"_blank\" rel=\"noopener noreferrer\">J2Cache</a>：基于本地内存和 Redis 的两级 Java 缓存框架。</li>\n<li><a href=\"https://github.com/alibaba/jetcache\" target=\"_blank\" rel=\"noopener noreferrer\">JetCache</a>：阿里开源的缓存框架，支持多级缓存、分布式缓存自动刷新、 TTL 等功能。</li>\n</ul>\n<h3>消息队列</h3>\n<p><strong>分布式队列</strong>：</p>\n<ul>\n<li><a href=\"https://github.com/apache/rocketmq\" title=\"RocketMQ\" target=\"_blank\" rel=\"noopener noreferrer\">RocketMQ</a>：阿里巴巴开源的一款高性能、高吞吐量的分布式消息中间件。</li>\n<li><a href=\"https://github.com/apache/kafka\" title=\"Kafka\" target=\"_blank\" rel=\"noopener noreferrer\">Kafka</a>: Kafka 是一种分布式的，基于发布 / 订阅的消息系统。</li>\n<li><a href=\"https://github.com/rabbitmq\" title=\"RabbitMQ\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ</a> :由 erlang 开发的基于 AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列。</li>\n</ul>\n<p><strong>内存队列</strong>：</p>\n<ul>\n<li><a href=\"https://github.com/LMAX-Exchange/disruptor\" target=\"_blank\" rel=\"noopener noreferrer\">Disruptor</a>：Disruptor 是英国外汇交易公司 LMAX 开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与 I/O 操作处于同样的数量级）。</li>\n</ul>\n<h3>读写分离和分库分表</h3>\n<ul>\n<li><a href=\"https://github.com/apache/shardingsphere\" target=\"_blank\" rel=\"noopener noreferrer\">ShardingSphere</a>：ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar（计划中）这 3 款相互独立的产品组成。</li>\n<li><a href=\"https://github.com/MyCatApache/MyCat2\" target=\"_blank\" rel=\"noopener noreferrer\">MyCat</a> : MyCat 是数据库分库分表的中间件，MyCat 使用最多的两个功能是：读写分离和分库分表。MyCat 是一些社区爱好者在阿里 Cobar 的基础上进行二次开发，解决了 Cobar 当时存 在的一些问题，并且加入了许多新的功能在其中。</li>\n<li><a href=\"https://github.com/baomidou/dynamic-datasource-spring-boot-starter\" target=\"_blank\" rel=\"noopener noreferrer\">dynamic-datasource-spring-boot-starter</a>：一个基于 Spring Boot 的快速集成多数据源的启动器，支持多数据源、动态数据源、主从分离、读写分离和分布式事务。</li>\n</ul>\n<h2>高可用</h2>\n<h3>限流</h3>\n<p>分布式限流：</p>\n<ul>\n<li><a href=\"https://github.com/alibaba/Sentinel\" target=\"_blank\" rel=\"noopener noreferrer\">Sentinel</a>（推荐）：面向分布式服务架构的高可用防护组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助用户保障微服务的稳定性。</li>\n<li><a href=\"https://github.com/Netflix/Hystrix\" target=\"_blank\" rel=\"noopener noreferrer\">Hystrix</a>：类似于 Sentinel 。</li>\n</ul>\n<p>相关阅读：<a href=\"https://sentinelguard.io/zh-cn/blog/sentinel-vs-hystrix.html\" target=\"_blank\" rel=\"noopener noreferrer\">Sentinel 与 Hystrix 的对比</a>。</p>\n<p>单机限流：</p>\n<ul>\n<li><a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j\" target=\"_blank\" rel=\"noopener noreferrer\">Bucket4j</a>：一个非常不错的基于令牌/漏桶算法的限流库。</li>\n<li><a href=\"https://github.com/resilience4j/resilience4j\" target=\"_blank\" rel=\"noopener noreferrer\">Resilience4j</a>：一个轻量级的容错组件，其灵感来自于 Hystrix。</li>\n</ul>\n<h3>监控</h3>\n<ul>\n<li><a href=\"https://github.com/codecentric/spring-boot-admin\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Boot Admin</a>：管理和监控 Spring Boot 应用程序。</li>\n<li><a href=\"https://github.com/dropwizard/metrics\" target=\"_blank\" rel=\"noopener noreferrer\">Metrics</a>：捕获 JVM 和应用程序级别的指标。所以你知道发生了什么事。</li>\n</ul>\n<h3>日志</h3>\n<ul>\n<li>EKL 老三件套 : 最原始的时候，ELK 是由 3 个开源项目的首字母构成，分别是 Elasticsearch、Logstash、Kibana。</li>\n<li>新一代 ELK 架构 : Elasticsearch+Logstash+Kibana+Beats。</li>\n<li>EFK : EFK 中的 F 代表的是 <a href=\"https://github.com/fluent/fluentd\" target=\"_blank\" rel=\"noopener noreferrer\">Fluentd</a>。</li>\n<li><a href=\"https://gitee.com/dromara/TLog\" target=\"_blank\" rel=\"noopener noreferrer\">TLog</a>：一个轻量级的分布式日志标记追踪神器，10 分钟即可接入，自动对日志打标签完成微服务的链路追踪。</li>\n</ul>\n<h2>字节码操作</h2>\n<ul>\n<li><a href=\"https://asm.ow2.io/\" target=\"_blank\" rel=\"noopener noreferrer\">ASM</a>：通用 Java 字节码操作和分析框架。它可用于直接以二进制形式修改现有类或动态生成类。</li>\n<li><a href=\"https://github.com/raphw/byte-buddy\" target=\"_blank\" rel=\"noopener noreferrer\">Byte Buddy</a>：Java 字节码生成和操作库，用于在 Java 应用程序运行时创建和修改 Java 类，无需使用编译器</li>\n<li><a href=\"https://github.com/jboss-javassist/javassist\" target=\"_blank\" rel=\"noopener noreferrer\">Javassist</a>：动态编辑 Java 字节码的类库。</li>\n<li><a href=\"https://github.com/Col-E/Recaf\" target=\"_blank\" rel=\"noopener noreferrer\">Recaf</a>：现代 Java 字节码编辑器，基于 ASM（Java 字节码操作框架） 来修改字节码，可简化编辑已编译 Java 应用程序的过程。</li>\n</ul>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "开源项目"
      ]
    },
    {
      "title": "Java 优质开源工具类",
      "url": "https://javaguide.cn/open-source-project/tool-library.html",
      "id": "https://javaguide.cn/open-source-project/tool-library.html",
      "summary": "代码质量 Lombok :一个能够简化 Java 代码的强大工具库。通过使用 Lombok 的注解，我们可以自动生成常用的代码逻辑，例如 getter、setter、equals、hashCode、toString 方法，以及构造器、日志变量等内容。 Guava： Google 开发的一组功能强大的核心库，扩展了 Java 的标准库功能。它提供了许多有...",
      "content_html": "<h2>代码质量</h2>\n<ul>\n<li><a href=\"https://github.com/rzwitserloot/lombok\" target=\"_blank\" rel=\"noopener noreferrer\">Lombok</a> :一个能够简化 Java 代码的强大工具库。通过使用 Lombok 的注解，我们可以自动生成常用的代码逻辑，例如 <code>getter</code>、<code>setter</code>、<code>equals</code>、<code>hashCode</code>、<code>toString</code> 方法，以及构造器、日志变量等内容。</li>\n<li><a href=\"https://github.com/google/guava\" title=\"guava\" target=\"_blank\" rel=\"noopener noreferrer\">Guava</a>： Google 开发的一组功能强大的核心库，扩展了 Java 的标准库功能。它提供了许多有用的工具类和集合类型，例如 <code>Multimap</code>（多值映射）、<code>Multiset</code>（多重集合）、<code>BiMap</code>（双向映射）和不可变集合，此外还包含图形处理库和并发工具。Guava 还支持 I/O 操作、哈希算法、字符串处理、缓存等多种实用功能。</li>\n<li><a href=\"https://github.com/looly/hutool\" title=\"hutool\" target=\"_blank\" rel=\"noopener noreferrer\">Hutool</a> : 一个全面且用户友好的 Java 工具库，旨在通过最小的依赖简化开发任务。它封装了许多实用的功能，例如文件操作、缓存、加密/解密、日志、文件操作。</li>\n</ul>\n<h2>问题排查和性能优化</h2>\n<ul>\n<li><a href=\"https://github.com/alibaba/arthas\" title=\"arthas\" target=\"_blank\" rel=\"noopener noreferrer\">Arthas</a>：Alibaba 开源的 Java 诊断工具，可以实时监控和诊断 Java 应用程序。它提供了丰富的命令和功能，用于分析应用程序的性能问题，包括启动过程中的资源消耗和加载时间。</li>\n<li><a href=\"https://github.com/async-profiler/async-profiler\" target=\"_blank\" rel=\"noopener noreferrer\">Async Profiler</a>：低开销的异步 Java 性能分析工具，用于收集和分析应用程序的性能数据。</li>\n<li><a href=\"https://github.com/maciejwalkowiak/spring-boot-startup-report\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Boot Startup Report</a>：用于生成 Spring Boot 应用程序启动报告的工具。它可以提供详细的启动过程信息，包括每个 bean 的加载时间、自动配置的耗时等，帮助你分析和优化启动过程。</li>\n<li><a href=\"https://github.com/linyimin0812/spring-startup-analyzer/blob/main/README_ZH.md\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Startup Analyzer</a>：采集 Spring 应用启动过程数据，生成交互式分析报告(HTML)，用于分析 Spring 应用启动卡点，支持 Spring Bean 异步初始化，减少优化 Spring 应用启动时间。UI 参考<a href=\"https://github.com/maciejwalkowiak/spring-boot-startup-report\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Boot Startup Report</a>实现。</li>\n</ul>\n<h2>文档处理</h2>\n<h3>文档解析</h3>\n<ul>\n<li><a href=\"https://github.com/apache/tika\" target=\"_blank\" rel=\"noopener noreferrer\">Tika</a>：Apache Tika 工具包能够检测并提取来自超过一千种不同文件类型（如 PPT、XLS 和 PDF）的元数据和文本内容。</li>\n</ul>\n<h3>Excel</h3>\n<ul>\n<li><a href=\"https://github.com/alibaba/easyexcel\" target=\"_blank\" rel=\"noopener noreferrer\">EasyExcel</a> :快速、简单避免 OOM 的 Java 处理 Excel 工具。不过，这个个项目不再维护，迁移至了 <a href=\"https://github.com/fast-excel/fastexcel\" target=\"_blank\" rel=\"noopener noreferrer\">FastExcel</a>。</li>\n<li><a href=\"https://github.com/pig-mesh/excel-spring-boot-starter\" target=\"_blank\" rel=\"noopener noreferrer\">Excel Spring Boot Starter</a>：基于 FastExcel 实现的 Spring Boot Starter，用于简化 Excel 的读写操作。</li>\n<li><a href=\"https://github.com/monitorjbl/excel-streaming-reader\" target=\"_blank\" rel=\"noopener noreferrer\">Excel Streaming Reader</a>：Excel 流式代码风格读取工具（只支持读取 XLSX 文件），基于 Apache POI 封装，同时保留标准 POI API 的语法。</li>\n<li><a href=\"https://github.com/liaochong/myexcel\" target=\"_blank\" rel=\"noopener noreferrer\">MyExcel</a>：一个集导入、导出、加密 Excel 等多项功能的工具包。</li>\n</ul>\n<h3>Word</h3>\n<ul>\n<li><a href=\"https://github.com/Sayi/poi-tl\" target=\"_blank\" rel=\"noopener noreferrer\">poi-tl</a>：基于 Apache POI 的 Word 模板引擎，可以根据 Word 模板和数据生成 Word 文档，所见即所得！</li>\n</ul>\n<h3>JSON</h3>\n<ul>\n<li><a href=\"https://github.com/json-path/JsonPath\" target=\"_blank\" rel=\"noopener noreferrer\">JsonPath</a>：处理 JSON 数据的工具库。</li>\n</ul>\n<h3>PDF</h3>\n<p>对于简单的 PDF 创建需求，OpenPDF 是一个不错的选择，它开源免费，API 简单易用。对于需要解析、转换和提取文本等操作的复杂场景，可以选择 Apache PDFBox。当然了，复杂场景如果不介意 LGPL 许可也可以选择 iText。</p>\n<ul>\n<li><a href=\"https://gitee.com/dromara/x-easypdf\" target=\"_blank\" rel=\"noopener noreferrer\">x-easypdf</a>：一个用搭积木的方式构建 PDF 的框架（基于 pdfbox/fop），支持 PDF 导出和编辑，适合简单的 PDF 文档生成场景。</li>\n<li><a href=\"https://github.com/itext/itext7\" target=\"_blank\" rel=\"noopener noreferrer\">iText</a>：一个用于创建、编辑和增强 PDF 文档的 Java 库。iText 7 社区版采用 AGPL 许可证，如果你的项目是闭源商业项目，需要购买商业许可证。 iText 5 仍然是 LGPL 许可，可以免费用于商业用途，但已经停止维护。</li>\n<li><a href=\"https://github.com/LibrePDF/OpenPDF\" target=\"_blank\" rel=\"noopener noreferrer\">OpenPDF</a>：完全开源免费 (LGPL/MPL 双重许可)，基于 iText 的一个分支，可以作为 iText 的替代品，简单易用，但功能相比于 iText 更少一些（对于大多数场景已经足够）。</li>\n<li><a href=\"https://github.com/apache/pdfbox\" target=\"_blank\" rel=\"noopener noreferrer\">Apache PDFBox</a> :完全开源免费 (Apache 许可证)，功能强大，支持 PDF 的创建、解析、转换和提取文本等。不过，由于其功能过于丰富，因此 API 设计相对复杂，学习难度会大一些。</li>\n<li><a href=\"https://xmlgraphics.apache.org/fop/\" target=\"_blank\" rel=\"noopener noreferrer\">FOP</a> : Apache FOP 用于将 XSL-FO（Extensible Stylesheet Language Formatting Objects）格式化对象转换为多种输出格式，最常见的是 PDF。</li>\n</ul>\n<h2>图片处理</h2>\n<ul>\n<li><a href=\"https://github.com/coobird/thumbnailator\" target=\"_blank\" rel=\"noopener noreferrer\">Thumbnailator</a>：一个图像处理工具库，主要功能是缩放图像、添加水印、旋转图像、调整图片大小以及区域裁剪。</li>\n<li><a href=\"https://github.com/nackily/imglib\" target=\"_blank\" rel=\"noopener noreferrer\">Imglib</a>：一个轻量级的 JAVA 图像处理库，致力于简化对图像的常见处理，主要提供三部分的能力：图像收集、图像处理（基于 Thumbnailator 实现）、聚合与分裂。</li>\n</ul>\n<h2>验证码</h2>\n<ul>\n<li><a href=\"https://gitee.com/whvse/EasyCaptcha\" target=\"_blank\" rel=\"noopener noreferrer\">EasyCaptcha</a>：Java 图形验证码，支持 gif、中文、算术等类型，可用于 Java Web、JavaSE 等项目。</li>\n<li><a href=\"https://gitee.com/anji-plus/captcha\" target=\"_blank\" rel=\"noopener noreferrer\">AJ-Captcha</a>：行为验证码(滑动拼图、点选文字)，前后端(java)交互。</li>\n<li><a href=\"https://gitee.com/tianai/tianai-captcha\" target=\"_blank\" rel=\"noopener noreferrer\">tianai-captcha</a>：好看又好用的滑块验证码。</li>\n</ul>\n<h2>短信&amp;邮件</h2>\n<ul>\n<li><a href=\"https://github.com/dromara/SMS4J\" target=\"_blank\" rel=\"noopener noreferrer\">SMS4J</a>：短信聚合框架，解决接入多个短信 SDK 的繁琐流程。</li>\n<li><a href=\"https://github.com/bbottema/simple-java-mail\" target=\"_blank\" rel=\"noopener noreferrer\">Simple Java Mail</a>：最简单的 Java 轻量级邮件库，同时能够发送复杂的电子邮件。</li>\n</ul>\n<h2>在线支付</h2>\n<ul>\n<li><a href=\"https://gitee.com/jeequan/jeepay\" target=\"_blank\" rel=\"noopener noreferrer\">Jeepay</a>：一套适合互联网企业使用的开源支付系统，已实现交易、退款、转账、分账等接口，支持服务商特约商户和普通商户接口。已对接微信，支付宝，云闪付官方接口，支持聚合码支付。</li>\n<li><a href=\"https://gitee.com/YunGouOS/YunGouOS-PAY-SDK\" target=\"_blank\" rel=\"noopener noreferrer\">YunGouOS-PAY-SDK</a>：YunGouOS 微信支付接口、微信官方个人支付接口、非二维码收款，非第四方清算。个人用户可提交资料开通微信支付商户，完成对接。</li>\n<li><a href=\"https://gitee.com/javen205/IJPay\" target=\"_blank\" rel=\"noopener noreferrer\">IJPay</a>：聚合支付，IJPay 让支付触手可及，封装了微信支付、QQ 支付、支付宝支付、京东支付、银联支付、PayPal 支付等常用的支付方式以及各种常用的接口。</li>\n</ul>\n<h2>其他</h2>\n<ul>\n<li><a href=\"https://github.com/oshi/oshi\" title=\"oshi\" target=\"_blank\" rel=\"noopener noreferrer\">oshi</a>：一款为 Java 语言提供的基于 JNA 的（本机）操作系统和硬件信息库。</li>\n<li><a href=\"https://github.com/lionsoul2014/ip2region\" target=\"_blank\" rel=\"noopener noreferrer\">ip2region</a> :最自由的 ip 地址查询库，ip 到地区的映射库，提供 Binary,B 树和纯内存三种查询算法，妈妈再也不用担心我的 ip 地址定位。</li>\n<li><a href=\"https://github.com/real-logic/agrona\" target=\"_blank\" rel=\"noopener noreferrer\">agrona</a>：Java 高性能数据结构（<code>Buffers</code>、<code>Lists</code>、<code>Maps</code>、<code>Scalable Timer Wheel</code>……）和实用方法。</li>\n</ul>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "开源项目"
      ]
    },
    {
      "title": "Java 优质开源开发工具",
      "url": "https://javaguide.cn/open-source-project/tools.html",
      "id": "https://javaguide.cn/open-source-project/tools.html",
      "summary": "代码质量 SonarQube：静态代码检查工具，，帮助检查代码缺陷，可以快速的定位代码中潜在的或者明显的错误，改善代码质量，提高开发速度。 Spotless：Spotless 是支持多种语言的代码格式化工具，支持 Maven 和 Gradle 以 Plugin 的形式构建。 CheckStyle : 类似于 Spotless，可帮助程序员编写符合编码标...",
      "content_html": "<h2>代码质量</h2>\n<ul>\n<li><a href=\"https://github.com/SonarSource/sonarqube\" title=\"sonarqube\" target=\"_blank\" rel=\"noopener noreferrer\">SonarQube</a>：静态代码检查工具，，帮助检查代码缺陷，可以快速的定位代码中潜在的或者明显的错误，改善代码质量，提高开发速度。</li>\n<li><a href=\"https://github.com/diffplug/spotless\" target=\"_blank\" rel=\"noopener noreferrer\">Spotless</a>：Spotless 是支持多种语言的代码格式化工具，支持 Maven 和 Gradle 以 Plugin 的形式构建。</li>\n<li><a href=\"https://github.com/checkstyle/checkstyle\" title=\"checkstyle\" target=\"_blank\" rel=\"noopener noreferrer\">CheckStyle</a> : 类似于 Spotless，可帮助程序员编写符合编码标准的 Java 代码。</li>\n<li><a href=\"https://github.com/pmd/pmd\" title=\"pmd\" target=\"_blank\" rel=\"noopener noreferrer\">PMD</a> : 可扩展的多语言静态代码分析器。</li>\n<li><a href=\"https://github.com/spotbugs/spotbugs\" title=\"spotbugs\" target=\"_blank\" rel=\"noopener noreferrer\">SpotBugs</a> : FindBugs 的继任者。静态分析工具，用于查找 Java 代码中的错误。</li>\n<li><a href=\"https://github.com/alibaba/p3c\" title=\"p3c\" target=\"_blank\" rel=\"noopener noreferrer\">P3C</a>：Alibaba Java Coding Guidelines pmd implements and IDE plugin。Eclipse 和 IDEA 上都有该插件。</li>\n</ul>\n<h2>项目构建</h2>\n<ul>\n<li><a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Maven</a>：一个软件项目管理和理解工具。基于项目对象模型 (Project Object Model，POM) 的概念，Maven 可以从一条中心信息管理项目的构建、报告和文档。详细介绍：<a href=\"https://javaguide.cn/tools/maven/maven-core-concepts.html\" target=\"_blank\" rel=\"noopener noreferrer\">Maven 核心概念总结</a>。</li>\n<li><a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle</a> ：一个开源的构建自动化工具，它足够灵活，可以构建几乎任何类型的软件。Gradle 对你要构建什么或者如何构建它做了很少的假设，这使得 Gradle 特别灵活。详细介绍：<a href=\"https://javaguide.cn/tools/gradle/gradle-core-concepts.html\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle 核心概念总结</a>。</li>\n</ul>\n<h2>反编译</h2>\n<ul>\n<li><a href=\"https://github.com/skylot/jadx\" target=\"_blank\" rel=\"noopener noreferrer\">JADX</a>：用于从 Android Dex 和 Apk 文件生成 Java 源代码的命令行和 GUI 工具。</li>\n<li><a href=\"https://github.com/java-decompiler/jd-gui\" target=\"_blank\" rel=\"noopener noreferrer\">JD-GUI</a>:一个独立的 GUI 工具，可显示 CLASS 文件中的 Java 源代码。</li>\n</ul>\n<h2>数据库</h2>\n<h3>数据库建模</h3>\n<ul>\n<li><a href=\"https://gitee.com/robergroup/chiner\" target=\"_blank\" rel=\"noopener noreferrer\">CHINER</a>：开源免费的国产数据库建模工具。目标是做一款丰富数据库生态，独立于具体数据库之外的，数据库关系模型设计平台。前生是 <a href=\"https://gitee.com/robergroup/pdman\" target=\"_blank\" rel=\"noopener noreferrer\">PDMan</a>，定位为 PowerDesigner 的免费替代方案。</li>\n</ul>\n<p>开源的数据库建模工具比较少，以下是一些非开源的数据库建模工具（部分需要付费才能使用） :</p>\n<ul>\n<li><a href=\"https://www.mysql.com/products/workbench/\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL Workbench</a> : MySQL 官方为数据库架构师、开发人员和 DBA 提供的一个可视化工具。 MySQL Workbench 支持数据建模，SQL 开发以及服务器配置、用户管理、性能优化、数据库备份以及迁移等功能，支持 Windows、Linux 和 Mac OS X 平台。</li>\n<li><a href=\"https://www.navicat.com.cn/products/navicat-data-modeler\" target=\"_blank\" rel=\"noopener noreferrer\">Navicat Data Modeler</a> : 一款强大的和符合成本效益的数据库设计工具，它能帮助用户创建高质素的概念、逻辑和物理数据模型。让你可视化地设计数据库结构、执行逆向或正向工程程序、从 ODBC 数据源导入模型、生成复杂的 SQL/DDL 和打印模型到文件等。付费。</li>\n<li><a href=\"https://dbschema.com/\" target=\"_blank\" rel=\"noopener noreferrer\">DbSchema</a> : 一款功能强大的数据库设计和管理的可视化工具，支持几乎所有的关系型和 NoSQL 数据库。付费。</li>\n<li><a href=\"https://dbdiagram.io/home\" target=\"_blank\" rel=\"noopener noreferrer\">dbdiagram.io</a> : 是一款简单免费的在线 ER 图绘制工具，通过编写代码创建模型，专为开发人员和数据分析师而设计。它通过一个简单的自定义语言来生成数据模型，支持 MySQL、PostgreSQL、SQL Server 数据库 DDL 文件的正向工程和逆向工程、版本历史、在线共享、导出图片或者 PDF 等功能。<a href=\"http://dbdiagram.io\" target=\"_blank\" rel=\"noopener noreferrer\">dbdiagram.io</a> 提供了免费版。</li>\n</ul>\n<h3>数据库管理</h3>\n<ul>\n<li><a href=\"https://github.com/alibaba/Chat2DB\" target=\"_blank\" rel=\"noopener noreferrer\">Chat2DB</a>：阿里巴巴开源的一款智能的通用数据库工具和 SQL 客户端，支持 Windows、Mac 本地安装，也支持服务器端部署，Web 网页访问。和传统的数据库客户端软件 Navicat、DBeaver 相比 Chat2DB 集成了 AIGC 的能力，支持自然语言生成 SQL、SQL 性能优化等功能。</li>\n<li><a href=\"https://github.com/beekeeper-studio/beekeeper-studio\" target=\"_blank\" rel=\"noopener noreferrer\">Beekeeper Studio</a>：跨平台数据库管理工具，颜值高，支持 SQLite、MySQL、MariaDB、Postgres、CockroachDB、SQL Server、Amazon Redshift。</li>\n<li><a href=\"https://github.com/sequelpro/sequelpro\" target=\"_blank\" rel=\"noopener noreferrer\">Sequel Pro</a>：适用于 macOS 的 MySQL/MariaDB 数据库管理工具。</li>\n<li><a href=\"https://github.com/dbeaver/dbeaver\" target=\"_blank\" rel=\"noopener noreferrer\">DBeaver</a>：一个基于 Java 开发 ，并且支持几乎所有的数据库产品的开源数据库管理工具。DBeaver 社区版不光支持关系型数据库比如 MySQL、PostgreSQL、MariaDB、SQLite、Oracle、Db2、SQL Server，还比如 SQLite、H2 这些内嵌数据库。还支持常见的全文搜索引擎比如 Elasticsearch 和 Solr、大数据相关的工具比如 Hive 和 Spark。</li>\n<li><a href=\"https://gitee.com/dbkangaroo/kangaroo\" target=\"_blank\" rel=\"noopener noreferrer\">Kangaroo</a>：袋鼠是一款为热门数据库系统打造的管理客户端(SQLite / MySQL / PostgreSQL / ...) ，支持建表、查询、模型、同步、导入导出等功能，支持 Windows / Mac / Linux 等操作系统，力求打造成好用、好玩、开发友好的 SQL 工具。</li>\n<li><a href=\"https://arctype.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Arctype</a>：一个桌面的数据库查询工具，可以连接各种数据库，在其中执行 SQL 语句，以可视化形式展示数据。</li>\n<li><a href=\"https://github.com/RenzHoly/Mongood\" target=\"_blank\" rel=\"noopener noreferrer\">Mongood</a> : MongoDB 图形化的管理工具。基于微软 Fluent UI，支持自动黑暗模式。</li>\n</ul>\n<h3>Redis</h3>\n<ul>\n<li><a href=\"https://github.com/qishibo/AnotherRedisDesktopManager/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener noreferrer\">Another Redis Desktop Manager</a>：更快、更好、更稳定的 Redis 桌面(GUI)管理客户端，兼容 Windows、Mac、Linux。</li>\n<li><a href=\"https://github.com/tiny-craft/tiny-rdm\" target=\"_blank\" rel=\"noopener noreferrer\">Tiny RDM</a>：一个更现代化的 Redis 桌面(GUI)管理客户端，基于 Webview2，兼容 Windows、Mac、Linux。</li>\n<li><a href=\"https://github.com/ngbdf/redis-manager\" target=\"_blank\" rel=\"noopener noreferrer\">Redis Manager</a>：Redis 一站式管理平台，支持集群（cluster、master-replica、sentinel）的监控、安装（除 sentinel）、管理、告警以及基本的数据操作功能。</li>\n<li><a href=\"https://github.com/sohutv/cachecloud\" target=\"_blank\" rel=\"noopener noreferrer\">CacheCloud</a>：一个 Redis 云管理平台，支持 Redis 多种架构(Standalone、Sentinel、Cluster)高效管理、有效降低大规模 Redis 运维成本，提升资源管控能力和利用率。</li>\n<li><a href=\"https://github.com/tair-opensource/RedisShake\" target=\"_blank\" rel=\"noopener noreferrer\">RedisShake</a>：一个用于处理和迁移 Redis 数据的工具。</li>\n</ul>\n<h2>Docker</h2>\n<ul>\n<li><a href=\"https://github.com/portainer/portainer\" target=\"_blank\" rel=\"noopener noreferrer\">Portainer</a>：可视化管理 Docker，Web 应用的形式。</li>\n<li><a href=\"https://github.com/jesseduffield/lazydocker\" target=\"_blank\" rel=\"noopener noreferrer\">lazydocker</a>：适用于 docker 和 docker-compose 的简单终端 UI。</li>\n</ul>\n<h2>ZooKeeper</h2>\n<ul>\n<li><a href=\"https://github.com/vran-dev/PrettyZoo\" target=\"_blank\" rel=\"noopener noreferrer\">PrettyZoo</a>：一个基于 Apache Curator 和 JavaFX 实现的 ZooKeeper 图形化管理客户端，颜值非常高，支持 Mac / Windows / Linux 。你可以使用 PrettyZoo 来实现对 ZooKeeper 的可视化增删改查。</li>\n<li><a href=\"https://zktools.readthedocs.io/en/latest/#installing\" target=\"_blank\" rel=\"noopener noreferrer\">zktools</a>：一个低延迟的 ZooKeeper 图形化管理客户端，颜值非常高，支持 Mac / Windows / Linux 。你可以使用 zktools 来实现对 ZooKeeper 的可视化增删改查。</li>\n</ul>\n<h2>Kafka</h2>\n<ul>\n<li><a href=\"https://github.com/provectus/kafka-ui\" target=\"_blank\" rel=\"noopener noreferrer\">Kafka UI</a>：免费的开源 Web UI，用于监控和管理 Apache Kafka 集群。</li>\n<li><a href=\"https://github.com/obsidiandynamics/kafdrop\" target=\"_blank\" rel=\"noopener noreferrer\">Kafdrop</a> : 一个用于查看 Kafka 主题和浏览消费者组的 Web UI。</li>\n<li><a href=\"https://github.com/smartloli/EFAK\" target=\"_blank\" rel=\"noopener noreferrer\">EFAK</a> （Eagle For Apache Kafka，以前叫做 Kafka Eagle）：一个简单的高性能监控系统，用于对 Kafka 集群进行全面的监控和管理。</li>\n</ul>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "开源项目"
      ]
    },
    {
      "title": "Java 优质开源技术教程",
      "url": "https://javaguide.cn/open-source-project/tutorial.html",
      "id": "https://javaguide.cn/open-source-project/tutorial.html",
      "summary": "Java JavaGuide :【Java 学习+面试指南】 一份涵盖大部分 Java 程序员所需要掌握的核心知识。 toBeBetterJavaer：一份通俗易懂、风趣幽默的 Java 学习指南，内容涵盖 Java 基础、Java 集合框架、Java 并发编程、JVM、Java 企业级开发（Git、SSM、Spring Boot）等知识点。 inte...",
      "content_html": "<h2>Java</h2>\n<ul>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide\" title=\"JavaGuide\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> :【Java 学习+面试指南】 一份涵盖大部分 Java 程序员所需要掌握的核心知识。</li>\n<li><a href=\"https://github.com/itwanger/toBeBetterJavaer\" target=\"_blank\" rel=\"noopener noreferrer\">toBeBetterJavaer</a>：一份通俗易懂、风趣幽默的 Java 学习指南，内容涵盖 Java 基础、Java 集合框架、Java 并发编程、JVM、Java 企业级开发（Git、SSM、Spring Boot）等知识点。</li>\n<li><a href=\"https://github.com/csguide-dabai/interview-guide\" target=\"_blank\" rel=\"noopener noreferrer\">interview-guide</a>：总结了后端面试八股文中的重点，希望能帮助各位准备互联网开发岗校招面试的同学。</li>\n<li><a href=\"https://github.com/doocs/advanced-java\" title=\"advanced-java\" target=\"_blank\" rel=\"noopener noreferrer\">advanced-java</a> :互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识。</li>\n<li><a href=\"https://github.com/hollischuang/toBeTopJavaer\" title=\"toBeTopJavaer\" target=\"_blank\" rel=\"noopener noreferrer\">toBeTopJavaer</a>：Java 工程师成神之路 。</li>\n<li><a href=\"https://github.com/aalansehaiyang/technology-talk\" target=\"_blank\" rel=\"noopener noreferrer\">technology-talk</a> : 汇总 java 生态圈常用技术框架、开源中间件，系统架构、数据库、大公司架构案例、常用三方类库、项目管理、线上问题排查、个人成长、思考等知识</li>\n<li><a href=\"https://github.com/crossoverJie/JCSprout\" target=\"_blank\" rel=\"noopener noreferrer\">JCSprout</a> :处于萌芽阶段的 Java 核心知识库。</li>\n<li><a href=\"https://github.com/crisxuan/bestJavaer\" target=\"_blank\" rel=\"noopener noreferrer\">bestJavaer</a> : 这是一个成为更好的 Java 程序员的系列教程。</li>\n<li><a href=\"https://github.com/iluwatar/java-design-patterns\" title=\"java-design-patterns\" target=\"_blank\" rel=\"noopener noreferrer\">java-design-patterns</a>：用 Java 实现的设计模式。</li>\n</ul>\n<h2>计算机基础</h2>\n<ul>\n<li><a href=\"https://github.com/PKUFlyingPig/cs-self-learning\" target=\"_blank\" rel=\"noopener noreferrer\">cs-self-learning</a>：计算机自学指南，汇总欧美众多名校高质量计算机课程。</li>\n<li><a href=\"https://github.com/CyC2018/CS-Notes\" title=\"CS-Notes\" target=\"_blank\" rel=\"noopener noreferrer\">CS-Notes</a>：技术面试必备基础知识、Leetcode 题解、后端面试、Java 面试、春招、秋招、操作系统、计算机网络、系统设计。</li>\n<li><a href=\"https://github.com/wolverinn/Waking-Up\" target=\"_blank\" rel=\"noopener noreferrer\">Waking-Up</a>：计算机基础（计算机网络/操作系统/数据库/Git...）面试问题全面总结。</li>\n</ul>\n<h2>系统设计</h2>\n<h3>SpringBoot</h3>\n<ul>\n<li><a href=\"https://github.com/Snailclimb/springboot-guide\" target=\"_blank\" rel=\"noopener noreferrer\">springboot-guide</a>：SpringBoot 核心知识点总结。 基于 Spring Boot 2.19+。</li>\n<li><a href=\"https://github.com/wuyouzhuguli/SpringAll\" title=\"SpringAll\" target=\"_blank\" rel=\"noopener noreferrer\">SpringAll</a>：循序渐进，学习 Spring Boot、Spring Boot &amp; Shiro、Spring Cloud、Spring Security &amp; Spring Security OAuth2，博客 Spring 系列源码。</li>\n<li><a href=\"https://github.com/chengxy-nds/Springboot-Notebook\" target=\"_blank\" rel=\"noopener noreferrer\">Springboot-Notebook</a> :一系列以 Spring Boot 为基础开发框架，整合 Redis、 Rabbitmq、ES、MongoDB、Spring Cloud、Kafka、Skywalking 等互联网主流技术，实现各种常见功能点的综合性案例。</li>\n<li><a href=\"https://github.com/JeffLi1993/springboot-learning-example\" title=\"springboot-learning-example\" target=\"_blank\" rel=\"noopener noreferrer\">springboot-learning-example</a>：Spring Boot 实践学习案例，是 Spring Boot 初学者及核心技术巩固的最佳实践。</li>\n<li><a href=\"https://github.com/xkcoding/spring-boot-demo\" title=\"spring-boot-demo\" target=\"_blank\" rel=\"noopener noreferrer\">spring-boot-demo</a>：spring boot demo 是一个用来深度学习并实战 spring boot 的项目，目前总共包含 63 个集成 demo，已经完成 52 个。</li>\n<li><a href=\"https://github.com/YunaiV/SpringBoot-Labs\" target=\"_blank\" rel=\"noopener noreferrer\">SpringBoot-Labs</a>：Spring Boot 系列教程。</li>\n</ul>\n<p>相关文章：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247488298&amp;idx=3&amp;sn=0a8fd88ec5a050de131c2a3305482ac4&amp;chksm=cea25ce1f9d5d5f7f53a0237d27489326bce4546353b038085c03b086d91ef396bf824d3a155&amp;token=496868067&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub 点赞接近 100k 的 SpringBoot 学习教程+实战推荐！牛批！</a></p>\n<h3>SpringCloud</h3>\n<ul>\n<li><a href=\"https://github.com/forezp/SpringCloudLearning\" title=\"SpringCloudLearning\" target=\"_blank\" rel=\"noopener noreferrer\">SpringCloudLearning</a> : 方志朋的《史上最简单的 Spring Cloud 教程源码》。</li>\n<li><a href=\"https://github.com/macrozheng/springcloud-learning\" target=\"_blank\" rel=\"noopener noreferrer\">springcloud-learning</a> : 一套涵盖大部分核心组件使用的 Spring Cloud 教程。</li>\n<li><a href=\"https://github.com/zhoutaoo/SpringCloud\" title=\"SpringCloud\" target=\"_blank\" rel=\"noopener noreferrer\">SpringCloud</a>：基于 SpringCloud2.1 的微服务开发脚手架，整合了 spring-security-oauth2、nacos、feign、sentinel、springcloud-gateway 等。</li>\n</ul>\n<p>相关文章：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247488377&amp;idx=1&amp;sn=0fb33ef330159db5a9c8bc0f029cd739&amp;chksm=cea25cb2f9d5d5a4c7bacc9dcfc90ed86e89f4262e32b40c7aa47af84c747cb6c0429f753e1d&amp;token=496868067&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub 点赞接近 70k 的 Spring Cloud 学习教程+实战项目推荐！牛批！</a></p>\n<h3>Nginx</h3>\n<ul>\n<li><a href=\"https://github.com/dunwu/nginx-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">nginx-tutorial</a>：一系列 Nginx 极简教程，包含 HTTP 反向代理、HTTPS 反向代理、负载均衡、静态站点、文件服务器搭建等实战内容。</li>\n</ul>\n<h2>大数据</h2>\n<ul>\n<li><a href=\"https://github.com/datawhalechina/juicy-bigdata\" target=\"_blank\" rel=\"noopener noreferrer\">juicy-bigdata</a>：妙趣横生大数据，大数据技术相关内容的导论课程。</li>\n<li><a href=\"https://github.com/zhisheng17/flink-learning\" title=\"flink-learning\" target=\"_blank\" rel=\"noopener noreferrer\">flink-learning</a>：含 Flink 入门、概念、原理、实战、性能调优、源码解析等内容。</li>\n</ul>\n<h2>开源书籍</h2>\n<ul>\n<li><a href=\"https://github.com/johnlui/PPHC\" target=\"_blank\" rel=\"noopener noreferrer\">《高并发的哲学原理》</a>：本书的目标是在作者有限的认知范围内，讨论一下高并发问题背后隐藏的一个哲学原理——找出单点，进行拆分。</li>\n<li><a href=\"https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual\" target=\"_blank\" rel=\"noopener noreferrer\">《Effective Java（第 3 版）》中英对照版</a>：《Effective Java（第 3 版）各章节的中英文学习参考。</li>\n<li><a href=\"https://github.com/Vonng/ddia\" target=\"_blank\" rel=\"noopener noreferrer\">《DDIA（设计数据密集型应用）》中文版</a>：《Designing Data-Intensive Application》DDIA 中文翻译。</li>\n<li><a href=\"https://github.com/fenixsoft/awesome-fenix\" target=\"_blank\" rel=\"noopener noreferrer\">《凤凰架构》</a>：讨论如何构建一套可靠的大型分布式系统。</li>\n<li><a href=\"https://github.com/dreamhead/patterns-of-distributed-systems\" target=\"_blank\" rel=\"noopener noreferrer\">《分布式系统模式》中文版</a>：《Patterns of Distributed Systems》中文翻译。</li>\n</ul>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "开源项目"
      ]
    },
    {
      "title": "Servlet 总结",
      "url": "https://javaguide.cn/system-design/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",
      "id": "https://javaguide.cn/system-design/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",
      "summary": "Servlet 总结 在 Java Web 程序中，Servlet主要负责接收用户请求 HttpServletRequest,在doGet(),doPost()中做相应的处理，并将回应HttpServletResponse反馈给用户。Servlet 可以设置初始化参数，供 Servlet 内部使用。一个 Servlet 类只会有一个实例，在它初始化时调...",
      "content_html": "\n<p>在 Java Web 程序中，<strong>Servlet</strong>主要负责接收用户请求 <code>HttpServletRequest</code>,在<code>doGet()</code>,<code>doPost()</code>中做相应的处理，并将回应<code>HttpServletResponse</code>反馈给用户。<strong>Servlet</strong> 可以设置初始化参数，供 Servlet 内部使用。一个 Servlet 类只会有一个实例，在它初始化时调用<code>init()</code>方法，销毁时调用<code>destroy()</code>方法**。**Servlet 需要在 web.xml 中配置（MyEclipse 中创建 Servlet 会自动配置），<strong>一个 Servlet 可以设置多个 URL 访问</strong>。<strong>Servlet 不是线程安全</strong>，因此要谨慎使用类变量。</p>\n<h2>阐述 Servlet 和 CGI 的区别?</h2>\n<h3>CGI 的不足之处</h3>\n<p>1，需要为每个请求启动一个操作 CGI 程序的系统进程。如果请求频繁，这将会带来很大的开销。</p>\n<p>2，需要为每个请求加载和运行一个 CGI 程序，这将带来很大的开销</p>\n<p>3，需要重复编写处理网络协议的代码以及编码，这些工作都是非常耗时的。</p>\n<h3>Servlet 的优点</h3>\n<p>1，只需要启动一个操作系统进程以及加载一个 JVM，大大降低了系统的开销</p>\n<p>2，如果多个请求需要做同样处理的时候，这时候只需要加载一个类，这也大大降低了开销</p>\n<p>3，所有动态加载的类可以实现对网络协议以及请求解码的共享，大大降低了工作量。</p>\n<p>4，Servlet 能直接和 Web 服务器交互，而普通的 CGI 程序不能。Servlet 还能在各个程序之间共享数据，使数据库连接池之类的功能很容易实现。</p>\n<p>补充：Sun Microsystems 公司在 1996 年发布 Servlet 技术就是为了和 CGI 进行竞争，Servlet 是一个特殊的 Java 程序，一个基于 Java 的 Web 应用通常包含一个或多个 Servlet 类。Servlet 不能够自行创建并执行，它是在 Servlet 容器中运行的，容器将用户的请求传递给 Servlet 程序，并将 Servlet 的响应回传给用户。通常一个 Servlet 会关联一个或多个 JSP 页面。以前 CGI 经常因为性能开销上的问题被诟病，然而 Fast CGI 早就已经解决了 CGI 效率上的问题，所以面试的时候大可不必信口开河的诟病 CGI，事实上有很多你熟悉的网站都使用了 CGI 技术。</p>\n<p>参考：《javaweb 整合开发王者归来》P7</p>\n<h2>Servlet 接口中有哪些方法及 Servlet 生命周期探秘</h2>\n<p>Servlet 接口定义了 5 个方法，其中<strong>前三个方法与 Servlet 生命周期相关</strong>：</p>\n<ul>\n<li><code>void init(ServletConfig config) throws ServletException</code></li>\n<li><code>void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException</code></li>\n<li><code>void destroy()</code></li>\n<li><code>java.lang.String getServletInfo()</code></li>\n<li><code>ServletConfig getServletConfig()</code></li>\n</ul>\n<p><strong>生命周期：</strong> <strong>Web 容器加载 Servlet 并将其实例化后，Servlet 生命周期开始</strong>，容器运行其<strong>init()方法</strong>进行 Servlet 的初始化；请求到达时调用 Servlet 的<strong>service()方法</strong>，service()方法会根据需要调用与请求对应的<strong>doGet 或 doPost</strong>等方法；当服务器关闭或项目被卸载时服务器会将 Servlet 实例销毁，此时会调用 Servlet 的<strong>destroy()方法</strong>。<strong>init 方法和 destroy 方法只会执行一次，service 方法客户端每次请求 Servlet 都会执行</strong>。Servlet 中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入 init 方法中，销毁资源的代码放入 destroy 方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。</p>\n<p>参考：《javaweb 整合开发王者归来》P81</p>\n<h2>GET 和 POST 的区别</h2>\n<p>这个问题在知乎上被讨论的挺火热的，地址：<a href=\"https://www.zhihu.com/question/28586791\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.zhihu.com/question/28586791</a> 。</p>\n<p><img src=\"https://static001.geekbang.org/infoq/04/0454a5fff1437c32754f1dfcc3881148.png\" alt=\"\"></p>\n<p>GET 和 POST 是 HTTP 协议中两种常用的请求方法，它们在不同的场景和目的下有不同的特点和用法。一般来说，可以从以下几个方面来区分它们：</p>\n<ul>\n<li>语义上的区别：GET 通常用于获取或查询资源，而 POST 通常用于创建或修改资源。GET 请求应该是幂等的，即多次重复执行不会改变资源的状态，而 POST 请求则可能有副作用，即每次执行可能会产生不同的结果或影响资源的状态。</li>\n<li>格式上的区别：GET 请求的参数通常放在 URL 中，形成查询字符串（querystring），而 POST 请求的参数通常放在请求体（body）中，可以有多种编码格式，如 application/x-www-form-urlencoded、multipart/form-data、application/json 等。GET 请求的 URL 长度受到浏览器和服务器的限制，而 POST 请求的 body 大小则没有明确的限制。</li>\n<li>缓存上的区别：由于 GET 请求是幂等的，它可以被浏览器或其他中间节点（如代理、网关）缓存起来，以提高性能和效率。而 POST 请求则不适合被缓存，因为它可能有副作用，每次执行可能需要实时的响应。</li>\n<li>安全性上的区别：GET 请求和 POST 请求都不是绝对安全的，因为 HTTP 协议本身是明文传输的，无论是 URL、header 还是 body 都可能被窃取或篡改。为了保证安全性，必须使用 HTTPS 协议来加密传输数据。不过，在一些场景下，GET 请求相比 POST 请求更容易泄露敏感数据，因为 GET 请求的参数会出现在 URL 中，而 URL 可能会被记录在浏览器历史、服务器日志、代理日志等地方。因此，一般情况下，私密数据传输应该使用 POST + body。</li>\n</ul>\n<p>重点搞清了，两者在语义上的区别即可。不过，也有一些项目所有的请求都用 POST，这个并不是固定的，项目组达成共识即可。</p>\n<h2>什么情况下调用 doGet()和 doPost()</h2>\n<p>Form 标签里的 method 的属性为 get 时调用 doGet()，为 post 时调用 doPost()。</p>\n<h2>转发(Forward)和重定向(Redirect)的区别</h2>\n<p><strong>转发是服务器行为，重定向是客户端行为。</strong></p>\n<p><strong>转发（Forward）</strong><br>\n通过 RequestDispatcher 对象的 forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher 可以通过 HttpServletRequest 的 getRequestDispatcher()方法获得。例如下面的代码就是跳转到 login_success.jsp 页面。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">     request</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getRequestDispatcher</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"login_success.jsp\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">forward</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(request, response);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p><strong>重定向（Redirect）</strong> 是利用服务器返回的状态码来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过 <code>HttpServletResponse</code> 的 <code>setStatus(int status)</code> 方法设置状态码。如果服务器返回 301 或者 302，则浏览器会到新的网址重新请求该资源。</p>\n<ol>\n<li>\n<p><strong>从地址栏显示来说</strong></p>\n<p>forward 是服务器请求资源,服务器直接访问目标地址的 URL,把那个 URL 的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址.<br>\nredirect 是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的 URL.</p>\n</li>\n<li>\n<p><strong>从数据共享来说</strong></p>\n<p>forward:转发页面和转发到的页面可以共享 request 里面的数据.<br>\nredirect:不能共享数据.</p>\n</li>\n<li>\n<p><strong>从运用地方来说</strong></p>\n<p>forward:一般用于用户登陆的时候,根据角色转发到相应的模块.<br>\nredirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等</p>\n</li>\n<li>\n<p>从效率来说</p>\n<p>forward:高.<br>\nredirect:低.</p>\n</li>\n</ol>\n<h2>自动刷新(Refresh)</h2>\n<p>自动刷新不仅可以实现一段时间之后自动跳转到另一个页面，还可以实现一段时间之后自动刷新本页面。Servlet 中通过 HttpServletResponse 对象设置 Header 属性实现自动刷新例如：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Response</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setHeader</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Refresh\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"5;URL=http://localhost:8080/servlet/example.htm\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>其中 5 为时间，单位为秒。URL 指定就是要跳转的页面（如果设置自己的路径，就会实现每过 5 秒自动刷新本页面一次）</p>\n<h2>Servlet 与线程安全</h2>\n<p><strong>Servlet 不是线程安全的，多线程并发的读写会导致数据不同步的问题。</strong> 解决的办法是尽量不要定义 name 属性，而是要把 name 变量分别定义在 doGet()和 doPost()方法内。虽然使用 synchronized(name){}语句块可以解决问题，但是会造成线程的等待，不是很科学的办法。<br>\n注意：多线程的并发的读写 Servlet 类属性会导致数据不同步。但是如果只是并发地读取属性而不写入，则不存在数据不同步的问题。因此 Servlet 里的只读属性最好定义为 final 类型的。</p>\n<p>参考：《javaweb 整合开发王者归来》P92</p>\n<h2>JSP 和 Servlet 是什么关系</h2>\n<p>其实这个问题在上面已经阐述过了，Servlet 是一个特殊的 Java 程序，它运行于服务器的 JVM 中，能够依靠服务器的支持向浏览器提供显示内容。JSP 本质上是 Servlet 的一种简易形式，JSP 会被服务器处理成一个类似于 Servlet 的 Java 程序，可以简化页面内容的生成。Servlet 和 JSP 最主要的不同点在于，Servlet 的应用逻辑是在 Java 文件中，并且完全从表示层中的 HTML 分离开来。而 JSP 的情况是 Java 和 HTML 可以组合成一个扩展名为.jsp 的文件。有人说，Servlet 就是在 Java 中写 HTML，而 JSP 就是在 HTML 中写 Java 代码，当然这个说法是很片面且不够准确的。JSP 侧重于视图，Servlet 更侧重于控制逻辑，在 MVC 架构模式中，JSP 适合充当视图（view）而 Servlet 适合充当控制器（controller）。</p>\n<h2>JSP 工作原理</h2>\n<p>JSP 是一种 Servlet，但是与 HttpServlet 的工作方式不太一样。HttpServlet 是先由源代码编译为 class 文件后部署到服务器下，为先编译后部署。而 JSP 则是先部署后编译。JSP 会在客户端第一次请求 JSP 文件时被编译为 HttpJspPage 类（接口 Servlet 的一个子类）。该类会被服务器临时存放在服务器工作目录里面。下面通过实例给大家介绍。<br>\n工程 JspLoginDemo 下有一个名为 login.jsp 的 Jsp 文件，把工程第一次部署到服务器上后访问这个 Jsp 文件，我们发现这个目录下多了下图这两个东东。<br>\n.class 文件便是 JSP 对应的 Servlet。编译完毕后再运行 class 文件来响应客户端请求。以后客户端访问 login.jsp 的时候，Tomcat 将不再重新编译 JSP 文件，而是直接调用 class 文件来响应客户端请求。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/1.jpeg\" alt=\"JSP工作原理\"></p>\n<p>由于 JSP 只会在客户端第一次请求的时候被编译 ，因此第一次请求 JSP 时会感觉比较慢，之后就会感觉快很多。如果把服务器保存的 class 文件删除，服务器也会重新编译 JSP。</p>\n<p>开发 Web 程序时经常需要修改 JSP。Tomcat 能够自动检测到 JSP 程序的改动。如果检测到 JSP 源代码发生了改动。Tomcat 会在下次客户端请求 JSP 时重新编译 JSP，而不需要重启 Tomcat。这种自动检测功能是默认开启的，检测改动会消耗少量的时间，在部署 Web 应用的时候可以在 web.xml 中将它关掉。</p>\n<p>参考：《javaweb 整合开发王者归来》P97</p>\n<h2>JSP 有哪些内置对象、作用分别是什么</h2>\n<p><a href=\"http://blog.csdn.net/qq_34337272/article/details/64310849\" target=\"_blank\" rel=\"noopener noreferrer\">JSP 内置对象 - CSDN 博客</a></p>\n<p>JSP 有 9 个内置对象：</p>\n<ul>\n<li>request：封装客户端的请求，其中包含来自 GET 或 POST 请求的参数；</li>\n<li>response：封装服务器对客户端的响应；</li>\n<li>pageContext：通过该对象可以获取其他对象；</li>\n<li>session：封装用户会话的对象；</li>\n<li>application：封装服务器运行环境的对象；</li>\n<li>out：输出服务器响应的输出流对象；</li>\n<li>config：Web 应用的配置对象；</li>\n<li>page：JSP 页面本身（相当于 Java 程序中的 this）；</li>\n<li>exception：封装页面抛出异常的对象。</li>\n</ul>\n<h2>Request 对象的主要方法有哪些</h2>\n<ul>\n<li><code>setAttribute(String name,Object)</code>：设置名字为 name 的 request 的参数值</li>\n<li><code>getAttribute(String name)</code>：返回由 name 指定的属性值</li>\n<li><code>getAttributeNames()</code>：返回 request 对象所有属性的名字集合，结果是一个枚举的实例</li>\n<li><code>getCookies()</code>：返回客户端的所有 Cookie 对象，结果是一个 Cookie 数组</li>\n<li><code>getCharacterEncoding()</code>：返回请求中的字符编码方式 = getContentLength()`：返回请求的 Body 的长度</li>\n<li><code>getHeader(String name)</code>：获得 HTTP 协议定义的文件头信息</li>\n<li><code>getHeaders(String name)</code>：返回指定名字的 request Header 的所有值，结果是一个枚举的实例</li>\n<li><code>getHeaderNames()</code>：返回所以 request Header 的名字，结果是一个枚举的实例</li>\n<li><code>getInputStream()</code>：返回请求的输入流，用于获得请求中的数据</li>\n<li><code>getMethod()</code>：获得客户端向服务器端传送数据的方法</li>\n<li><code>getParameter(String name)</code>：获得客户端传送给服务器端的有 name 指定的参数值</li>\n<li><code>getParameterNames()</code>：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例</li>\n<li><code>getParameterValues(String name)</code>：获得有 name 指定的参数的所有值</li>\n<li><code>getProtocol()</code>：获取客户端向服务器端传送数据所依据的协议名称</li>\n<li><code>getQueryString()</code>：获得查询字符串</li>\n<li><code>getRequestURI()</code>：获取发出请求字符串的客户端地址</li>\n<li><code>getRemoteAddr()</code>：获取客户端的 IP 地址</li>\n<li><code>getRemoteHost()</code>：获取客户端的名字</li>\n<li><code>getSession([Boolean create])</code>：返回和请求相关 Session</li>\n<li><code>getServerName()</code>：获取服务器的名字</li>\n<li><code>getServletPath()</code>：获取客户端所请求的脚本文件的路径</li>\n<li><code>getServerPort()</code>：获取服务器的端口号</li>\n<li><code>removeAttribute(String name)</code>：删除请求中的一个属性</li>\n</ul>\n<h2>request.getAttribute()和 request.getParameter()有何区别</h2>\n<p><strong>从获取方向来看：</strong></p>\n<p><code>getParameter()</code>是获取 POST/GET 传递的参数值；</p>\n<p><code>getAttribute()</code>是获取对象容器中的数据值；</p>\n<p><strong>从用途来看：</strong></p>\n<p><code>getParameter()</code>用于客户端重定向时，即点击了链接或提交按扭时传值用，即用于在用表单或 url 重定向传值时接收数据用。</p>\n<p><code>getAttribute()</code> 用于服务器端重定向时，即在 sevlet 中使用了 forward 函数,或 struts 中使用了<br>\nmapping.findForward。 getAttribute 只能收到程序用 setAttribute 传过来的值。</p>\n<p>另外，可以用 <code>setAttribute()</code>,<code>getAttribute()</code> 发送接收对象.而 <code>getParameter()</code> 显然只能传字符串。<br>\n<code>setAttribute()</code> 是应用服务器把这个对象放在该页面所对应的一块内存中去，当你的页面服务器重定向到另一个页面时，应用服务器会把这块内存拷贝另一个页面所对应的内存中。这样<code>getAttribute()</code>就能取得你所设下的值，当然这种方法可以传对象。session 也一样，只是对象在内存中的生命周期不一样而已。<code>getParameter()</code>只是应用服务器在分析你送上来的 request 页面的文本时，取得你设在表单或 url 重定向时的值。</p>\n<p><strong>总结：</strong></p>\n<p><code>getParameter()</code>返回的是 String,用于读取提交的表单中的值;（获取之后会根据实际需要转换为自己需要的相应类型，比如整型，日期类型啊等等）</p>\n<p><code>getAttribute()</code>返回的是 Object，需进行转换,可用<code>setAttribute()</code>设置成任意对象，使用很灵活，可随时用</p>\n<h2>include 指令 include 的行为的区别</h2>\n<p><strong>include 指令：</strong> JSP 可以通过 include 指令来包含其他文件。被包含的文件可以是 JSP 文件、HTML 文件或文本文件。包含的文件就好像是该 JSP 文件的一部分，会被同时编译执行。 语法格式如下：<br>\n&lt;%@ include file=\"文件相对 url 地址\" %&gt;</p>\n<p>i<strong>nclude 动作：</strong> <code>&lt;jsp:include&gt;</code>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：<br>\n&lt;jsp:include page=\"相对 URL 地址\" flush=\"true\" /&gt;</p>\n<h2>JSP 九大内置对象，七大动作，三大指令</h2>\n<p><a href=\"http://blog.csdn.net/qq_34337272/article/details/64310849\" target=\"_blank\" rel=\"noopener noreferrer\">JSP 九大内置对象，七大动作，三大指令总结</a></p>\n<h2>讲解 JSP 中的四种作用域</h2>\n<p>JSP 中的四种作用域包括 page、request、session 和 application，具体来说：</p>\n<ul>\n<li><strong>page</strong>代表与一个页面相关的对象和属性。</li>\n<li><strong>request</strong>代表与 Web 客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 Web 组件；需要在页面显示的临时数据可以置于此作用域。</li>\n<li><strong>session</strong>代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的 session 中。</li>\n<li><strong>application</strong>代表与整个 Web 应用程序相关的对象和属性，它实质上是跨越整个 Web 应用程序，包括多个页面、请求和会话的一个全局作用域。</li>\n</ul>\n<h2>如何实现 JSP 或 Servlet 的单线程模式</h2>\n<p>对于 JSP 页面，可以通过 page 指令进行设置。<br>\n<code>&lt;%@page isThreadSafe=\"false\"%&gt;</code></p>\n<p>对于 Servlet，可以让自定义的 Servlet 实现 SingleThreadModel 标识接口。</p>\n<p>说明：如果将 JSP 或 Servlet 设置成单线程工作模式，会导致每个请求创建一个 Servlet 实例，这种实践将导致严重的性能问题（服务器的内存压力很大，还会导致频繁的垃圾回收），所以通常情况下并不会这么做。</p>\n<h2>实现会话跟踪的技术有哪些</h2>\n<ol>\n<li>\n<p><strong>使用 Cookie</strong></p>\n<p>向客户端发送 Cookie</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Cookie</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> c </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Cookie</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"name\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"value\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> //创建Cookie</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">c</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setMaxAge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">24</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> //设置最大时效，此处设置的最大时效为一天</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">response</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">addCookie</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(c);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> //把Cookie放入到HTTP响应中</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>从客户端读取 Cookie</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"name\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Cookie</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">[]cookies </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">request</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getCookies</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(cookies </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">cookies</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    Cookie</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> cookie </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">cookies[i]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">equals</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">cookis</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">())</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //something is here.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //you can get the value</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    cookie</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">   }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> }</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>优点:</strong> 数据可以持久保存，不需要服务器资源，简单，基于文本的 Key-Value</p>\n<p><strong>缺点:</strong> 大小受到限制，用户可以禁用 Cookie 功能，由于保存在本地，有一定的安全风险。</p>\n</li>\n<li>\n<p>URL 重写</p>\n<p>在 URL 中添加用户会话的信息作为请求的参数，或者将唯一的会话 ID 添加到 URL 结尾以标识一个会话。</p>\n<p><strong>优点：</strong> 在 Cookie 被禁用的时候依然可以使用</p>\n<p><strong>缺点：</strong> 必须对网站的 URL 进行编码，所有页面必须动态生成，不能用预先记录下来的 URL 进行访问。</p>\n</li>\n<li>\n<p>隐藏的表单域</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" data-title=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">input</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"hidden\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"session\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"...\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p><strong>优点：</strong> Cookie 被禁时可以使用</p>\n<p><strong>缺点：</strong> 所有页面必须是表单提交之后的结果。</p>\n</li>\n<li>\n<p>HttpSession</p>\n<p>在所有会话跟踪技术中，HttpSession 对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建 HttpSession，每个用户可以访问他自己的 HttpSession。可以通过 HttpServletRequest 对象的 getSession 方 法获得 HttpSession，通过 HttpSession 的 setAttribute 方法可以将一个值放在 HttpSession 中，通过调用 HttpSession 对象的 getAttribute 方法，同时传入属性名就可以获取保存在 HttpSession 中的对象。与上面三种方式不同的 是，HttpSession 放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的 Servlet 容器可以在内存将满时将 HttpSession 中的对象移到其他存储设备中，但是这样势必影响性能。添加到 HttpSession 中的值可以是任意 Java 对象，这个对象最好实现了 Serializable 接口，这样 Servlet 容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</p>\n</li>\n</ol>\n<h2>Cookie 和 Session 的区别</h2>\n<p>Cookie 和 Session 都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p>\n<p><strong>Cookie 一般用来保存用户信息</strong> 比如 ① 我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；② 一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③ 登录一次网站后访问网站其他页面不需要重新登录。<strong>Session 的主要作用就是通过服务端记录用户的状态。</strong> 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p>\n<p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p>\n<p>Cookie 存储在客户端中，而 Session 存储在服务器上，相对来说 Session 安全性更高。如果使用 Cookie 的一些敏感信息不要写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://static001.geekbang.org/infoq/04/0454a5fff1437c32754f1dfcc3881148.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "设计模式常见面试题总结",
      "url": "https://javaguide.cn/system-design/design-pattern.html",
      "id": "https://javaguide.cn/system-design/design-pattern.html",
      "summary": "设计模式 相关的面试题已经整理到了 PDF 手册中，你可以在我的公众号“JavaGuide”后台回复“PDF” 获取。 JavaGuide 官方公众号 《设计模式》PDF 电子书内容概览： 《设计模式》PDF文档概览 JavaGuide 官方公众号",
      "content_html": "<p><strong>设计模式</strong> 相关的面试题已经整理到了 PDF 手册中，你可以在我的公众号“<strong>JavaGuide</strong>”后台回复“<strong>PDF</strong>” 获取。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n<p><strong>《设计模式》PDF 电子书内容概览</strong>：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/design-pattern-pdf.png\" alt=\"《设计模式》PDF文档概览\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "系统设计"
      ]
    },
    {
      "title": "Java 定时任务详解",
      "url": "https://javaguide.cn/system-design/schedule-task.html",
      "id": "https://javaguide.cn/system-design/schedule-task.html",
      "summary": "为什么需要定时任务？ 我们来看一下几个非常常见的业务场景： 某系统凌晨 1 点要进行数据备份。 某电商平台，用户下单半个小时未支付的情况下需要自动取消订单。 某媒体聚合平台，每 10 分钟动态抓取某某网站的数据为自己所用。 某博客平台，支持定时发送文章。 某基金平台，每晚定时计算用户当日收益情况并推送给用户最新的数据。 …… 这些场景往往都要求我们在某...",
      "content_html": "<h2>为什么需要定时任务？</h2>\n<p>我们来看一下几个非常常见的业务场景：</p>\n<ol>\n<li>某系统凌晨 1 点要进行数据备份。</li>\n<li>某电商平台，用户下单半个小时未支付的情况下需要自动取消订单。</li>\n<li>某媒体聚合平台，每 10 分钟动态抓取某某网站的数据为自己所用。</li>\n<li>某博客平台，支持定时发送文章。</li>\n<li>某基金平台，每晚定时计算用户当日收益情况并推送给用户最新的数据。</li>\n<li>……</li>\n</ol>\n<p>这些场景往往都要求我们在某个特定的时间去做某个事情，也就是定时或者延时去做某个事情。</p>\n<ul>\n<li>定时任务：在指定时间点执行特定的任务，例如每天早上 8 点，每周一下午 3 点等。定时任务可以用来做一些周期性的工作，如数据备份，日志清理，报表生成等。</li>\n<li>延时任务：一定的延迟时间后执行特定的任务，例如 10 分钟后，3 小时后等。延时任务可以用来做一些异步的工作，如订单取消，推送通知，红包撤回等。</li>\n</ul>\n<p>尽管二者的适用场景有所区别，但它们的核心思想都是将任务的执行时间安排在未来的某个点上，以达到预期的调度效果。</p>\n<h2>单机定时任务</h2>\n<h3>Timer</h3>\n<p><code>java.util.Timer</code>是 JDK 1.3 开始就已经支持的一种定时任务的实现方式。</p>\n<p><code>Timer</code> 内部使用一个叫做 <code>TaskQueue</code> 的类存放定时任务，它是一个基于最小堆实现的优先级队列。<code>TaskQueue</code> 会按照任务距离下一次执行时间的大小将任务排序，保证在堆顶的任务最先执行。这样在需要执行任务时，每次只需要取出堆顶的任务运行即可！</p>\n<p><code>Timer</code> 使用起来比较简单，通过下面的方式我们就能创建一个 1s 之后执行的定时任务。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 示例代码：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">TimerTask</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> task </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> TimerTask</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"当前时间: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"n\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                \"线程名称: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">currentThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"当前时间: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"n\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">        \"线程名称: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">currentThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Timer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> timer </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Timer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Timer\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">long</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> delay </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000L</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">timer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">schedule</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(task, delay);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//输出：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">18</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">47</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> main</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">18</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">48</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Timer</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>不过其缺陷较多，比如一个 <code>Timer</code> 一个线程，这就导致 <code>Timer</code> 的任务的执行只能串行执行，一个任务执行时间过长的话会影响其他任务（性能非常差），再比如发生异常时任务直接停止（<code>Timer</code> 只捕获了 <code>InterruptedException</code> ）。</p>\n<p><code>Timer</code> 类上的有一段注释是这样写的：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> *</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E06C75\"> This </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> does</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E06C75\"> not offer real-time guarantees: it schedules</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E06C75\"> * tasks using the </span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">tt</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E06C75\">Object.wait(long)</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">tt</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E06C75\"> method.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E06C75\"> *Java 5.0 introduced the </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">code</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> java</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">util</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">concurrent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> package</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> and</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * one of the concurrency utilities therein is the {@link</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * java.util.concurrent.</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">S</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">cheduled</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">hread</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">P</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">ool</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">E</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">xecutor</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">S</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">cheduled</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">hread</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">P</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">ool</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">E</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">xecutor} which is a thread pool </span><span style=\"--shiki-light:white;--shiki-dark:#FFFFFF\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> repeatedly</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * executing tasks at a given rate or delay.  </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">I</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">t is effectively a more</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * versatile replacement </span><span style=\"--shiki-light:white;--shiki-dark:#FFFFFF\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> the {@code </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">imer}/{@code </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">imer</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">ask}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * combination, as it allows multiple service threads, accepts various</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * time units, and doesn't require subclassing {@code </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">imer</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">ask} (just</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * implement {@code </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">R</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">unnable}).  </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">C</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">onfiguring {@code</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">S</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">cheduled</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">hread</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">P</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">ool</span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">E</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">xecutor} with one thread makes it equivalent to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> * {@code </span><span style=\"--shiki-light:#000000;--shiki-dark:#FFFFFF\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">imer}.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>大概的意思就是：<code>ScheduledThreadPoolExecutor</code> 支持多线程执行定时任务并且功能更强大，是 <code>Timer</code> 的替代品。</p>\n<h3>ScheduledExecutorService</h3>\n<p><code>ScheduledExecutorService</code> 是一个接口，有多个实现类，比较常用的是 <code>ScheduledThreadPoolExecutor</code> 。</p>\n<p><img src=\"https://oss.javaguide.cn/javaguide/20210607154324712.png\" alt=\"\"></p>\n<p><code>ScheduledThreadPoolExecutor</code> 本身就是一个线程池，支持任务并发执行。并且，其内部使用 <code>DelayedWorkQueue</code> 作为任务队列。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 示例代码：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">TimerTask</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> repeatedTask </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> TimerTask</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">SneakyThrows</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"当前时间: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"n\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                \"线程名称: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">currentThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"当前时间: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"n\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">        \"线程名称: \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">currentThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ScheduledExecutorService</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> executor </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Executors</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">newScheduledThreadPool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">long</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> delay  </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000L</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">long</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> period </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000L</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">executor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">scheduleAtFixedRate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(repeatedTask, delay, period, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">MILLISECONDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sleep</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(delay </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> period </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">executor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">shutdown</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//输出：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">40</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">46</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> main</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">40</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">47</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> pool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">40</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">48</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> pool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">40</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">49</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> pool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">40</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">50</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> pool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">40</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">51</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> pool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">当前时间</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fri</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> May </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 15</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">40</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">52</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> CST 2021n线程名称</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> pool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>不论是使用 <code>Timer</code> 还是 <code>ScheduledExecutorService</code> 都无法使用 Cron 表达式指定任务执行的具体时间。</p>\n<h3>DelayQueue</h3>\n<p><code>DelayQueue</code> 是 JUC 包(<code>java.util.concurrent)</code>为我们提供的延迟队列，用于实现延时任务比如订单下单 15 分钟未支付直接取消。它是 <code>BlockingQueue</code> 的一种，底层是一个基于 <code>PriorityQueue</code> 实现的一个无界队列，是线程安全的。关于<code>PriorityQueue</code>可以参考笔者编写的这篇文章：<a href=\"https://javaguide.cn/java/collection/priorityqueue-source-code.html\" target=\"_blank\" rel=\"noopener noreferrer\">PriorityQueue 源码分析</a> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/java/collection/blocking-queue-hierarchy.png\" alt=\"BlockingQueue 的实现类\"></p>\n<p><code>DelayQueue</code> 和 <code>Timer/TimerTask</code> 都可以用于实现定时任务调度，但是它们的实现方式不同。<code>DelayQueue</code> 是基于优先级队列和堆排序算法实现的，可以实现多个任务按照时间先后顺序执行；而 <code>Timer/TimerTask</code> 是基于单线程实现的，只能按照任务的执行顺序依次执行，如果某个任务执行时间过长，会影响其他任务的执行。另外，<code>DelayQueue</code> 还支持动态添加和移除任务，而 <code>Timer/TimerTask</code> 只能在创建时指定任务。</p>\n<p>关于 <code>DelayQueue</code> 的详细介绍，请参考我写的这篇文章：<a href=\"https://javaguide.cn/java/collection/delayqueue-source-code.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>DelayQueue</code> 源码分析</a>。</p>\n<h3>Spring Task</h3>\n<p>我们直接通过 Spring 提供的 <code>@Scheduled</code> 注解即可定义定时任务，非常方便！</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * cron：使用Cron表达式。　每分钟的1，2秒运行</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Scheduled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">cron</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"1-2 * * * * ? \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> reportCurrentTimeWithCronExpression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">info</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Cron Expression: The time is now {}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">dateFormat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">format</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我在大学那会做的一个 SSM 的企业级项目，就是用的 Spring Task 来做的定时任务。</p>\n<p>并且，Spring Task 还是支持 <strong>Cron 表达式</strong> 的。Cron 表达式主要用于定时作业(定时任务)系统定义执行时间或执行频率的表达式，非常厉害，你可以通过 Cron 表达式进行设置定时任务每天或者每个月什么时候执行等等操作。咱们要学习定时任务的话，Cron 表达式是一定是要重点关注的。推荐一个在线 Cron 表达式生成器：<a href=\"http://cron.qqe2.com/\" target=\"_blank\" rel=\"noopener noreferrer\">http://cron.qqe2.com/</a> 。</p>\n<p>但是，Spring 自带的定时调度只支持单机，并且提供的功能比较单一。之前写过一篇文章:<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485563&amp;idx=1&amp;sn=7419341f04036a10b141b74624a3f8c9&amp;chksm=cea247b0f9d5cea6440759e6d49b4e77d06f4c99470243a10c1463834e873ca90266413fbc92&amp;token=2133161636&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">《5 分钟搞懂如何在 Spring Boot 中 Schedule Tasks》</a> ，不了解的小伙伴可以参考一下。</p>\n<p>Spring Task 底层是基于 JDK 的 <code>ScheduledThreadPoolExecutor</code> 线程池来实现的。</p>\n<p><strong>优缺点总结：</strong></p>\n<ul>\n<li>优点：简单，轻量，支持 Cron 表达式</li>\n<li>缺点：功能单一</li>\n</ul>\n<h3>时间轮</h3>\n<p>Kafka、Dubbo、ZooKeeper、Netty、Caffeine、Akka 中都有对时间轮的实现。</p>\n<p>时间轮简单来说就是一个环形的队列（底层一般基于数组实现），队列中的每一个元素（时间格）都可以存放一个定时任务列表。</p>\n<p>时间轮中的每个时间格代表了时间轮的基本时间跨度或者说时间精度，假如时间一秒走一个时间格的话，那么这个时间轮的最高精度就是 1 秒（也就是说 3 s 和 3.9s 会在同一个时间格中）。</p>\n<p>下图是一个有 12 个时间格的时间轮，转完一圈需要 12 s。当我们需要新建一个 3s 后执行的定时任务，只需要将定时任务放在下标为 3 的时间格中即可。当我们需要新建一个 9s 后执行的定时任务，只需要将定时任务放在下标为 9 的时间格中即可。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/one-layers-of-time-wheel.png\" alt=\"\"></p>\n<p>那当我们需要创建一个 13s 后执行的定时任务怎么办呢？这个时候可以引入一叫做 <strong>圈数/轮数</strong> 的概念，也就是说这个任务还是放在下标为 1 的时间格中， 不过它的圈数为 2 。</p>\n<p>除了增加圈数这种方法之外，还有一种 <strong>多层次时间轮</strong> （类似手表），Kafka 采用的就是这种方案。</p>\n<p>针对下图的时间轮，我来举一个例子便于大家理解。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/three-layers-of-time-wheel.png\" alt=\"\"></p>\n<p>上图的时间轮(ms -&gt; s)，第 1 层的时间精度为 1 ，第 2 层的时间精度为 20 ，第 3 层的时间精度为 400。假如我们需要添加一个 350s 后执行的任务 A 的话（当前时间是 0s），这个任务会被放在第 2 层（因为第二层的时间跨度为 20*20=400&gt;350）的第 350/20=17 个时间格子。</p>\n<p>当第一层转了 17 圈之后，时间过去了 340s ，第 2 层的指针此时来到第 17 个时间格子。此时，第 2 层第 17 个格子的任务会被移动到第 1 层。</p>\n<p>任务 A 当前是 10s 之后执行，因此它会被移动到第 1 层的第 10 个时间格子。</p>\n<p>这里在层与层之间的移动也叫做时间轮的升降级。参考手表来理解就好！</p>\n<p><strong>时间轮比较适合任务数量比较多的定时任务场景，它的任务写入和执行的时间复杂度都是 0（1）。</strong></p>\n<h2>分布式定时任务</h2>\n<h3>Redis</h3>\n<p>Redis 是可以用来做延时任务的，基于 Redis 实现延时任务的功能无非就下面两种方案：</p>\n<ol>\n<li>Redis 过期事件监听</li>\n<li>Redisson 内置的延时队列</li>\n</ol>\n<p>这部分内容的详细介绍我放在了<a href=\"https://javaguide.cn/zhuanlan/back-end-interview-high-frequency-system-design-and-scenario-questions.html\" target=\"_blank\" rel=\"noopener noreferrer\">《后端面试高频系统设计&amp;场景题》</a>中，有需要的同学可以进入星球后阅读学习。篇幅太多，这里就不重复分享了。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/back-end-interview-high-frequency-system-design-and-scenario-questions-fengmian.png\" alt=\"《后端面试高频系统设计&amp;场景题》\"></p>\n<h3>MQ</h3>\n<p>大部分消息队列，例如 RocketMQ、RabbitMQ，都支持定时/延时消息。定时消息和延时消息本质其实是相同的，都是服务端根据消息设置的定时时间在某一固定时刻将消息投递给消费者消费。</p>\n<p>不过，在使用 MQ 定时消息之前一定要看清楚其使用限制，以免不适合项目需求，例如 RocketMQ 定时时长最大值默认为 24 小时且不支持自定义修改、只支持 18 个 Level 的延时并不支持任意时间。</p>\n<p><strong>优缺点总结：</strong></p>\n<ul>\n<li><strong>优点</strong>：可以与 Spring 集成、支持分布式、支持集群、性能不错</li>\n<li><strong>缺点</strong>：功能性较差、不灵活、需要保障消息可靠性</li>\n</ul>\n<h2>分布式任务调度框架</h2>\n<p>如果我们需要一些高级特性比如支持任务在分布式场景下的分片和高可用的话，我们就需要用到分布式任务调度框架了。</p>\n<p>通常情况下，一个分布式定时任务的执行往往涉及到下面这些角色：</p>\n<ul>\n<li><strong>任务</strong>：首先肯定是要执行的任务，这个任务就是具体的业务逻辑比如定时发送文章。</li>\n<li><strong>调度器</strong>：其次是调度中心，调度中心主要负责任务管理，会分配任务给执行器。</li>\n<li><strong>执行器</strong>：最后就是执行器，执行器接收调度器分派的任务并执行。</li>\n</ul>\n<h3>Quartz</h3>\n<p>一个很火的开源任务调度框架，完全由 Java 写成。Quartz 可以说是 Java 定时任务领域的老大哥或者说参考标准，其他的任务调度框架基本都是基于 Quartz 开发的，比如当当网的<code>elastic-job</code>就是基于 Quartz 二次开发之后的分布式调度解决方案。</p>\n<p>使用 Quartz 可以很方便地与 Spring 集成，并且支持动态添加任务和集群。但是，Quartz 使用起来也比较麻烦，API 繁琐。</p>\n<p>并且，Quartz 并没有内置 UI 管理控制台，不过你可以使用 <a href=\"https://github.com/zhaopeiym/quartzui\" target=\"_blank\" rel=\"noopener noreferrer\">quartzui</a> 这个开源项目来解决这个问题。</p>\n<p>另外，Quartz 虽然也支持分布式任务。但是，它是在数据库层面，通过数据库的锁机制做的，有非常多的弊端比如系统侵入性严重、节点负载不均衡。有点伪分布式的味道。</p>\n<p><strong>优缺点总结：</strong></p>\n<ul>\n<li>优点：可以与 Spring 集成，并且支持动态添加任务和集群。</li>\n<li>缺点：分布式支持不友好，不支持任务可视化管理、使用麻烦（相比于其他同类型框架来说）</li>\n</ul>\n<h3>Elastic-Job</h3>\n<p>ElasticJob 当当网开源的一个面向互联网生态和海量任务的分布式调度解决方案，由两个相互独立的子项目 ElasticJob-Lite 和 ElasticJob-Cloud 组成。</p>\n<p>ElasticJob-Lite 和 ElasticJob-Cloud 两者的对比如下：</p>\n<p>|          | ElasticJob-Lite | ElasticJob-Cloud  |<br>\n| :</p>\n",
      "image": "https://oss.javaguide.cn/javaguide/20210607154324712.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "系统设计"
      ]
    },
    {
      "title": "系统设计常见面试题总结(付费)",
      "url": "https://javaguide.cn/system-design/system-design-questions.html",
      "id": "https://javaguide.cn/system-design/system-design-questions.html",
      "summary": "系统设计 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。 （点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 JavaGuide 的补充完善，两者可以配合使用。 《Java 面试指北》内容概览 为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的。...",
      "content_html": "<p><strong>系统设计</strong> 相关的面试题为我的<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了<a href=\"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a>中。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/system-design-questions.png\" alt=\"\"></p>\n<p><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href=\"https://javaguide.cn/#/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide</a> 的补充完善，两者可以配合使用。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220304102536445.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>\n<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a> 。</p>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://t.zsxq.com/12uSKgTIm\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> ，干货多多！</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/javamianshizhibei/system-design-questions.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "Java面试指北"
      ]
    },
    {
      "title": "Web 实时消息推送详解",
      "url": "https://javaguide.cn/system-design/web-real-time-message-push.html",
      "id": "https://javaguide.cn/system-design/web-real-time-message-push.html",
      "summary": "原文地址：https://juejin.cn/post/7122014462181113887，JavaGuide 对本文进行了完善总结。 我有一个朋友做了一个小破站，现在要实现一个站内信 Web 消息推送的功能，对，就是下图这个小红点，一个很常用的功能。 站内信 Web 消息推送 不过他还没想好用什么方式做，这里我帮他整理了一下几种方案，并简单做了实...",
      "content_html": "<blockquote>\n<p>原文地址：<a href=\"https://juejin.cn/post/7122014462181113887%EF%BC%8CJavaGuide\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7122014462181113887，JavaGuide</a> 对本文进行了完善总结。</p>\n</blockquote>\n<p>我有一个朋友做了一个小破站，现在要实现一个站内信 Web 消息推送的功能，对，就是下图这个小红点，一个很常用的功能。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192380.png\" alt=\"站内信 Web 消息推送\"></p>\n<p>不过他还没想好用什么方式做，这里我帮他整理了一下几种方案，并简单做了实现。</p>\n<h2>什么是消息推送？</h2>\n<p>推送的场景比较多，比如有人关注我的公众号，这时我就会收到一条推送消息，以此来吸引我点击打开应用。</p>\n<p>消息推送通常是指网站的运营工作等人员，通过某种工具对用户当前网页或移动设备 APP 进行的主动消息推送。</p>\n<p>消息推送一般又分为 Web 端消息推送和移动端消息推送。</p>\n<p>移动端消息推送示例：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/IKleJ9auR1Ojdicyr0bH.png\" alt=\"移动端消息推送示例\"></p>\n<p>Web 端消息推送示例：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/image-20220819100512941.png\" alt=\"Web 端消息推送示例\"></p>\n<p>在具体实现之前，咱们再来分析一下前边的需求，其实功能很简单，只要触发某个事件（主动分享了资源或者后台主动推送消息），Web 页面的通知小红点就会实时的 <code>+1</code> 就可以了。</p>\n<p>通常在服务端会有若干张消息推送表，用来记录用户触发不同事件所推送不同类型的消息，前端主动查询（拉）或者被动接收（推）用户所有未读的消息数。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192384.png\" alt=\"消息推送表\"></p>\n<p>消息推送无非是推（push）和拉（pull）两种形式，下边我们逐个了解下。</p>\n<h2>消息推送常见方案</h2>\n<h3>短轮询</h3>\n<p><strong>轮询(polling)</strong> 应该是实现消息推送方案中最简单的一种，这里我们暂且将轮询分为短轮询和长轮询。</p>\n<p>短轮询很好理解，指定的时间间隔，由浏览器向服务器发出 HTTP 请求，服务器实时返回未读消息数据给客户端，浏览器再做渲染显示。</p>\n<p>一个简单的 JS 定时器就可以搞定，每秒钟请求一次未读消息数接口，返回的数据展示即可。</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"typescript\" data-title=\"typescript\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setInterval</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(() </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 方法请求</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  messageCount</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">then</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 200</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">messageCount</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果还是可以的，短轮询实现固然简单，缺点也是显而易见，由于推送数据并不会频繁变更，无论后端此时是否有新的消息产生，客户端都会进行请求，势必会对服务端造成很大压力，浪费带宽和服务器资源。</p>\n<h3>长轮询</h3>\n<p>长轮询是对上边短轮询的一种改进版本，在尽可能减少对服务器资源浪费的同时，保证消息的相对实时性。长轮询在中间件中应用的很广泛，比如 Nacos 和 Apollo 配置中心，消息队列 Kafka、RocketMQ 中都有用到长轮询。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/94ftESkDoZI9gAGflLiGwg\" target=\"_blank\" rel=\"noopener noreferrer\">Nacos 配置中心交互模型是 push 还是 pull？</a>一文中我详细介绍过 Nacos 长轮询的实现原理，感兴趣的小伙伴可以瞅瞅。</p>\n<p>长轮询其实原理跟轮询差不多，都是采用轮询的方式。不过，如果服务端的数据没有发生变更，会 一直 hold 住请求，直到服务端的数据发生变化，或者等待一定时间超时才会返回。返回后，客户端又会立即再次发起下一次长轮询。</p>\n<p>这次我使用 Apollo 配置中心实现长轮询的方式，应用了一个类<code>DeferredResult</code>，它是在 Servlet3.0 后经过 Spring 封装提供的一种异步请求机制，直意就是延迟结果。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192386.png\" alt=\"长轮询示意图\"></p>\n<p><code>DeferredResult</code>可以允许容器线程快速释放占用的资源，不阻塞请求线程，以此接受更多的请求提升系统的吞吐量，然后启动异步工作线程处理真正的业务逻辑，处理完成调用<code>DeferredResult.setResult(200)</code>提交响应结果。</p>\n<p>下边我们用长轮询来实现消息推送。</p>\n<p>因为一个 ID 可能会被多个长轮询请求监听，所以我采用了 Guava 包提供的<code>Multimap</code>结构存放长轮询，一个 key 可以对应多个 value。一旦监听到 key 发生变化，对应的所有长轮询都会响应。前端得到非请求超时的状态码，知晓数据变更，主动查询未读消息数接口，更新页面数据。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Controller</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">RequestMapping</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"/polling\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> PollingController</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 存放监听某个Id的长轮询集合</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 线程同步结构</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Multimap</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> DeferredResult</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> watchRequests </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Multimaps</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">synchronizedMultimap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">HashMultimap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">create</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 设置监听</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">GetMapping</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"watch/{id}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> DeferredResult</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> watch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">PathVariable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 延迟对象设置超时时间</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        DeferredResult</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">deferredResult</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> DeferredResult</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;&gt;(TIME_OUT);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 异步请求完成时移除 key，防止内存溢出</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        deferredResult</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">onCompletion</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(() </span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">-&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            watchRequests</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remove</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(id, deferredResult);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 注册长轮询请求</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        watchRequests</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(id, deferredResult);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> deferredResult;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 变更数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">GetMapping</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"publish/{id}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> publish</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">PathVariable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 数据变更 取出监听ID的所有长轮询请求，并一一响应处理</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">watchRequests</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">containsKey</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(id)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">            Collection</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">DeferredResult</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;&gt; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">deferredResults</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> watchRequests</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(id);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">DeferredResult</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">deferredResult</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> deferredResults) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                deferredResult</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setResult</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"我更新了\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"success\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当请求超过设置的超时时间，会抛出<code>AsyncRequestTimeoutException</code>异常，这里直接用<code>@ControllerAdvice</code>全局捕获统一返回即可，前端获取约定好的状态码后再次发起长轮询请求，如此往复调用。</p>\n<div class=\"language-kotlin line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"kotlin\" data-title=\"kotlin\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">@ControllerAdvice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> AsyncRequestTimeoutHandler</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    @ResponseStatus</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(HttpStatus.NOT_MODIFIED)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    @ResponseBody</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    @ExceptionHandler</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(AsyncRequestTimeoutException.class)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> String </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">asyncRequestTimeoutHandler</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(AsyncRequestTimeoutException e) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        System.out.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"异步请求超时\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"304\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们来测试一下，首先页面发起长轮询请求<code>/polling/watch/10086</code>监听消息更变，请求被挂起，不变更数据直至超时，再次发起了长轮询请求；紧接着手动变更数据<code>/polling/publish/10086</code>，长轮询得到响应，前端处理业务逻辑完成后再次发起请求，如此循环往复。</p>\n<p>长轮询相比于短轮询在性能上提升了很多，但依然会产生较多的请求，这是它的一点不完美的地方。</p>\n<h3>iframe 流</h3>\n<p>iframe 流就是在页面中插入一个隐藏的<code>&lt;iframe&gt;</code>标签，通过在<code>src</code>中请求消息数量 API 接口，由此在服务端和客户端之间创建一条长连接，服务端持续向<code>iframe</code>传输数据。</p>\n<p>传输的数据通常是 HTML、或是内嵌的 JavaScript 脚本，来达到实时更新页面的效果。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192388.png\" alt=\"iframe 流示意图\"></p>\n<p>这种方式实现简单，前端只要一个<code>&lt;iframe&gt;</code>标签搞定了</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" data-title=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">iframe</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> src</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"/iframe/message\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> style</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">display:none</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">iframe</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>服务端直接组装 HTML、JS 脚本数据向 response 写入就行了</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Controller</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">RequestMapping</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"/iframe\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> IframeController</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">GetMapping</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"message\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> message</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">HttpServletResponse</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> response</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> throws</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> IOException</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> InterruptedException</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            response</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setHeader</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Pragma\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"no-cache\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            response</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setDateHeader</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Expires\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            response</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setHeader</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Cache-Control\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"no-cache,no-store\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            response</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setStatus</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">HttpServletResponse</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">SC_OK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            response</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getWriter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\" &lt;script type=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">text/javascript</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                    \"parent.document.getElementById('clock').innerHTML = </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                    \"parent.document.getElementById('count').innerHTML = </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">                    \"&lt;/script&gt;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>iframe 流的服务器开销很大，而且 IE、Chrome 等浏览器一直会处于 loading 状态，图标会不停旋转，简直是强迫症杀手。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192389.png\" alt=\"iframe 流效果\"></p>\n<p>iframe 流非常不友好，强烈不推荐。</p>\n<h3>SSE (推荐)</h3>\n<p>很多人可能不知道，服务端向客户端推送消息，其实除了可以用<code>WebSocket</code>这种耳熟能详的机制外，还有一种服务器发送事件(Server-Sent Events)，简称 SSE。这是一种服务器端到客户端(浏览器)的单向消息推送。</p>\n<p>大名鼎鼎的 ChatGPT 就是采用的 SSE。对于需要长时间等待响应的对话场景，ChatGPT 采用了一种巧妙的策略：它会将已经计算出的数据“推送”给用户，并利用 SSE 技术在计算过程中持续返回数据。这样做的好处是可以避免用户因等待时间过长而选择关闭页面。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/chatgpt-sse.png\" alt=\"ChatGPT 使用 SSE 实现对话\"></p>\n<p>SSE 基于 HTTP 协议的，我们知道一般意义上的 HTTP 协议是无法做到服务端主动向客户端推送消息的，但 SSE 是个例外，它变换了一种思路。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192390.png\" alt=\"\"></p>\n<p>SSE 在服务器和客户端之间打开一个单向通道，服务端响应的不再是一次性的数据包而是<code>text/event-stream</code>类型的数据流信息，在有数据变更时从服务器流式传输到客户端。</p>\n<p>整体的实现思路有点类似于在线视频播放，视频流会连续不断的推送到浏览器，你也可以理解成，客户端在完成一次用时很长（网络不畅）的下载。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192391.png\" alt=\"SSE 示意图\"></p>\n<p>SSE 与 WebSocket 作用相似，都可以建立服务端与浏览器之间的通信，实现服务端向客户端推送消息，但还是有些许不同：</p>\n<ul>\n<li>SSE 是基于 HTTP 协议的，它们不需要特殊的协议或服务器实现即可工作；WebSocket 需单独服务器来处理协议。</li>\n<li>SSE 单向通信，只能由服务端向客户端单向通信；WebSocket 全双工通信，即通信的双方可以同时发送和接受信息。</li>\n<li>SSE 实现简单开发成本低，无需引入其他组件；WebSocket 传输数据需做二次解析，开发门槛高一些。</li>\n<li>SSE 默认支持断线重连；WebSocket 则需要自己实现。</li>\n<li>SSE 只能传送文本消息，二进制数据需要经过编码后传送；WebSocket 默认支持传送二进制数据。</li>\n</ul>\n<p><strong>SSE 与 WebSocket 该如何选择？</strong></p>\n<blockquote>\n<p>技术并没有好坏之分，只有哪个更合适</p>\n</blockquote>\n<p>SSE 好像一直不被大家所熟知，一部分原因是出现了 WebSocket，这个提供了更丰富的协议来执行双向、全双工通信。对于游戏、即时通信以及需要双向近乎实时更新的场景，拥有双向通道更具吸引力。</p>\n<p>但是，在某些情况下，不需要从客户端发送数据。而你只需要一些服务器操作的更新。比如：站内信、未读消息数、状态更新、股票行情、监控数量等场景，SSE 不管是从实现的难易和成本上都更加有优势。此外，SSE 具有 WebSocket 在设计上缺乏的多种功能，例如：自动重新连接、事件 ID 和发送任意事件的能力。</p>\n<p>前端只需进行一次 HTTP 请求，带上唯一 ID，打开事件流，监听服务端推送的事件就可以了</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" data-title=\"javascript\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">script</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    let source = null;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    let userId = 7777</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    if (window.EventSource) </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 建立连接</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        source</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> EventSource</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'http://localhost:7777/sse/sub/'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">userId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        setMessageInnerHTML</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"连接用户=\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> userId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         * 连接一旦建立，就会触发open事件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         * 另一种写法：source.onopen = function (event) {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        source</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">addEventListener</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'open'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            setMessageInnerHTML</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"建立连接。。。\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         * 客户端收到服务器发来的数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         * 另一种写法：source.onmessage = function (event) {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        source</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">addEventListener</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'message'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            setMessageInnerHTML</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">    }</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> else </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        setMessageInnerHTML</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"你的浏览器不支持SSE\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">script</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>服务端的实现更简单，创建一个<code>SseEmitter</code>对象放入<code>sseEmitterMap</code>进行管理</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Map</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> SseEmitter</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sseEmitterMap </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ConcurrentHashMap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * 创建连接</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> SseEmitter</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> connect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> userId) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    try</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 设置超时时间，0表示不过期。默认30秒</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        SseEmitter</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sseEmitter </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> SseEmitter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0L</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 注册回调</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        sseEmitter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">onCompletion</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">completionCallBack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(userId));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        sseEmitter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">onError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">errorCallBack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(userId));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        sseEmitter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">onTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">timeoutCallBack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(userId));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        sseEmitterMap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(userId, sseEmitter);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getAndIncrement</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> sseEmitter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">catch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Exception</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">info</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"创建新的sse连接异常，当前用户：{}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, userId);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * 给指定用户发送消息</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sendMessage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> userId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> message) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">sseEmitterMap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">containsKey</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(userId)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        try</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            sseEmitterMap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(userId).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">send</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(message);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">catch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">IOException</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">error</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"用户[{}]推送异常:{}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, userId, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getMessage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            removeUser</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(userId)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>注意：</strong> SSE 不支持 IE 浏览器，对其他主流浏览器兼容性做的还不错。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192393.png\" alt=\"SSE 兼容性\"></p>\n<h3>Websocket</h3>\n<p>Websocket 应该是大家都比较熟悉的一种实现消息推送的方式，上边我们在讲 SSE 的时候也和 Websocket 进行过比较。</p>\n<p>这是一种在 TCP 连接上进行全双工通信的协议，建立客户端和服务器之间的通信渠道。浏览器和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png\" alt=\"Websocket 示意图\"></p>\n<p>WebSocket 的工作过程可以分为以下几个步骤：</p>\n<ol>\n<li>客户端向服务器发送一个 HTTP 请求，请求头中包含 <code>Upgrade: websocket</code> 和 <code>Sec-WebSocket-Key</code> 等字段，表示要求升级协议为 WebSocket；</li>\n<li>服务器收到这个请求后，会进行升级协议的操作，如果支持 WebSocket，它将回复一个 HTTP 101 状态码，响应头中包含 ，<code>Connection: Upgrade</code>和 <code>Sec-WebSocket-Accept: xxx</code> 等字段、表示成功升级到 WebSocket 协议。</li>\n<li>客户端和服务器之间建立了一个 WebSocket 连接，可以进行双向的数据传输。数据以帧（frames）的形式进行传送，而不是传统的 HTTP 请求和响应。WebSocket 的每条消息可能会被切分成多个数据帧（最小单位）。发送端会将消息切割成多个帧发送给接收端，接收端接收消息帧，并将关联的帧重新组装成完整的消息。</li>\n<li>客户端或服务器可以主动发送一个关闭帧，表示要断开连接。另一方收到后，也会回复一个关闭帧，然后双方关闭 TCP 连接。</li>\n</ol>\n<p>另外，建立 WebSocket 连接之后，通过心跳机制来保持 WebSocket 连接的稳定性和活跃性。</p>\n<p>SpringBoot 整合 WebSocket，先引入 WebSocket 相关的工具包，和 SSE 相比有额外的开发成本。</p>\n<div class=\"language-xml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 引入websocket --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;org.springframework.boot&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;spring-boot-starter-websocket&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>服务端使用<code>@ServerEndpoint</code>注解标注当前类为一个 WebSocket 服务器，客户端可以通过<code>ws://localhost:7777/webSocket/10086</code>来连接到 WebSocket 服务器端。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Component</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Slf4j</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">ServerEndpoint</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"/websocket/{userId}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> WebSocketServer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Session</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> session</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> CopyOnWriteArraySet</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">WebSocketServer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> webSockets </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> CopyOnWriteArraySet</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 用来存在线连接数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Map</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Session</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sessionPool </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> HashMap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Session</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 链接成功调用的方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">OnOpen</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> onOpen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Session</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> session</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">PathParam</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"userId\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> userId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        try</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">session</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> session;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            webSockets</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            sessionPool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(userId, session);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">info</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"websocket消息: 有新的连接，总数为:\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> webSockets</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">size</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">catch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Exception</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 收到客户端消息后调用的方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">OnMessage</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> onMessage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> message</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">info</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"websocket消息: 收到客户端消息:\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> message);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 此为单点消息</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sendOneMessage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> userId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> message</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        Session</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> session</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> sessionPool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(userId);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (session </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &amp;&amp;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> session</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isOpen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            try</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">info</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"websocket消: 单点消息:\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> message);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                session</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getAsyncRemote</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sendText</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(message);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">catch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Exception</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">printStackTrace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>服务端还需要注入<code>ServerEndpointerExporter</code>，这个 Bean 就会自动注册使用了<code>@ServerEndpoint</code>注解的 WebSocket 服务器。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">@</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Configuration</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> WebSocketConfiguration</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 用于注册使用了 @ServerEndpoint 注解的 WebSocket 服务器</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Bean</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ServerEndpointExporter</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> serverEndpointExporter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ServerEndpointExporter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>前端初始化打开 WebSocket 连接，并监听连接状态，接收服务端数据或向服务端发送数据。</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" data-title=\"javascript\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">script</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    var ws = new WebSocket('ws://localhost:7777/webSocket/10086');</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    // 获取连接状态</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    console.log('ws连接状态：' + ws.readyState);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    //监听是否连接成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ws.onopen = function () </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'ws连接状态：'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> ws</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">readyState</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //连接成功则发送一个数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        ws</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">send</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'test1'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    // 接听服务器发回的信息并处理展示</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ws.onmessage = function (data) </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'接收到来自服务器的消息：'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //完成通信后关闭WebSocket连接</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        ws</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">close</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    // 监听连接关闭事件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ws.onclose = function () </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 监听整个过程中websocket的状态</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'ws连接状态：'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> ws</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">readyState</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    // 监听并处理error事件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ws.onerror = function (error) </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">error</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    function sendMessage() </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> content</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> $</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#message\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        $</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ajax</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">            url</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '/socket/publish?userId=10086&amp;message='</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> content</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">            type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'GET'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">            data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"id\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"7777\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"content\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> content</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            success</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">                console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        })</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">script</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>页面初始化建立 WebSocket 连接，之后就可以进行双向通信了，效果还不错。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192395.png\" alt=\"\"></p>\n<h3>MQTT</h3>\n<p><strong>什么是 MQTT 协议？</strong></p>\n<p>MQTT (Message Queue Telemetry Transport)是一种基于发布/订阅（publish/subscribe）模式的轻量级通讯协议，通过订阅相应的主题来获取消息，是物联网（Internet of Thing）中的一个标准传输协议。</p>\n<p>该协议将消息的发布者（publisher）与订阅者（subscriber）进行分离，因此可以在不可靠的网络环境中，为远程连接的设备提供可靠的消息服务，使用方式与传统的 MQ 有点类似。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000022986325.png\" alt=\"MQTT 协议示例\"></p>\n<p>TCP 协议位于传输层，MQTT 协议位于应用层，MQTT 协议构建于 TCP/IP 协议上，也就是说只要支持 TCP/IP 协议栈的地方，都可以使用 MQTT 协议。</p>\n<p><strong>为什么要用 MQTT 协议？</strong></p>\n<p>MQTT 协议为什么在物联网（IOT）中如此受偏爱？而不是其它协议，比如我们更为熟悉的 HTTP 协议呢？</p>\n<ul>\n<li>首先 HTTP 协议它是一种同步协议，客户端请求后需要等待服务器的响应。而在物联网（IOT）环境中，设备会很受制于环境的影响，比如带宽低、网络延迟高、网络通信不稳定等，显然异步消息协议更为适合 IOT 应用程序。</li>\n<li>HTTP 是单向的，如果要获取消息客户端必须发起连接，而在物联网（IOT）应用程序中，设备或传感器往往都是客户端，这意味着它们无法被动地接收来自网络的命令。</li>\n<li>通常需要将一条命令或者消息，发送到网络上的所有设备上。HTTP 要实现这样的功能不但很困难，而且成本极高。</li>\n</ul>\n<p>具体的 MQTT 协议介绍和实践，这里我就不再赘述了，大家可以参考我之前的两篇文章，里边写的也都很详细了。</p>\n<ul>\n<li>MQTT 协议的介绍：<a href=\"https://mp.weixin.qq.com/s/udFE6k9pPetIWsa6KeErrA\" target=\"_blank\" rel=\"noopener noreferrer\">我也没想到 SpringBoot + RabbitMQ 做智能家居，会这么简单</a></li>\n<li>MQTT 实现消息推送：<a href=\"https://mp.weixin.qq.com/s/U-fUGr9i1MVa4PoVyiDFCg\" target=\"_blank\" rel=\"noopener noreferrer\">未读消息（小红点），前端 与 RabbitMQ 实时消息推送实践，贼简单~</a></li>\n</ul>\n<h2>总结</h2>\n<blockquote>\n<p>以下内容为 JavaGuide 补充</p>\n</blockquote>\n<p>|           | 介绍                                                                                                          | 优点                   | 缺点                                                 |<br>\n|</p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192380.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "系统设计"
      ]
    },
    {
      "title": "星球专属优质专栏概览",
      "url": "https://javaguide.cn/zhuanlan/",
      "id": "https://javaguide.cn/zhuanlan/",
      "summary": "这部分的内容为我的专属，目前已经更新了下面这些专栏： : 与 JavaGuide 开源版的内容互补！ : 包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。 : 从零开始基于 Netty+Kyro+Zookeeper 实现一个简易的 RPC 框架。 ：目前已经整理了 Dubbo 2.6.x、Netty 4....",
      "content_html": "<p>这部分的内容为我的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>专属，目前已经更新了下面这些专栏：</p>\n<ul>\n<li><strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北》</a></strong> : 与 JavaGuide 开源版的内容互补！</li>\n<li><strong><a href=\"/zhuanlan/back-end-interview-high-frequency-system-design-and-scenario-questions.html\" target=\"_blank\">《后端面试高频系统设计&amp;场景题》</a></strong> : 包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。</li>\n<li><strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《手写 RPC 框架》</a></strong> : 从零开始基于 Netty+Kyro+Zookeeper 实现一个简易的 RPC 框架。</li>\n<li><strong><a href=\"/zhuanlan/source-code-reading.html\" target=\"_blank\">《Java 必读源码系列》</a></strong>：目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot 2.1 等框架/中间件的源码</li>\n<li>……</li>\n</ul>\n<p>欢迎准备 Java 面试以及学习 Java 的同学加入我的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>，干货非常多！收费虽然是白菜价，但星球里的内容比你参加几万的培训班质量还要高。</p>\n<p>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</p>\n<h2>星球其他资源</h2>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>除了提供了 <strong>《Java 面试指北》</strong> 、 <strong>《Java 必读源码系列》</strong>（目前已经整理了 Dubbo 2.6.x 、Netty 4.x、SpringBoot2.1 的源码）、 <strong>《手写 RPC 框架》</strong> 、<strong>《Kafka 常见面试题/知识点总结》</strong> 等多个专属小册，还有读书活动、学习打卡、简历修改、免费提问、海量 Java 优质面试资源以及各种不定时的福利。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211231206733.png\" alt=\"知识星球专栏概览\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220723120918434.png\" alt=\"星球 PDF 面试手册\"></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a>。</p>\n<h2>星球限时优惠</h2>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://www.yuque.com/snailclimb/rpkqw1/ncxpnfmlng08wlf1\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> 。</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "《后端面试高频系统设计&场景题》",
      "url": "https://javaguide.cn/zhuanlan/back-end-interview-high-frequency-system-design-and-scenario-questions.html",
      "id": "https://javaguide.cn/zhuanlan/back-end-interview-high-frequency-system-design-and-scenario-questions.html",
      "summary": "介绍 《后端面试高频系统设计&场景题》 是我的的一个内部小册，包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。 近年来，随着国内的技术面试越来越卷，越来越多的公司开始在面试中考察系统设计和场景问题，以此来更全面的考察求职者，不论是校招还是社招。不过，正常面试全是场景题的情况还是极少的，面试官一般会在面试中...",
      "content_html": "<h2>介绍</h2>\n<p><strong>《后端面试高频系统设计&amp;场景题》</strong> 是我的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>的一个内部小册，包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。</p>\n<p>近年来，随着国内的技术面试越来越卷，越来越多的公司开始在面试中考察系统设计和场景问题，以此来更全面的考察求职者，不论是校招还是社招。不过，正常面试全是场景题的情况还是极少的，面试官一般会在面试中穿插一两个系统设计和场景题来考察你。</p>\n<p>于是，我总结了这份《后端面试高频系统设计&amp;场景题》，包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。</p>\n<p>即使不是准备面试，我也强烈推荐你认真阅读这一系列文章，这对于提升自己系统设计思维和解决实际问题的能力还是非常有帮助的。并且，涉及到的很多案例都可以用到自己的项目上比如抽奖系统设计、第三方授权登录、Redis 实现延时任务的正确方式。</p>\n<p>《后端面试高频系统设计&amp;场景题》本身是属于《Java 面试指北》的一部分，后面由于内容篇幅较多，因此被单独提了出来。</p>\n<h2>内容概览</h2>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/back-end-interview-high-frequency-system-design-and-scenario-questions-fengmian.png\" alt=\"《后端面试高频系统设计&amp;场景题》\"></p>\n<h2>星球其他资源</h2>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>除了提供了 <strong>《Java 面试指北》</strong> 、 <strong>《Java 必读源码系列》</strong>（目前已经整理了 Dubbo 2.6.x 、Netty 4.x、SpringBoot2.1 的源码）、 <strong>《手写 RPC 框架》</strong> 、<strong>《Kafka 常见面试题/知识点总结》</strong> 等多个专属小册，还有读书活动、学习打卡、简历修改、免费提问、海量 Java 优质面试资源以及各种不定时的福利。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211231206733.png\" alt=\"知识星球专栏概览\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220723120918434.png\" alt=\"星球 PDF 面试手册\"></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a>。</p>\n<h2>星球限时优惠</h2>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://www.yuque.com/snailclimb/rpkqw1/ncxpnfmlng08wlf1\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> 。</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/back-end-interview-high-frequency-system-design-and-scenario-questions-fengmian.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "《手写 RPC 框架》",
      "url": "https://javaguide.cn/zhuanlan/handwritten-rpc-framework.html",
      "id": "https://javaguide.cn/zhuanlan/handwritten-rpc-framework.html",
      "summary": "介绍 《手写 RPC 框架》 是我的的一个内部小册，我写了 12 篇文章来讲解如何从零开始基于 Netty+Kyro+Zookeeper 实现一个简易的 RPC 框架。 麻雀虽小五脏俱全，项目代码注释详细，结构清晰，并且集成了 Check Style 规范代码结构，非常适合阅读和学习。 内容概览 通过这个简易的轮子，你可以学到 RPC 的底层原理和原理...",
      "content_html": "<h2>介绍</h2>\n<p><strong>《手写 RPC 框架》</strong> 是我的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>的一个内部小册，我写了 12 篇文章来讲解如何从零开始基于 Netty+Kyro+Zookeeper 实现一个简易的 RPC 框架。</p>\n<p>麻雀虽小五脏俱全，项目代码注释详细，结构清晰，并且集成了 Check Style 规范代码结构，非常适合阅读和学习。</p>\n<h2>内容概览</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/image-20220308100605485.png\" alt=\"\"></p>\n<p>通过这个简易的轮子，你可以学到 RPC 的底层原理和原理以及各种 Java 编码实践的运用。你甚至可以把它当做你的毕设/项目经验的选择，这是非常不错！对比其他求职者的项目经验都是各种系统，造轮子肯定是更加能赢得面试官的青睐。</p>\n<ul>\n<li>GitHub 地址：<a href=\"https://github.com/Snailclimb/guide-rpc-framework\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Snailclimb/guide-rpc-framework</a> 。</li>\n<li>Gitee 地址：<a href=\"https://gitee.com/SnailClimb/guide-rpc-framework\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/SnailClimb/guide-rpc-framework</a> 。</li>\n</ul>\n<h2>星球其他资源</h2>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>除了提供了 <strong>《Java 面试指北》</strong> 、 <strong>《Java 必读源码系列》</strong>（目前已经整理了 Dubbo 2.6.x 、Netty 4.x、SpringBoot2.1 的源码）、 <strong>《手写 RPC 框架》</strong> 、<strong>《Kafka 常见面试题/知识点总结》</strong> 等多个专属小册，还有读书活动、学习打卡、简历修改、免费提问、海量 Java 优质面试资源以及各种不定时的福利。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211231206733.png\" alt=\"知识星球专栏概览\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220723120918434.png\" alt=\"星球 PDF 面试手册\"></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a>。</p>\n<h2>星球限时优惠</h2>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://www.yuque.com/snailclimb/rpkqw1/ncxpnfmlng08wlf1\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> 。</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/image-20220308100605485.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "《Java 面试指北》",
      "url": "https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html",
      "id": "https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html",
      "summary": "我花费了三年的时间，写了一本针对 Java 面试的《Java 面试指北》，内容质量非常高，非常适合准备 Java 面试的朋友使用！ 目前的成绩：累计阅读 270w+ ，点赞 3550+ ，评论 1130+ （几乎每一条提问类型的评论我看到后都会用心回复）。 《Java 面试指北》统计 介绍 《Java 面试指北》 是我的的一个内部小册，和 JavaGu...",
      "content_html": "<p>我花费了三年的时间，写了一本针对 Java 面试的《Java 面试指北》，内容质量非常高，非常适合准备 Java 面试的朋友使用！</p>\n<p>目前的成绩：累计阅读 <strong>270w+</strong> ，点赞 <strong>3550+</strong> ，评论 <strong>1130+</strong> （几乎每一条提问类型的评论我看到后都会用心回复）。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/java-interview-guide-statistics.png\" alt=\"《Java 面试指北》统计\"></p>\n<h2>介绍</h2>\n<p><strong>《Java 面试指北》</strong> 是我的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>的一个内部小册，和 <a href=\"https://javaguide.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaGuide 开源版</a>的内容互补。相比于开源版本来说，《Java 面试指北》添加了下面这些内容（不仅仅是这些内容）：</p>\n<ul>\n<li>17+ 篇文章手把手教你如何准备面试，50+ 准备面试过程中的常见问题详细解读，让你更高效地准备 Java 面试。</li>\n<li>更全面的八股文面试题（系统设计、场景题、常见框架、分布式&amp;微服务、高并发 ……）。</li>\n<li>优质面经精选（相比于牛客网或者其他网站的面经，《Java 面试指北》中整理的面经质量更高，并且，我会提供优质的参考资料）。</li>\n<li>技术面试题自测（高效准备技术八股文的技巧之一在于多多自测，查漏补缺）。</li>\n<li>练级攻略（有助于个人成长的经验分享）。</li>\n</ul>\n<p>《Java 面试指北》 会根据每一年的面试情况对内容进行更新完善，保证内容质量的时效性。并且，只需要加入<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>一次，即可永久获取《Java 面试指北》的访问权限，持续同步更新完善。</p>\n<h2>内容概览</h2>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/javamianshizhibei-content-overview.png\" alt=\"《Java 面试指北》内容概览\"></p>\n<h3>面试准备篇</h3>\n<p>在 <strong>「面试准备篇」</strong> ，我写了 17+ 篇文章手把手教你如何准备面试，50+ 准备面试过程中的常见问题详细解读。准备面试过程中常见的疑问这里都有解答，内容涵盖项目经验、简历编写、源码学习、算法准备、面试资源等等。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/preparation-for-interview.png\" alt=\"《Java 面试指北》面试准备篇\"></p>\n<p>另外，考虑到很多小伙伴缺少项目经历，我还推荐了很多小众但优质的实战项目，有视频也有开源项目，有业务系统，也有各种含金量比较高的轮子类项目。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/practical-project-recommendation.png\" alt=\"《Java面试指北》-实战项目推荐\"></p>\n<h3>技术面试题篇</h3>\n<p><strong>「技术面试题篇」</strong> 的内容和 JavaGuide 开源版本互补，不仅仅包括最基本的 Java、常见框架等八股文，还包括系统设计、分布式、高并发等进阶内容。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/technical-interview-questions.png\" alt=\"《Java 面试指北》技术面试题篇\"></p>\n<h3>面经篇</h3>\n<p>古人云:“<strong>他山之石，可以攻玉</strong>” 。善于学习借鉴别人的面试的成功经验或者失败的教训，可以让自己少走许多弯路。</p>\n<p><strong>「面经篇」</strong> 主要会分享一些高质量的 Java 后端面经，有校招的，也有社招的，有大厂的，也有中小厂的。</p>\n<p>如果你是非科班的同学，也能在这些文章中找到对应的非科班的同学写的面经。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/thinkimage-20220612185810480.png\" alt=\"《Java 面试指北》面经篇\"></p>\n<p>相比于牛客网或者其他网站的面经，《Java 面试指北》中整理的面经质量更高，并且，我会提供优质的参考资料。</p>\n<p>另外，<a href=\"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\" rel=\"noopener noreferrer\">知识星球</a>还有专门分享面经和面试题的专题，里面会分享很多优质的面经和面试题。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/image-20220304120018731.png\" alt=\"星球面经专题\"></p>\n<h3>技术面试题自测篇</h3>\n<p>为了让小伙伴们自测以检查自己的掌握情况，我还推出了 <strong>「技术面试题自测」</strong> 系列。不过，目前只更新了 Java 和数据库的自测，正在持续更新中。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/image-20220621095641897.png\" alt=\"《Java 面试指北》技术面试题自测篇\"></p>\n<p>高效准备技术八股文的技巧之一在于多多自测，查漏补缺。</p>\n<h3>练级攻略篇</h3>\n<p><strong>「练级攻略篇」</strong> 这个系列主要内容一些有助于个人成长的经验分享。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/training-strategy-articles.png\" alt=\"《Java 面试指北》练级攻略篇\"></p>\n<p>每一篇内容都非常干货，不少球友看了之后表示收获满满。不过，最重要的还是知行合一。</p>\n<h3>工作篇</h3>\n<p><strong>「工作篇」</strong> 这个系列主要内容是分享有助于个人以及职场发展的内容以及在工作中经常会遇到的问题。</p>\n<p><img src=\"https://oss.javaguide.cn/javamianshizhibei/gongzuopian.png\" alt=\"《Java 面试指北》工作篇\"></p>\n<h2>星球其他资源</h2>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>除了提供了 <strong>《Java 面试指北》</strong> 、 <strong>《Java 必读源码系列》</strong>（目前已经整理了 Dubbo 2.6.x 、Netty 4.x、SpringBoot2.1 的源码）、 <strong>《手写 RPC 框架》</strong> 、<strong>《Kafka 常见面试题/知识点总结》</strong> 等多个专属小册，还有读书活动、学习打卡、简历修改、免费提问、海量 Java 优质面试资源以及各种不定时的福利。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211231206733.png\" alt=\"知识星球专栏概览\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220723120918434.png\" alt=\"星球 PDF 面试手册\"></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a>。</p>\n<h2>星球限时优惠</h2>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://www.yuque.com/snailclimb/rpkqw1/ncxpnfmlng08wlf1\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> 。</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/java-interview-guide-statistics.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "《Java 必读源码系列》",
      "url": "https://javaguide.cn/zhuanlan/source-code-reading.html",
      "id": "https://javaguide.cn/zhuanlan/source-code-reading.html",
      "summary": "介绍 《Java 必读源码系列》 是我的的一个内部小册，目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot 2.1 等框架/中间件的源码。后续还会整理更多值得阅读的优质源码，持续完善中。 结构清晰，内容详细，非常适合想要深入学习框架/中间件源码的同学阅读。 内容概览 星球其他资源 除了提供了 《Java 面试指北》 、 《...",
      "content_html": "<h2>介绍</h2>\n<p><strong>《Java 必读源码系列》</strong> 是我的<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>的一个内部小册，目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot 2.1 等框架/中间件的源码。后续还会整理更多值得阅读的优质源码，持续完善中。</p>\n<p>结构清晰，内容详细，非常适合想要深入学习框架/中间件源码的同学阅读。</p>\n<h2>内容概览</h2>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220621091832348.png\" alt=\"\"></p>\n<h2>星球其他资源</h2>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">知识星球</a>除了提供了 <strong>《Java 面试指北》</strong> 、 <strong>《Java 必读源码系列》</strong>（目前已经整理了 Dubbo 2.6.x 、Netty 4.x、SpringBoot2.1 的源码）、 <strong>《手写 RPC 框架》</strong> 、<strong>《Kafka 常见面试题/知识点总结》</strong> 等多个专属小册，还有读书活动、学习打卡、简历修改、免费提问、海量 Java 优质面试资源以及各种不定时的福利。</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220211231206733.png\" alt=\"知识星球专栏概览\"></p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/image-20220723120918434.png\" alt=\"星球 PDF 面试手册\"></p>\n<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>\n<p><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\"><img src=\"https://oss.javaguide.cn/xingqiu/xingqiufuwu.png\" alt=\"星球服务\"></a></p>\n<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>\n<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 知识星球详细介绍</a>。</p>\n<h2>星球限时优惠</h2>\n<p>这里再送一张 <strong>30</strong> 元的星球专属优惠券，数量有限（价格即将上调。老用户续费半价 ，微信扫码即可续费）！</p>\n<p><img src=\"https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-30.jpg\" alt=\"知识星球30元优惠卷\"></p>\n<p>进入星球之后，记得查看 <strong><a href=\"https://t.zsxq.com/0d18KSarv\" target=\"_blank\" rel=\"noopener noreferrer\">星球使用指南</a></strong> （一定要看！！！） 和 <strong><a href=\"https://www.yuque.com/snailclimb/rpkqw1/ncxpnfmlng08wlf1\" target=\"_blank\" rel=\"noopener noreferrer\">星球优质主题汇总</a></strong> 。</p>\n<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>\n<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>\n<h2>更多专栏</h2>\n<p>除了《Java 必读源码系列》之外，我的知识星球还有 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247536358&amp;idx=2&amp;sn=a6098093107d596d3c426c9e71e871b8&amp;chksm=cea1012df9d6883b95aab61fd815a238c703b2d4b36d78901553097a4939504e3e6d73f2b14b&amp;token=710779655&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">《Java 面试指北》</a><strong>、</strong><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247536451&amp;idx=1&amp;sn=5eae2525ac3d79591dd86c6051522c0b&amp;chksm=cea10088f9d6899e0aee4146de162a6de6ece71ba4c80c23f04d12b1fd48c087a31bc7d413f4&amp;token=710779655&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">《后端面试高频系统设计&amp;场景题》</a>、《手写 RPC 框架》等多个专栏。进入星球之后，统统都可以免费阅读。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TyC1icms4objsyiaJe2Iic7RZUq6nzsOOTX27x6Vfm5SibGic952kp3JM0RfRpLZXrneOCEOOogicj69yKw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"\"></p>\n",
      "image": "https://oss.javaguide.cn/xingqiu/image-20220621091832348.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "知识星球"
      ]
    },
    {
      "title": "十大经典排序算法总结",
      "url": "https://javaguide.cn/cs-basics/algorithms/10-classical-sorting-algorithms.html",
      "id": "https://javaguide.cn/cs-basics/algorithms/10-classical-sorting-algorithms.html",
      "summary": "本文转自：http://www.guoyaohua.com/sorting.html，JavaGuide 对其做了补充完善。 引言 所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。一个优秀的算法可以节省大量...",
      "content_html": "<blockquote>\n<p>本文转自：<a href=\"http://www.guoyaohua.com/sorting.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.guoyaohua.com/sorting.html</a>，JavaGuide 对其做了补充完善。</p>\n</blockquote>\n<!-- markdownlint-disable MD024 -->\n<h2>引言</h2>\n<p>所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。一个优秀的算法可以节省大量的资源。在各个领域中考虑到数据的各种限制和规范，要得到一个符合实际的优秀算法，得经过大量的推理和分析。</p>\n<h2>简介</h2>\n<h3>排序算法总结</h3>\n<p>常见的内部排序算法有：<strong>插入排序</strong>、<strong>希尔排序</strong>、<strong>选择排序</strong>、<strong>冒泡排序</strong>、<strong>归并排序</strong>、<strong>快速排序</strong>、<strong>堆排序</strong>、<strong>基数排序</strong>等，本文只讲解内部排序算法。用一张表格概括：</p>\n<p>| 排序算法 | 时间复杂度（平均） | 时间复杂度（最差） | 时间复杂度（最好） | 空间复杂度 | 排序方式 | 稳定性 |<br>\n|</p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/sort2.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "经典算法思想总结（含LeetCode题目推荐）",
      "url": "https://javaguide.cn/cs-basics/algorithms/classical-algorithm-problems-recommendations.html",
      "id": "https://javaguide.cn/cs-basics/algorithms/classical-algorithm-problems-recommendations.html",
      "summary": "贪心算法 算法思想 贪心的本质是选择每一阶段的局部最优，从而达到全局最优。 一般解题步骤 将问题分解为若干个子问题 找出适合的贪心策略 求解每一个子问题的最优解 将局部最优解堆叠成全局最优解 LeetCode 455.分发饼干：https://leetcode.cn/problems/assign-cookies/ 121.买卖股票的最佳时机：http...",
      "content_html": "<h2>贪心算法</h2>\n<h3>算法思想</h3>\n<p>贪心的本质是选择每一阶段的局部最优，从而达到全局最优。</p>\n<h3>一般解题步骤</h3>\n<ul>\n<li>将问题分解为若干个子问题</li>\n<li>找出适合的贪心策略</li>\n<li>求解每一个子问题的最优解</li>\n<li>将局部最优解堆叠成全局最优解</li>\n</ul>\n<h3>LeetCode</h3>\n<p>455.分发饼干：<a href=\"https://leetcode.cn/problems/assign-cookies/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/assign-cookies/</a></p>\n<p>121.买卖股票的最佳时机：<a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/</a></p>\n<p>122.买卖股票的最佳时机 II：<a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/</a></p>\n<p>55.跳跃游戏：<a href=\"https://leetcode.cn/problems/jump-game/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/jump-game/</a></p>\n<p>45.跳跃游戏 II：<a href=\"https://leetcode.cn/problems/jump-game-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/jump-game-ii/</a></p>\n<h2>动态规划</h2>\n<h3>算法思想</h3>\n<p>动态规划中每一个状态一定是由上一个状态推导出来的，这一点就区分于贪心，贪心没有状态推导，而是从局部直接选最优的。</p>\n<p>经典题目：01 背包、完全背包</p>\n<h3>一般解题步骤</h3>\n<ul>\n<li>确定 dp 数组（dp table）以及下标的含义</li>\n<li>确定递推公式</li>\n<li>dp 数组如何初始化</li>\n<li>确定遍历顺序</li>\n<li>举例推导 dp 数组</li>\n</ul>\n<h3>LeetCode</h3>\n<p>509.斐波那契数：<a href=\"https://leetcode.cn/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/fibonacci-number/</a></p>\n<p>746.使用最小花费爬楼梯：<a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/min-cost-climbing-stairs/</a></p>\n<p>416.分割等和子集：<a href=\"https://leetcode.cn/problems/partition-equal-subset-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/partition-equal-subset-sum/</a></p>\n<p>518.零钱兑换：<a href=\"https://leetcode.cn/problems/coin-change-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/coin-change-ii/</a></p>\n<p>647.回文子串：<a href=\"https://leetcode.cn/problems/palindromic-substrings/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/palindromic-substrings/</a></p>\n<p>516.最长回文子序列：<a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/longest-palindromic-subsequence/</a></p>\n<h2>回溯算法</h2>\n<h3>算法思想</h3>\n<p>回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条</p>\n<p>件时，就“回溯”返回，尝试别的路径。其本质就是穷举。</p>\n<p>经典题目：8 皇后</p>\n<h3>一般解题步骤</h3>\n<ul>\n<li>针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。</li>\n<li>确定易于搜索的解空间结构,使得能用回溯法方便地搜索整个解空间 。</li>\n<li>以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索。</li>\n</ul>\n<h3>leetcode</h3>\n<p>77.组合：<a href=\"https://leetcode.cn/problems/combinations/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/combinations/</a></p>\n<p>39.组合总和：<a href=\"https://leetcode.cn/problems/combination-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/combination-sum/</a></p>\n<p>40.组合总和 II：<a href=\"https://leetcode.cn/problems/combination-sum-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/combination-sum-ii/</a></p>\n<p>78.子集：<a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/subsets/</a></p>\n<p>90.子集 II：<a href=\"https://leetcode.cn/problems/subsets-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/subsets-ii/</a></p>\n<p>51.N 皇后：<a href=\"https://leetcode.cn/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/n-queens/</a></p>\n<h2>分治算法</h2>\n<h3>算法思想</h3>\n<p>将一个规模为 N 的问题分解为 K 个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。</p>\n<p>经典题目：二分查找、汉诺塔问题</p>\n<h3>一般解题步骤</h3>\n<ul>\n<li>将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题；</li>\n<li>若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</li>\n<li>将各个子问题的解合并为原问题的解。</li>\n</ul>\n<h3>LeetCode</h3>\n<p>108.将有序数组转换成二叉搜索数：<a href=\"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/</a></p>\n<p>148.排序列表：<a href=\"https://leetcode.cn/problems/sort-list/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/sort-list/</a></p>\n<p>23.合并 k 个升序链表：<a href=\"https://leetcode.cn/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/merge-k-sorted-lists/</a></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "常见数据结构经典LeetCode题目推荐",
      "url": "https://javaguide.cn/cs-basics/algorithms/common-data-structures-leetcode-recommendations.html",
      "id": "https://javaguide.cn/cs-basics/algorithms/common-data-structures-leetcode-recommendations.html",
      "summary": "数组 704.二分查找：https://leetcode.cn/problems/binary-search/ 80.删除有序数组中的重复项 II：https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii 977.有序数组的平方：https://leetcode.cn/pro...",
      "content_html": "<h2>数组</h2>\n<p>704.二分查找：<a href=\"https://leetcode.cn/problems/binary-search/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/binary-search/</a></p>\n<p>80.删除有序数组中的重复项 II：<a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii</a></p>\n<p>977.有序数组的平方：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p>\n<h2>链表</h2>\n<p>707.设计链表：<a href=\"https://leetcode.cn/problems/design-linked-list/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/design-linked-list/</a></p>\n<p>206.反转链表：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/reverse-linked-list/</a></p>\n<p>92.反转链表 II：<a href=\"https://leetcode.cn/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/reverse-linked-list-ii/</a></p>\n<p>61.旋转链表：<a href=\"https://leetcode.cn/problems/rotate-list/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/rotate-list/</a></p>\n<h2>栈与队列</h2>\n<p>232.用栈实现队列：<a href=\"https://leetcode.cn/problems/implement-queue-using-stacks/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/implement-queue-using-stacks/</a></p>\n<p>225.用队列实现栈：<a href=\"https://leetcode.cn/problems/implement-stack-using-queues/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/implement-stack-using-queues/</a></p>\n<p>347.前 K 个高频元素：<a href=\"https://leetcode.cn/problems/top-k-frequent-elements/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/top-k-frequent-elements/</a></p>\n<p>239.滑动窗口最大值：<a href=\"https://leetcode.cn/problems/sliding-window-maximum/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/sliding-window-maximum/</a></p>\n<h2>二叉树</h2>\n<p>105.从前序与中序遍历构造二叉树：<a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</a></p>\n<p>117.填充每个节点的下一个右侧节点指针 II：<a href=\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii</a></p>\n<p>236.二叉树的最近公共祖先：<a href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/</a></p>\n<p>129.求根节点到叶节点数字之和：<a href=\"https://leetcode.cn/problems/sum-root-to-leaf-numbers/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/sum-root-to-leaf-numbers/</a></p>\n<p>102.二叉树的层序遍历：<a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/binary-tree-level-order-traversal/</a></p>\n<p>530.二叉搜索树的最小绝对差：<a href=\"https://leetcode.cn/problems/minimum-absolute-difference-in-bst/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/minimum-absolute-difference-in-bst/</a></p>\n<h2>图</h2>\n<p>200.岛屿数量：<a href=\"https://leetcode.cn/problems/number-of-islands/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/number-of-islands/</a></p>\n<p>207.课程表：<a href=\"https://leetcode.cn/problems/course-schedule/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/course-schedule/</a></p>\n<p>210.课程表 II：<a href=\"https://leetcode.cn/problems/course-schedule-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/course-schedule-ii/</a></p>\n<h2>堆</h2>\n<p>215.数组中的第 K 个最大元素:<a href=\"https://leetcode.cn/problems/kth-largest-element-in-an-array/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/kth-largest-element-in-an-array/</a></p>\n<p>216.数据流的中位数:<a href=\"https://leetcode.cn/problems/find-median-from-data-stream/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/find-median-from-data-stream/</a></p>\n<p>217.前 K 个高频元素：<a href=\"https://leetcode.cn/problems/top-k-frequent-elements/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/top-k-frequent-elements/</a></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "几道常见的链表算法题",
      "url": "https://javaguide.cn/cs-basics/algorithms/linkedlist-algorithm-problems.html",
      "id": "https://javaguide.cn/cs-basics/algorithms/linkedlist-algorithm-problems.html",
      "summary": "1. 两数相加 题目描述 Leetcode:给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。 你可以假设除了数字 0 之外，这两个数字都不会以零开头。 示例： 问题分析 Leetcode 官方详细解答地址： https://leetcode-cn.com/problems/add-tw...",
      "content_html": "<!-- markdownlint-disable MD024 -->\n<h2>1. 两数相加</h2>\n<h3>题目描述</h3>\n<blockquote>\n<p>Leetcode:给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n</blockquote>\n<p>示例：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span></span>\n<span class=\"line\"><span>输出：7 -&gt; 0 -&gt; 8</span></span>\n<span class=\"line\"><span>原因：342 + 465 = 807</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>问题分析</h3>\n<p>Leetcode 官方详细解答地址：</p>\n<p><a href=\"https://leetcode-cn.com/problems/add-two-numbers/solution/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode-cn.com/problems/add-two-numbers/solution/</a></p>\n<blockquote>\n<p>要对头结点进行操作时，考虑创建哑节点 dummy，使用 dummy-&gt;next 表示真正的头节点。这样可以避免处理头节点为空的边界问题。</p>\n</blockquote>\n<p>我们使用变量来跟踪进位，并从包含最低有效位的表头开始模拟逐<br>\n位相加的过程。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/34910956.jpg\" alt=\"图1，对两数相加方法的可视化: 342 + 465 = 807， 每个结点都包含一个数字，并且数字按位逆序存储。\"></p>\n<h3>Solution</h3>\n<p><strong>我们首先从最低有效位也就是列表 l1 和 l2 的表头开始相加。注意需要考虑到进位的情况！</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * Definition for singly-linked list.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * public class ListNode {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     ListNode next;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     ListNode(int x) { val = x; }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> //https://leetcode-cn.com/problems/add-two-numbers/description/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> addTwoNumbers</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> l1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> l2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> dummyHead</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> l1, q </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> l2, curr </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> dummyHead;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //carry 表示进位数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> carry</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (p </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> q </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (p </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">?</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (q </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">?</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> q</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> carry </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> y;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //进位数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        carry </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> sum </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //新节点的数值为sum % 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        curr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(sum </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">%</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        curr </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> curr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (p </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) p </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (q </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) q </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> q</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (carry </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        curr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(carry);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> dummyHead</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>2. 翻转链表</h2>\n<h3>题目描述</h3>\n<blockquote>\n<p>剑指 offer:输入一个链表，反转链表后，输出链表的所有元素。</p>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/81431871.jpg\" alt=\"翻转链表\"></p>\n<h3>问题分析</h3>\n<p>这道算法题，说直白点就是：如何让后一个节点指向前一个节点！在下面的代码中定义了一个 next 节点，该节点主要是保存要反转到头的那个节点，防止链表 “断裂”。</p>\n<h3>Solution</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">  ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> next </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">@author</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> Snailclimb</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * @date 2018年9月19日</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * @Description: TODO</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ReverseList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> pre</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (head </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 保存要反转到头的那个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      next </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 要反转的那个节点指向已经反转的上一个节点(备注:第一次反转的时候会指向null)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> pre;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 上一个已经反转到头部的节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      pre </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> head;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 一直向链表尾走</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      head </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> next;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> pre;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>测试方法：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">[] args) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> c </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> d </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> e </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> c</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    c</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> d</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    d</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ReverseList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(a);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (e </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">      e </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  }</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>5</span></span>\n<span class=\"line\"><span>4</span></span>\n<span class=\"line\"><span>3</span></span>\n<span class=\"line\"><span>2</span></span>\n<span class=\"line\"><span>1</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>3. 链表中倒数第 k 个节点</h2>\n<h3>题目描述</h3>\n<blockquote>\n<p>剑指 offer: 输入一个链表，输出该链表中倒数第 k 个结点。</p>\n</blockquote>\n<h3>问题分析</h3>\n<blockquote>\n<p><strong>链表中倒数第 k 个节点也就是正数第(L-K+1)个节点，知道了只一点，这一题基本就没问题！</strong></p>\n</blockquote>\n<p>首先两个节点/指针，一个节点 node1 先开始跑，指针 node1 跑到 k-1 个节点后，另一个节点 node2 开始跑，当 node1 跑到最后时，node2 所指的节点就是倒数第 k 个节点也就是正数第(L-K+1)个节点。</p>\n<h3>Solution</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">public class ListNode {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode next = null;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode(int val) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        this.val = val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">}*/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 时间复杂度O(n),一次遍历即可</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&amp;tqId=11167&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> FindKthToTail</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> k</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 如果链表为空或者k小于等于0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (head </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> k </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 声明两个指向头结点的节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> node1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> head, node2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> head;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 记录节点的个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 记录k值，后面要使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> index</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> k;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // p指针先跑，并且记录节点数，当node1节点跑了k-1个节点后，node2节点开始跑，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 当node1节点跑到最后时，node2节点所指的节点就是倒数第k个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (node1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      node1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> node1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      count++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (k </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        node2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> node2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      k--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 如果节点个数小于所求的倒数第k个节点，则返回空</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (count </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> index)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> node2;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>4. 删除链表的倒数第 N 个节点</h2>\n<blockquote>\n<p>Leetcode:给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>说明：</strong></p>\n<p>给定的 n 保证是有效的。</p>\n<p><strong>进阶：</strong></p>\n<p>你能尝试使用一趟扫描实现吗？</p>\n<p>该题在 leetcode 上有详细解答，具体可参考 Leetcode.</p>\n<h3>问题分析</h3>\n<p>我们注意到这个问题可以容易地简化成另一个问题：删除从列表开头数起的第 (L - n + 1)个结点，其中 L 是列表的长度。只要我们找到列表的长度 L，这个问题就很容易解决。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/94354387.jpg\" alt=\"图 1. 删除列表中的第 L - n + 1 个元素\"></p>\n<h3>Solution</h3>\n<p><strong>两次遍历法</strong></p>\n<p>首先我们将添加一个 <strong>哑结点</strong> 作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。在第一次遍历中，我们找出列表的长度 L。然后设置一个指向哑结点的指针，并移动它遍历列表，直至它到达第 (L - n) 个结点那里。<strong>我们把第 (L - n)个结点的 next 指针重新链接至第 (L - n + 2)个结点，完成这个算法。</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * Definition for singly-linked list.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * public class ListNode {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     ListNode next;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     ListNode(int x) { val = x; }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/description/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> removeNthFromEnd</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 哑结点，哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> dummy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 哑结点指向头结点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    dummy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> head;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 保存链表长度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> head;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (len </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      length++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      len </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> target</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> dummy;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 找到 L-n 位置的节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      target </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> target</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      length--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 把第 (L - n)个结点的 next 指针重新链接至第 (L - n + 2)个结点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    target</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> target</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> dummy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>进阶——一次遍历法：</strong></p>\n<blockquote>\n<p>链表中倒数第 N 个节点也就是正数第(L - n + 1)个节点。</p>\n</blockquote>\n<p>其实这种方法就和我们上面第四题找“链表中倒数第 k 个节点”所用的思想是一样的。<strong>基本思路就是：</strong> 定义两个节点 node1、node2;node1 节点先跑，node1 节点 跑到第 n+1 个节点的时候,node2 节点开始跑.当 node1 节点跑到最后一个节点时，node2 节点所在的位置就是第 （L - n ） 个节点（L 代表总链表长度，也就是倒数第 n + 1 个节点）</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * Definition for singly-linked list.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * public class ListNode {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     ListNode next;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *     ListNode(int x) { val = x; }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> removeNthFromEnd</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> dummy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    dummy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> head;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 声明两个指向头结点的节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> node1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> dummy, node2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> dummy;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // node1 节点先跑，node1节点 跑到第 n 个节点的时候,node2 节点开始跑</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 当node1 节点跑到最后一个节点时，node2 节点所在的位置就是第 （L-n ） 个节点，也就是倒数第 n+1（L代表总链表长度）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (node1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      node1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> node1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (n </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> node1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        node2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> node2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      n--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    node2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> node2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> dummy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>5. 合并两个排序的链表</h2>\n<h3>题目描述</h3>\n<blockquote>\n<p>剑指 offer:输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n</blockquote>\n<h3>问题分析</h3>\n<p>我们可以这样分析:</p>\n<ol>\n<li>假设我们有两个链表 A,B；</li>\n<li>A 的头节点 A1 的值与 B 的头结点 B1 的值比较，假设 A1 小，则 A1 为头节点；</li>\n<li>A2 再和 B1 比较，假设 B1 小,则，A1 指向 B1；</li>\n<li>A2 再和 B2 比较<br>\n就这样循环往复就行了，应该还算好理解。</li>\n</ol>\n<p>考虑通过递归的方式实现！</p>\n<h3>Solution</h3>\n<p><strong>递归版本：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">public class ListNode {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode next = null;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode(int val) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        this.val = val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">}*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&amp;tqId=11169&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Merge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (list1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (list2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list1;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Merge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, list2);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list1;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Merge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(list1, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/34910956.jpg",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "几道常见的字符串算法题",
      "url": "https://javaguide.cn/cs-basics/algorithms/string-algorithm-problems.html",
      "id": "https://javaguide.cn/cs-basics/algorithms/string-algorithm-problems.html",
      "summary": "作者：wwwxmu 原文地址:https://www.weiweiblog.cn/13string/ 1. KMP 算法 谈到字符串问题，不得不提的就是 KMP 算法，它是用来解决字符串查找的问题，可以在一个字符串（S）中查找一个子串（W）出现的位置。KMP 算法把字符匹配的时间复杂度缩小到 O(m+n) ,而空间复杂度也只有 O(m)。因为“暴力搜索...",
      "content_html": "<blockquote>\n<p>作者：wwwxmu</p>\n<p>原文地址:<a href=\"https://www.weiweiblog.cn/13string/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.weiweiblog.cn/13string/</a></p>\n</blockquote>\n<h2>1. KMP 算法</h2>\n<p>谈到字符串问题，不得不提的就是 KMP 算法，它是用来解决字符串查找的问题，可以在一个字符串（S）中查找一个子串（W）出现的位置。KMP 算法把字符匹配的时间复杂度缩小到 O(m+n) ,而空间复杂度也只有 O(m)。因为“暴力搜索”的方法会反复回溯主串，导致效率低下，而 KMP 算法可以利用已经部分匹配这个有效信息，保持主串上的指针不回溯，通过修改子串的指针，让模式串尽量地移动到有效的位置。</p>\n<p>具体算法细节请参考：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/v_july_v/article/details/7041827\" target=\"_blank\" rel=\"noopener noreferrer\">从头到尾彻底理解 KMP:</a></li>\n<li><a href=\"https://www.zhihu.com/question/21923021\" target=\"_blank\" rel=\"noopener noreferrer\">如何更好的理解和掌握 KMP 算法?</a></li>\n<li><a href=\"https://blog.sengxian.com/algorithms/kmp\" target=\"_blank\" rel=\"noopener noreferrer\">KMP 算法详细解析</a></li>\n<li><a href=\"http://blog.jobbole.com/76611/\" target=\"_blank\" rel=\"noopener noreferrer\">图解 KMP 算法</a></li>\n<li><a href=\"https://www.bilibili.com/video/av3246487/?from=search&amp;seid=17173603269940723925\" target=\"_blank\" rel=\"noopener noreferrer\">汪都能听懂的 KMP 字符串匹配算法【双语字幕】</a></li>\n<li><a href=\"https://www.bilibili.com/video/av11866460?from=search&amp;seid=12730654434238709250\" target=\"_blank\" rel=\"noopener noreferrer\">KMP 字符串匹配算法 1</a></li>\n</ul>\n<p><strong>除此之外，再来了解一下 BM 算法！</strong></p>\n<blockquote>\n<p>BM 算法也是一种精确字符串匹配算法，它采用从右向左比较的方法，同时应用到了两种启发式规则，即坏字符规则 和好后缀规则 ，来决定向右跳跃的距离。基本思路就是从右往左进行字符匹配，遇到不匹配的字符后从坏字符表和好后缀表找一个最大的右移值，将模式串右移继续匹配。<br>\n《字符串匹配的 KMP 算法》:<a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html</a></p>\n</blockquote>\n<h2>2. 替换空格</h2>\n<blockquote>\n<p>剑指 offer：请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为 We Are Happy.则经过替换之后的字符串为 We%20Are%20Happy。</p>\n</blockquote>\n<p>这里我提供了两种方法：① 常规方法；② 利用 API 解决。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//https://www.weiweiblog.cn/replacespace/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">   * 第一种方法：常规方法。利用String.charAt(i)以及String.valueOf(char).equals(\" \"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">   * )遍历字符串并判断元素是否为空格。是则替换为\"%20\",否则不替换</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">   */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> replaceSpace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">StringBuffer</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // System.out.println(\"length=\" + length);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    StringBuffer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> StringBuffer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> length; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(i);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">valueOf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(b).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">equals</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\" \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"%20\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(b);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">   * 第二种方法：利用API替换掉所用空格，一行代码解决问题</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">   */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> replaceSpace2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">StringBuffer</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replaceAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\\</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">s\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"%20\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于替换固定字符（比如空格）的情况，第二种方法其实可以使用 <code>replace</code> 方法替换，性能更好!</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\" \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"%20\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h2>3. 最长公共前缀</h2>\n<blockquote>\n<p>Leetcode: 编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 \"\"。</p>\n</blockquote>\n<p>示例 1:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入: [\"flower\",\"flow\",\"flight\"]</span></span>\n<span class=\"line\"><span>输出: \"fl\"</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>示例 2:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入: [\"dog\",\"racecar\",\"car\"]</span></span>\n<span class=\"line\"><span>输出: \"\"</span></span>\n<span class=\"line\"><span>解释: 输入不存在公共前缀。</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>思路很简单！先利用 Arrays.sort(strs)为数组排序，再将数组第一个元素和最后一个元素的字符从前往后对比即可！</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> replaceSpace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">strs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 如果检查值不合法及就返回空串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">checkStrs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(strs)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 数组长度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> strs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 用于保存结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">  StringBuilder</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> StringBuilder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 给字符串数组的元素按照升序排序(包含数字的话，数字会排在前面)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  Arrays</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sort</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(strs);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> m</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> strs[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">].</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> strs[len </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">].</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> num</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Math</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">min</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(m, n);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> num; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (strs[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">].</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(i) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> strs[len </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">].</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(i)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(strs[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">].</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(i));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">   } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    break</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> checkStrs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">strs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  boolean</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> flag</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (strs </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">   // 遍历strs检查元素值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> strs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (strs[i] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> strs[i].</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">     flag </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">     flag </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     break</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">   }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> flag;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 测试</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">  String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">strs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"customer\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"car\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"cat\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // String[] strs = { \"customer\", \"car\", null };//空串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // String[] strs = {};//空串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // String[] strs = null;//空串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replaceSpace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(strs));</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// c</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>4. 回文串</h2>\n<h3>4.1. 最长回文串</h3>\n<blockquote>\n<p>LeetCode: 给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如<code>\"Aa\"</code>不能当做一个回文字符串。注<br>\n意:假设字符串的长度不会超过 1010。</p>\n<p>回文串：“回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。——百度百科 地址：<a href=\"https://baike.baidu.com/item/%E5%9B%9E%E6%96%87%E4%B8%B2/1274921?fr=aladdin\" target=\"_blank\" rel=\"noopener noreferrer\">https://baike.baidu.com/item/回文串/1274921?fr=aladdin</a></p>\n</blockquote>\n<p>示例 1:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入:</span></span>\n<span class=\"line\"><span>\"abccccdd\"</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>输出:</span></span>\n<span class=\"line\"><span>7</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>解释:</span></span>\n<span class=\"line\"><span>我们可以构造的最长的回文串是\"dccaccd\", 它的长度是 7。</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们上面已经知道了什么是回文串？现在我们考虑一下可以构成回文串的两种情况：</p>\n<ul>\n<li>字符出现次数为双数的组合</li>\n<li><strong>字符出现次数为偶数的组合+单个字符中出现次数最多且为奇数次的字符</strong> （参见 <strong><a href=\"https://github.com/Snailclimb/JavaGuide/issues/665\" target=\"_blank\" rel=\"noopener noreferrer\">issue665</a></strong> ）</li>\n</ul>\n<p>统计字符出现的次数即可，双数才能构成回文。因为允许中间一个数单独出现，比如“abcba”，所以如果最后有字母落单，总长度可以加 1。首先将字符串转变为字符数组。然后遍历该数组，判断对应字符是否在 hashset 中，如果不在就加进去，如果在就让 count++，然后移除该字符！这样就能找到出现次数为双数的字符个数。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//https://leetcode-cn.com/problems/longest-palindrome/description/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> longestPalindrome</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 用于存放字符</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    HashSet</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">hashset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> HashSet</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">chars</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toCharArray</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> chars</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">hashset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(chars[i])) {</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 如果hashset没有该字符就保存进去</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        hashset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(chars[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 如果有,就让count++（说明找到了一个成对的字符），然后把该字符移除</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        hashset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remove</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(chars[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        count++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> hashset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isEmpty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> count </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> count </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>4.2. 验证回文串</h3>\n<blockquote>\n<p>LeetCode: 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。</p>\n</blockquote>\n<p>示例 1:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入: \"A man, a plan, a canal: Panama\"</span></span>\n<span class=\"line\"><span>输出: true</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>示例 2:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入: \"race a car\"</span></span>\n<span class=\"line\"><span>输出: false</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//https://leetcode-cn.com/problems/valid-palindrome/description/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> isPalindrome</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> l</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, r </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (l </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> r) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 从头和尾开始向中间遍历</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isLetterOrDigit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(l))) {</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 字符不是字母和数字的情况</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        l++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isLetterOrDigit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(r))) {</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 字符不是字母和数字的情况</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        r--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 判断二者是否相等</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toLowerCase</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(l)) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toLowerCase</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(r)))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">          return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        l++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        r--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>4.3. 最长回文子串</h3>\n<blockquote>\n<p>Leetcode: LeetCode: 最长回文子串 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>\n</blockquote>\n<p>示例 1：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入: \"babad\"</span></span>\n<span class=\"line\"><span>输出: \"bab\"</span></span>\n<span class=\"line\"><span>注意: \"aba\"也是一个有效答案。</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>示例 2：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入: \"cbbd\"</span></span>\n<span class=\"line\"><span>输出: \"bb\"</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以某个元素为中心，分别计算偶数长度的回文最大长度和奇数长度的回文最大长度。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//https://leetcode-cn.com/problems/longest-palindromic-substring/description/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> index</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> longestPalindrome</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">      PalindromeHelper</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s, i, i);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">      PalindromeHelper</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s, i, i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">substring</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(index, index </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> len);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PalindromeHelper</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> l</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (l </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> r </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(l) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(r)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      l--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      r++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (len </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> r </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> l </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      index </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> l </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      len </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> r </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> l </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>4.4. 最长回文子序列</h3>\n<blockquote>\n<p>LeetCode: 最长回文子序列<br>\n给定一个字符串 s，找到其中最长的回文子序列。可以假设 s 的最大长度为 1000。<br>\n<strong>最长回文子序列和上一题最长回文子串的区别是，子串是字符串中连续的一个序列，而子序列是字符串中保持相对位置的字符序列，例如，\"bbbb\"可以是字符串\"bbbab\"的子序列但不是子串。</strong></p>\n</blockquote>\n<p>给定一个字符串 s，找到其中最长的回文子序列。可以假设 s 的最大长度为 1000。</p>\n<p>示例 1:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入:</span></span>\n<span class=\"line\"><span>\"bbbab\"</span></span>\n<span class=\"line\"><span>输出:</span></span>\n<span class=\"line\"><span>4</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>一个可能的最长回文子序列为 \"bbbb\"。</p>\n<p>示例 2:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入:</span></span>\n<span class=\"line\"><span>\"cbbd\"</span></span>\n<span class=\"line\"><span>输出:</span></span>\n<span class=\"line\"><span>2</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>一个可能的最长回文子序列为 \"bb\"。</p>\n<p><strong>动态规划：</strong> <code>dp[i][j] = dp[i+1][j-1] + 2 if s.charAt(i) == s.charAt(j) otherwise, dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1])</code></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> longestPalindromeSubseq</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\"> [][] </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[len][len];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> len </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i--){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            dp[i][i] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> j</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; j </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> len; j++){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(i) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(j))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    dp[i][j] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> dp[i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">][j</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    dp[i][j] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Math</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">max</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(dp[i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">][j], dp[i][j</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> dp[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">][len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>5. 括号匹配深度</h2>\n<blockquote>\n<p>爱奇艺 2018 秋招 Java：<br>\n一个合法的括号匹配序列有以下定义:</p>\n<ol>\n<li>空串\"\"是一个合法的括号匹配序列</li>\n<li>如果\"X\"和\"Y\"都是合法的括号匹配序列,\"XY\"也是一个合法的括号匹配序列</li>\n<li>如果\"X\"是一个合法的括号匹配序列,那么\"(X)\"也是一个合法的括号匹配序列</li>\n<li>每个合法的括号序列都可以由以上规则生成。</li>\n</ol>\n<p>例如: \"\",\"()\",\"()()\",\"((()))\"都是合法的括号序列<br>\n对于一个合法的括号序列我们又有以下定义它的深度:</p>\n<ol>\n<li>空串\"\"的深度是 0</li>\n<li>如果字符串\"X\"的深度是 x,字符串\"Y\"的深度是 y,那么字符串\"XY\"的深度为 max(x,y)</li>\n<li>如果\"X\"的深度是 x,那么字符串\"(X)\"的深度是 x+1</li>\n</ol>\n<p>例如: \"()()()\"的深度是 1,\"((()))\"的深度是 3。牛牛现在给你一个合法的括号序列,需要你计算出其深度。</p>\n</blockquote>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入描述:</span></span>\n<span class=\"line\"><span>输入包括一个合法的括号序列s,s长度length(2 ≤ length ≤ 50),序列中只包含'('和')'。</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>输出描述:</span></span>\n<span class=\"line\"><span>输出一个正整数,即这个序列的深度。</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>示例：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>输入:</span></span>\n<span class=\"line\"><span>(())</span></span>\n<span class=\"line\"><span>输出:</span></span>\n<span class=\"line\"><span>2</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>代码如下：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.Scanner</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * https://www.nowcoder.com/test/8246651/summary</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * </span><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">@author</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> Snailclimb</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * @date 2018年9月6日</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> * @Description: TODO 求给定合法括号序列的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    Scanner</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sc</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Scanner</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> sc</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nextLine</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> cnt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, max </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, i;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(); ++i) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(i) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '('</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        cnt++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        cnt--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      max </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Math</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">max</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(max, cnt);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    sc</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">close</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(max);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>6. 把字符串转换成整数</h2>\n<blockquote>\n<p>剑指 offer: 将一个字符串转换成一个整数(实现 Integer.valueOf(string)的功能，但是 string 不符合数字要求时返回 0)，要求不能使用字符串转换整数的库函数。 数值为 0 或者字符串不是一个合法的数值则返回 0。</p>\n</blockquote>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//https://www.weiweiblog.cn/strtoint/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> StrToInt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">chars</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toCharArray</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 判断是否存在符号位</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> flag</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (chars[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '+'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      flag </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (chars[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '-'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      flag </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> start</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> flag </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 保存结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> start; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> chars</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isDigit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(chars[i])) {</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 调用Character.isDigit(char)方法判断是否是数字，是返回True，否则False</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> temp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> chars[i] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '0'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        res </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> res </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> temp;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> flag </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> res </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">res;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // TODO Auto-generated method stub</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"-12312312\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"使用库函数转换：\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">valueOf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">StrToInt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"使用自己写的方法转换：\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> res);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "剑指offer部分编程题",
      "url": "https://javaguide.cn/cs-basics/algorithms/the-sword-refers-to-offer.html",
      "id": "https://javaguide.cn/cs-basics/algorithms/the-sword-refers-to-offer.html",
      "summary": "斐波那契数列 题目描述： 大家都知道斐波那契数列，现在要求输入一个整数 n，请你输出斐波那契数列的第 n 项。 n<=39 问题分析： 可以肯定的是这一题通过递归的方式是肯定能做出来，但是这样会有一个很大的问题，那就是递归大量的重复计算会导致内存溢出。另外可以使用迭代法，用 fn1 和 fn2 保存计算过程中的结果，并复用起来。下面我会把两个方法示例代...",
      "content_html": "<h2>斐波那契数列</h2>\n<p><strong>题目描述：</strong></p>\n<p>大家都知道斐波那契数列，现在要求输入一个整数 n，请你输出斐波那契数列的第 n 项。<br>\nn&lt;=39</p>\n<p><strong>问题分析：</strong></p>\n<p>可以肯定的是这一题通过递归的方式是肯定能做出来，但是这样会有一个很大的问题，那就是递归大量的重复计算会导致内存溢出。另外可以使用迭代法，用 fn1 和 fn2 保存计算过程中的结果，并复用起来。下面我会把两个方法示例代码都给出来并给出两个方法的运行时间对比。</p>\n<p><strong>示例代码：</strong></p>\n<p>采用迭代法：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Fibonacci</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> number) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> first </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> second </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> third </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        third </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> first </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> second</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        first </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> second</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        second </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> third</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> third</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>采用递归：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Fibonacci</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (n </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (n </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">||</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Fibonacci</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(n </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Fibonacci</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(n </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>跳台阶问题</h2>\n<p><strong>题目描述：</strong></p>\n<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>\n<p><strong>问题分析：</strong></p>\n<p>正常分析法：</p>\n<blockquote>\n<p>a.如果两种跳法，1 阶或者 2 阶，那么假定第一次跳的是一阶，那么剩下的是 n-1 个台阶，跳法是 f(n-1);<br>\nb.假定第一次跳的是 2 阶，那么剩下的是 n-2 个台阶，跳法是 f(n-2)<br>\nc.由 a，b 假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)<br>\nd.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2</p>\n</blockquote>\n<p>找规律分析法：</p>\n<blockquote>\n<p>f(1) = 1, f(2) = 2, f(3) = 3, f(4) = 5， 可以总结出 f(n) = f(n-1) + f(n-2)的规律。但是为什么会出现这样的规律呢？假设现在 6 个台阶，我们可以从第 5 跳一步到 6，这样的话有多少种方案跳到 5 就有多少种方案跳到 6，另外我们也可以从 4 跳两步跳到 6，跳到 4 有多少种方案的话，就有多少种方案跳到 6，其他的不能从 3 跳到 6 什么的啦，所以最后就是 f(6) = f(5) + f(4)；这样子也很好理解变态跳台阶的问题了。</p>\n</blockquote>\n<p><strong>所以这道题其实就是斐波那契数列的问题。</strong></p>\n<p>代码只需要在上一题的代码稍做修改即可。和上一题唯一不同的就是这一题的初始元素变为 1 2 3 5 8……而上一题为 1 1 2 3 5 ……。另外这一题也可以用递归做，但是递归效率太低，所以我这里只给出了迭代方式的代码。</p>\n<p><strong>示例代码：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> jumpFloor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> number) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> first </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> second </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> third </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        third </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> first </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> second</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        first </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> second</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        second </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> third</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> third</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>变态跳台阶问题</h2>\n<p><strong>题目描述：</strong></p>\n<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级……它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>\n<p><strong>问题分析：</strong></p>\n<p>假设 n&gt;=2，第一步有 n 种跳法：跳 1 级、跳 2 级、到跳 n 级<br>\n跳 1 级，剩下 n-1 级，则剩下跳法是 f(n-1)<br>\n跳 2 级，剩下 n-2 级，则剩下跳法是 f(n-2)<br>\n……<br>\n跳 n-1 级，剩下 1 级，则剩下跳法是 f(1)<br>\n跳 n 级，剩下 0 级，则剩下跳法是 f(0)<br>\n所以在 n&gt;=2 的情况下：<br>\nf(n)=f(n-1)+f(n-2)+...+f(1)<br>\n因为 f(n-1)=f(n-2)+f(n-3)+...+f(1)<br>\n所以 f(n)=2*f(n-1) 又 f(1)=1,所以可得<strong>f(n)=2^(number-1)</strong></p>\n<p><strong>示例代码：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> JumpFloorII</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> number) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> --</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//2^(number-1)用位移操作进行，更快</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>补充：</strong></p>\n<p>java 中有三种移位运算符：</p>\n<ol>\n<li>“&lt;&lt;” : <strong>左移运算符</strong>，等同于乘 2 的 n 次方</li>\n<li>“&gt;&gt;”: <strong>右移运算符</strong>，等同于除 2 的 n 次方</li>\n<li>“&gt;&gt;&gt;” : <strong>无符号右移运算符</strong>，不管移动前最高位是 0 还是 1，右移后左侧产生的空位部分都以 0 来填充。与&gt;&gt;类似。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 16</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//左移2，等同于16 * 2的2次方，也就是16 * 4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> c </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//右移2，等同于16 / 2的2次方，也就是16 / 4</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>二维数组查找</h2>\n<p><strong>题目描述：</strong></p>\n<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>问题解析：</strong></p>\n<p>这一道题还是比较简单的，我们需要考虑的是如何做，效率最快。这里有一种很好理解的思路：</p>\n<blockquote>\n<p>矩阵是有序的，从左下角来看，向上数字递减，向右数字递增，<br>\n因此从左下角开始查找，当要查找数字比左下角数字大时。右移<br>\n要查找数字比左下角数字小时，上移。这样找的速度最快。</p>\n</blockquote>\n<p><strong>示例代码：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Find</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> target</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> [][] array) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //基本思路从左下角开始找，这样速度最快</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> row </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//行</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> column </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //当行数大于0，当前列数小于总列数时循环条件成立</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">((row </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (column</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> array[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(array[row][column] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> target){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">            row</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(array[row][column] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> target){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">            column</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>替换空格</h2>\n<p><strong>题目描述：</strong></p>\n<p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为 We Are Happy.则经过替换之后的字符串为 We%20Are%20Happy。</p>\n<p><strong>问题分析：</strong></p>\n<p>这道题不难，我们可以通过循环判断字符串的字符是否为空格，是的话就利用 append()方法添加追加“%20”，否则还是追加原字符。</p>\n<p>或者最简单的方法就是利用：replaceAll(String regex,String replacement)方法了，一行代码就可以解决。</p>\n<p><strong>示例代码：</strong></p>\n<p>常规做法：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> replaceSpace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">StringBuffer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> str) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    StringBuffer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> out </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> StringBuffer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">charAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(i);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">valueOf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(b).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">equals</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\" \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"%20\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(b);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>一行代码解决：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> replaceSpace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">StringBuffer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> str) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //return str.toString().replaceAll(\" \", \"%20\");</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //public String replaceAll(String regex,String replacement)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //用给定的替换替换与给定的regular expression匹配的此字符串的每个子字符串。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //\\ 转义字符. 如果你要使用 \"\\\" 本身, 则应该使用 \"\\\\\". String类型中的空格用“\\s”表示，所以我这里猜测\"\\\\s\"就是代表空格的意思</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replaceAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\\</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">s\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"%20\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>数值的整数次方</h2>\n<p><strong>题目描述：</strong></p>\n<p>给定一个 double 类型的浮点数 base 和 int 类型的整数 exponent。求 base 的 exponent 次方。</p>\n<p><strong>问题解析：</strong></p>\n<p>这道题算是比较麻烦和难一点的一个了。我这里采用的是<strong>二分幂</strong>思想，当然也可以采用<strong>快速幂</strong>。<br>\n更具剑指 offer 书中细节，该题的解题思路如下：1.当底数为 0 且指数&lt;0 时，会出现对 0 求倒数的情况，需进行错误处理，设置一个全局变量； 2.判断底数是否等于 0，由于 base 为 double 型，所以不能直接用==判断 3.优化求幂函数（二分幂）。<br>\n当 n 为偶数，a^n =（a^n/2）<em>（a^n/2）；<br>\n当 n 为奇数，a^n = a<sup class=\"footnote-ref\"><a href=\"#footnote1\">[1]</a><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a></sup></em><a class=\"footnote-anchor\" id=\"footnote-ref1\"> a<sup class=\"footnote-ref\"></sup></a><a href=\"#footnote2\">[2]</a><a class=\"footnote-anchor\" id=\"footnote-ref2\"> * a。时间复杂度 O(logn)</a></p><a class=\"footnote-anchor\" id=\"footnote-ref2\">\n<p><strong>时间复杂度</strong>：O(logn)</p>\n<p><strong>示例代码：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      boolean</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> invalidInput</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> double</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Power</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">double</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> base</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> exponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">          //如果底数等于0并且指数小于0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">          //由于base为double型，不能直接用==判断</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">equal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(base,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">exponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            invalidInput</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> absexponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">exponent;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         //如果指数小于0，将指数转正</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(exponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            absexponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">exponent;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         //getPower方法求出base的exponent次方。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        double</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getPower</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(base,absexponent);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         //如果指数小于0，所得结果为上面求的结果的倒数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(exponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //比较两个double型变量是否相等的方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> equal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">double</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> num1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">double</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> num2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(num1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">num2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0.000001</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">num1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">num2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0.000001</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //求出b的e次方的方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    double</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> getPower</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">double</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //如果指数为0，返回1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //如果指数为1，返回b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> b;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //e&gt;&gt;1相等于e/2，这里就是求a^n =（a^n/2）*（a^n/2）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        double</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getPower</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(b,e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">result;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //如果指数n为奇数，则要再乘一次底数base</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((e</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">b;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> result;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然这一题也可以采用笨方法：累乘。不过这种方法的时间复杂度为 O（n），这样没有前一种方法效率高。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 使用累乘</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> double</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> powerAnother</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">double</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> base</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> exponent) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    double</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> result </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Math</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(exponent);</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        result </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> base</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (exponent </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> /</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></a><h2><a class=\"footnote-anchor\" id=\"footnote-ref2\"></a><a class=\"header-anchor\" href=\"#调整数组顺序使奇数位于偶数前面\"><span>调整数组顺序使奇数位于偶数前面</span></a></h2>\n<p><strong>题目描述：</strong></p>\n<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n<p><strong>问题解析：</strong></p>\n<p>这道题有挺多种解法的，给大家介绍一种我觉得挺好理解的方法：<br>\n我们首先统计奇数的个数假设为 n,然后新建一个等长数组，然后通过循环判断原数组中的元素为偶数还是奇数。如果是则从数组下标 0 的元素开始，把该奇数添加到新数组；如果是偶数则从数组下标为 n 的元素开始把该偶数添加到新数组中。</p>\n<p><strong>示例代码：</strong></p>\n<p>时间复杂度为 O（n），空间复杂度为 O（n）的算法</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> reOrderArray</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //如果数组长度等于0或者等于1，什么都不做直接返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">||</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //oddCount：保存奇数个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //oddBegin：奇数从数组头部开始添加</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> oddCount</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,oddBegin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //新建一个数组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">newArray</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //计算出（数组中的奇数个数）开始添加元素</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;i++){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((array[i]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) oddCount++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;i++){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            //如果数为基数新数组从头开始添加元素</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            //如果为偶数就从oddCount（数组中的奇数个数）开始添加元素</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((array[i]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                newArray[oddBegin++]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">array[i];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> newArray[oddCount++]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">array[i];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;i++){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            array[i]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">newArray[i];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>链表中倒数第 k 个节点</h2>\n<p><strong>题目描述：</strong></p>\n<p>输入一个链表，输出该链表中倒数第 k 个结点</p>\n<p><strong>问题分析：</strong></p>\n<p><strong>一句话概括：</strong><br>\n两个指针一个指针 p1 先开始跑，指针 p1 跑到 k-1 个节点后，另一个节点 p2 开始跑，当 p1 跑到最后时，p2 所指的指针就是倒数第 k 个节点。</p>\n<p><strong>思想的简单理解：</strong><br>\n前提假设：链表的结点个数(长度)为 n。<br>\n规律一：要找到倒数第 k 个结点，需要向前走多少步呢？比如倒数第一个结点，需要走 n 步，那倒数第二个结点呢？很明显是向前走了 n-1 步，所以可以找到规律是找到倒数第 k 个结点，需要向前走 n-k+1 步。</p>\n<p><strong>算法开始：</strong></p>\n<ol>\n<li>设两个都指向 head 的指针 p1 和 p2，当 p1 走了 k-1 步的时候，停下来。p2 之前一直不动。</li>\n<li>p1 的下一步是走第 k 步，这个时候，p2 开始一起动了。至于为什么 p2 这个时候动呢？看下面的分析。</li>\n<li>当 p1 走到链表的尾部时，即 p1 走了 n 步。由于我们知道 p2 是在 p1 走了 k-1 步才开始动的，也就是说 p1 和 p2 永远差 k-1 步。所以当 p1 走了 n 步时，p2 走的应该是在 n-(k-1)步。即 p2 走了 n-k+1 步，此时巧妙的是 p2 正好指向的是规律一的倒数第 k 个结点处。<br>\n这样是不是很好理解了呢？</li>\n</ol>\n<p><strong>考察内容：</strong></p>\n<p>链表+代码的鲁棒性</p>\n<p><strong>示例代码：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//链表类</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">public class ListNode {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode next = null;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode(int val) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        this.val = val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">}*/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//时间复杂度O(n),一次遍历即可</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> FindKthToTail</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> k</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> pre</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //两个指针都指向头结点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">head;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        pre</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">head;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //记录k值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">k;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //记录节点的个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //p指针先跑，并且记录节点数，当p指针跑了k-1个节点后，pre指针开始跑，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //当p指针跑到最后时，pre所指指针就是倒数第k个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            count++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(k</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                pre</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">pre</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            k--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //如果节点个数小于所求的倒数第k个节点，则返回空</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">a) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> pre;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>反转链表</h2>\n<p><strong>题目描述：</strong></p>\n<p>输入一个链表，反转链表后，输出链表的所有元素。</p>\n<p><strong>问题分析：</strong></p>\n<p>链表的很常规的一道题，这一道题思路不算难，但自己实现起来真的可能会感觉无从下手，我是参考了别人的代码。<br>\n思路就是我们根据链表的特点，前一个节点指向下一个节点的特点，把后面的节点移到前面来。<br>\n就比如下图：我们把 1 节点和 2 节点互换位置，然后再将 3 节点指向 2 节点，4 节点指向 3 节点，这样以来下面的链表就被反转了。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/844773c7300e4373922bb1a6ae2a55a3~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"链表\"></p>\n<p><strong>考察内容：</strong></p>\n<p>链表+代码的鲁棒性</p>\n<p><strong>示例代码：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">public class ListNode {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode next = null;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode(int val) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        this.val = val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">}*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ReverseList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">       ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">       ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> pre</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (head </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">              //保存要反转到头来的那个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">               next </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">               //要反转的那个节点指向已经反转的上一个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">               head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> pre;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">               //上一个已经反转到头部的节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">               pre </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> head;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">               //一直向链表尾走</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">               head </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> next;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> pre;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>合并两个排序的链表</h2>\n<p><strong>题目描述：</strong></p>\n<p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n<p><strong>问题分析：</strong></p>\n<p>我们可以这样分析:</p>\n<ol>\n<li>假设我们有两个链表 A,B；</li>\n<li>A 的头节点 A1 的值与 B 的头结点 B1 的值比较，假设 A1 小，则 A1 为头节点；</li>\n<li>A2 再和 B1 比较，假设 B1 小,则，A1 指向 B1；</li>\n<li>A2 再和 B2 比较。。。。。。。<br>\n就这样循环往复就行了，应该还算好理解。</li>\n</ol>\n<p><strong>考察内容：</strong></p>\n<p>链表+代码的鲁棒性</p>\n<p><strong>示例代码：</strong></p>\n<p>非递归版本：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">public class ListNode {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode next = null;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    ListNode(int val) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        this.val = val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">}*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Merge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">       //list1为空，直接返回list2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">       if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(list1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //list2为空，直接返回list1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(list2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list1;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> mergeHead</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        ListNode</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> current</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //当list1和list2不为空时</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            //取较小值作头结点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(mergeHead </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                   mergeHead </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> current </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list1;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                   current</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list1;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                    //current节点保存list1节点的值因为下一次还要用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                   current </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list1;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                //list1指向下一个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                list1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(mergeHead </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                   mergeHead </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> current </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                   current</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                     //current节点保存list2节点的值因为下一次还要用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                   current </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                //list2指向下一个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                list2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(list1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            current</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            current</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> list1;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> mergeHead;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>递归版本：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListNode</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Merge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> list2) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(list1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(list2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Merge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> list2)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Merge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(list1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> list2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>用两个栈实现队列</h2>\n<p><strong>题目描述：</strong></p>\n<p>用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作。 队列中的元素为 int 类型。</p>\n<p><strong>问题分析：</strong></p>\n<p>先来回顾一下栈和队列的基本特点：<br>\n**栈：**后进先出（LIFO）<br>\n<strong>队列：</strong> 先进先出<br>\n很明显我们需要根据 JDK 给我们提供的栈的一些基本方法来实现。先来看一下 Stack 类的一些基本方法：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/5985000.jpg\" alt=\"Stack类的一些常见方法\"></p>\n<p>既然题目给了我们两个栈，我们可以这样考虑当 push 的时候将元素 push 进 stack1，pop 的时候我们先把 stack1 的元素 pop 到 stack2，然后再对 stack2 执行 pop 操作，这样就可以保证是先进先出的。（负[pop]负[pop]得正[先进先出]）</p>\n<p><strong>考察内容：</strong></p>\n<p>队列+栈</p>\n<p>示例代码：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//左程云的《程序员代码面试指南》的答案</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.Stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    Stack</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> stack1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    Stack</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> stack2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //当执行push操作时，将元素添加到stack1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> node</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        stack1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(node);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //如果两个队列都为空则抛出异常,说明用户没有push进任何元素</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">stack1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">empty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">stack2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">empty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            throw</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RuntimeException</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Queue is empty!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //如果stack2不为空直接对stack2执行pop操作，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">stack2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">empty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">stack1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">empty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                //将stack1的元素按后进先出push进stack2里面</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                stack2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">stack1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">          return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> stack2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>栈的压入,弹出序列</h2>\n<p><strong>题目描述：</strong></p>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列 1,2,3,4,5 是某栈的压入顺序，序列 4，5,3,2,1 是该压栈序列对应的一个弹出序列，但 4,3,5,1,2 就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>\n<p><strong>题目分析：</strong></p>\n<p>这道题想了半天没有思路，参考了 <a href=\"https://www.nowcoder.com/questionTerminal/d77d11405cc7470d82554cb392585106\" target=\"_blank\" rel=\"noopener noreferrer\">Alias 的答案</a>，他的思路写的也很详细应该很容易看懂。</p>\n<p>【思路】借用一个辅助的栈，遍历压栈顺序，先讲第一个放入栈中，这里是 1，然后判断栈顶元素是不是出栈顺序的第一个元素，这里是 4，很显然 1≠4，所以我们继续压栈，直到相等以后开始出栈，出栈一个元素，则将出栈顺序向后移动一位，直到不相等，这样循环等压栈顺序遍历完成，如果辅助栈还不为空，说明弹出序列不是该栈的弹出顺序。</p>\n<p>举例：</p>\n<p>入栈 1,2,3,4,5</p>\n<p>出栈 4,5,3,2,1</p>\n<p>首先 1 入辅助栈，此时栈顶 1≠4，继续入栈 2</p>\n<p>此时栈顶 2≠4，继续入栈 3</p>\n<p>此时栈顶 3≠4，继续入栈 4</p>\n<p>此时栈顶 4 ＝ 4，出栈 4，弹出序列向后一位，此时为 5，,辅助栈里面是 1,2,3</p>\n<p>此时栈顶 3≠5，继续入栈 5</p>\n<p>此时栈顶 5=5，出栈 5,弹出序列向后一位，此时为 3，,辅助栈里面是 1,2,3</p>\n<p>…….<br>\n依次执行，最后辅助栈为空。如果不为空说明弹出序列不是该栈的弹出顺序。</p>\n<p><strong>考察内容：</strong></p>\n<p>栈</p>\n<p><strong>示例代码：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.ArrayList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.Stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//这道题没想出来，参考了Alias同学的答案：https://www.nowcoder.com/questionTerminal/d77d11405cc7470d82554cb392585106</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IsPopOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">pushA</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">popA</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">pushA</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> popA</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        Stack</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        //用于标识弹出序列的位置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> popIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> pushA</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;i++){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(pushA[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            //如果栈不为空，且栈顶元素等于弹出序列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">empty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">peek</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> popA[popIndex]){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                //出栈</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                //弹出序列向后一位</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                popIndex++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">empty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"footnote1\" class=\"footnote-item\"><p>(n-1)/2 <a href=\"#footnote-ref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"footnote2\" class=\"footnote-item\"><p>(n-1)/2 <a href=\"#footnote-ref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
      "image": "https://oss.javaguide.cn/p3-juejin/844773c7300e4373922bb1a6ae2a55a3~tplv-k3u1fbpfcp-zoom-1.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "布隆过滤器",
      "url": "https://javaguide.cn/cs-basics/data-structure/bloom-filter.html",
      "id": "https://javaguide.cn/cs-basics/data-structure/bloom-filter.html",
      "summary": "布隆过滤器相信大家没用过的话，也已经听过了。 布隆过滤器主要是为了解决海量数据的存在性问题。对于海量数据中判定某个数据是否存在且容忍轻微误差这一场景（比如缓存穿透、海量数据去重）来说，非常适合。 文章内容概览： 什么是布隆过滤器？ 布隆过滤器的原理介绍。 布隆过滤器使用场景。 通过 Java 编程手动实现布隆过滤器。 利用 Google 开源的 Gua...",
      "content_html": "<p>布隆过滤器相信大家没用过的话，也已经听过了。</p>\n<p>布隆过滤器主要是为了解决海量数据的存在性问题。对于海量数据中判定某个数据是否存在且容忍轻微误差这一场景（比如缓存穿透、海量数据去重）来说，非常适合。</p>\n<p>文章内容概览：</p>\n<ol>\n<li>什么是布隆过滤器？</li>\n<li>布隆过滤器的原理介绍。</li>\n<li>布隆过滤器使用场景。</li>\n<li>通过 Java 编程手动实现布隆过滤器。</li>\n<li>利用 Google 开源的 Guava 中自带的布隆过滤器。</li>\n<li>Redis 中的布隆过滤器。</li>\n</ol>\n<h2>什么是布隆过滤器？</h2>\n<p>首先，我们需要了解布隆过滤器的概念。</p>\n<p>布隆过滤器（Bloom Filter，BF）是一个叫做 Bloom 的老哥于 1970 年提出的。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的 List、Map、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。</p>\n<p>Bloom Filter 会使用一个较大的 bit 数组来保存所有的数据，数组中的每个元素都只占用 1 bit ，并且每个元素只能是 0 或者 1（代表 false 或者 true），这也是 Bloom Filter 节省内存的核心所在。这样来算的话，申请一个 100w 个元素的位数组只占用 1000000Bit / 8 = 125000 Byte = 125000/1024 KB ≈ 122KB 的空间。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-bit-table.png\" alt=\"位数组\"></p>\n<p>总结：<strong>一个名叫 Bloom 的人提出了一种来检索元素是否在给定大集合中的数据结构，这种数据结构是高效且性能很好的，但缺点是具有一定的错误识别率和删除难度。并且，理论情况下，添加到集合中的元素越多，误报的可能性就越大。</strong></p>\n<h2>布隆过滤器的原理介绍</h2>\n<p><strong>当一个元素加入布隆过滤器中的时候，会进行如下操作：</strong></p>\n<ol>\n<li>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。</li>\n<li>根据得到的哈希值，在位数组中把对应下标的值置为 1。</li>\n</ol>\n<p><strong>当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行如下操作：</strong></p>\n<ol>\n<li>对给定元素再次进行相同的哈希计算；</li>\n<li>得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</li>\n</ol>\n<p>Bloom Filter 的简单原理图如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-simple-schematic-diagram.png\" alt=\"Bloom Filter 的简单原理示意图\"></p>\n<p>如图所示，当字符串存储要加入到布隆过滤器中时，该字符串首先由多个哈希函数生成不同的哈希值，然后将对应的位数组的下标设置为 1（当位数组初始化时，所有位置均为 0）。当第二次存储相同字符串时，因为先前的对应位置已设置为 1，所以很容易知道此值已经存在（去重非常方便）。</p>\n<p>如果我们需要判断某个字符串是否在布隆过滤器中时，只需要对给定字符串再次进行相同的哈希计算，得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</p>\n<p><strong>不同的字符串可能哈希出来的位置相同，这种情况我们可以适当增加位数组大小或者调整我们的哈希函数。</strong></p>\n<p>综上，我们可以得出：<strong>布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。</strong></p>\n<h2>布隆过滤器使用场景</h2>\n<ol>\n<li>判断给定数据是否存在：比如判断一个数字是否存在于包含大量数字的数字集中（数字集很大，上亿）、 防止缓存穿透（判断请求的数据是否有效避免直接绕过缓存请求数据库）等等、邮箱的垃圾邮件过滤（判断一个邮件地址是否在垃圾邮件列表中）、黑名单功能（判断一个 IP 地址或手机号码是否在黑名单中）等等。</li>\n<li>去重：比如爬给定网址的时候对已经爬取过的 URL 去重、对巨量的 QQ 号/订单号去重。</li>\n</ol>\n<p>去重场景也需要用到判断给定数据是否存在，因此布隆过滤器主要是为了解决海量数据的存在性问题。</p>\n<h2>编码实战</h2>\n<h3>通过 Java 编程手动实现布隆过滤器</h3>\n<p>我们上面已经说了布隆过滤器的原理，知道了布隆过滤器的原理之后就可以自己手动实现一个了。</p>\n<p>如果你想要手动实现一个的话，你需要：</p>\n<ol>\n<li>一个合适大小的位数组保存数据</li>\n<li>几个不同的哈希函数</li>\n<li>添加元素到位数组（布隆过滤器）的方法实现</li>\n<li>判断给定元素是否存在于位数组（布隆过滤器）的方法实现。</li>\n</ol>\n<p>下面给出一个我觉得写的还算不错的代码（参考网上已有代码改进得到，对于所有类型对象皆适用）：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.BitSet</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyBloomFilter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 位数组的大小</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> DEFAULT_SIZE </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 24</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 通过这个数组可以创建 6 个不同的哈希函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">[] SEEDS </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">[]{</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 13</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 46</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 71</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 91</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 134</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 位数组。数组中的元素只能是 0 或者 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> BitSet</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> bits </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> BitSet</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(DEFAULT_SIZE)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 存放包含 hash 函数的类的数组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> SimpleHash</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">[] func </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> SimpleHash</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">[</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">SEEDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 初始化多个包含 hash 函数的类的数组，每个类中的 hash 函数都不一样</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyBloomFilter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 初始化多个不同的 Hash 函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> SEEDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            func[i] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> SimpleHash</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(DEFAULT_SIZE, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">SEEDS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 添加元素到位数组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">SimpleHash</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> f</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> func) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            bits</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">set</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">hash</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value), </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 判断指定元素是否存在于位数组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        boolean</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> ret</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">SimpleHash</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> f</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> func) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            ret </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ret </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> bits</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">hash</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ret;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     * 静态内部类。用于 hash 操作！</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> SimpleHash</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> cap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> seed</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        public</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> SimpleHash</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> cap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> seed</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">cap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> cap;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">seed</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> seed;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         * 计算 hash 值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">         */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> hash</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> h</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">?</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Math</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((cap </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> seed </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ((h </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">hashCode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">^</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (h </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 16</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>测试：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> value1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"https://javaguide.cn/\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> value2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"https://github.com/Snailclimb\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyBloomFilter</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> filter </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyBloomFilter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value1));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value2));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value1);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value2);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value1));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value2));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Output:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>false</span></span>\n<span class=\"line\"><span>false</span></span>\n<span class=\"line\"><span>true</span></span>\n<span class=\"line\"><span>true</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>测试：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> value1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 13423</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> value2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 22131</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyBloomFilter</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> filter </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyBloomFilter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value1));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value2));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value1);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value2);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value1));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value2));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Output:</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>利用 Google 开源的 Guava 中自带的布隆过滤器</h3>\n<p>自己实现的目的主要是为了让自己搞懂布隆过滤器的原理，Guava 中布隆过滤器的实现算是比较权威的，所以实际项目中我们不需要手动实现一个布隆过滤器。</p>\n<p>首先我们需要在项目中引入 Guava 的依赖：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">    &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">com</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">google</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">guava</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">groupId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">    &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">guava</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">artifactId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">    &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">28.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">jre</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dependency</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实际使用如下：</p>\n<p>我们创建了一个最多存放 最多 1500 个整数的布隆过滤器，并且我们可以容忍误判的概率为百分之（0.01）</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 创建布隆过滤器对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">BloomFilter</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> filter </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> BloomFilter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">create</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    Funnels</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integerFunnel</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(),</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">    1500</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">    0.01</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 判断指定元素是否存在</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mightContain</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mightContain</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 将元素添加进布隆过滤器</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mightContain</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mightContain</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在我们的示例中，当 <code>mightContain()</code> 方法返回 <em>true</em> 时，我们可以 99％确定该元素在过滤器中，当过滤器返回 <em>false</em> 时，我们可以 100％确定该元素不存在于过滤器中。</p>\n<p><strong>Guava 提供的布隆过滤器的实现还是很不错的（想要详细了解的可以看一下它的源码实现），但是它有一个重大的缺陷就是只能单机使用（另外，容量扩展也不容易），而现在互联网一般都是分布式的场景。为了解决这个问题，我们就需要用到 Redis 中的布隆过滤器了。</strong></p>\n<h2>Redis 中的布隆过滤器</h2>\n<h3>介绍</h3>\n<p>Redis v4.0 之后有了 Module（模块/插件） 功能，Redis Modules 让 Redis 可以使用外部模块扩展其功能 。布隆过滤器就是其中的 Module。详情可以查看 Redis 官方对 Redis Modules 的介绍：<a href=\"https://redis.io/modules\" target=\"_blank\" rel=\"noopener noreferrer\">https://redis.io/modules</a></p>\n<p>另外，官网推荐了一个 RedisBloom 作为 Redis 布隆过滤器的 Module，地址：<a href=\"https://github.com/RedisBloom/RedisBloom\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/RedisBloom/RedisBloom</a><br>\n其他还有：</p>\n<ul>\n<li>redis-lua-scaling-bloom-filter（lua 脚本实现）：<a href=\"https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter</a></li>\n<li>pyreBloom（Python 中的快速 Redis 布隆过滤器）：<a href=\"https://github.com/seomoz/pyreBloom\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/seomoz/pyreBloom</a></li>\n<li>……</li>\n</ul>\n<p>RedisBloom 提供了多种语言的客户端支持，包括：Python、Java、JavaScript 和 PHP。</p>\n<h3>使用 Docker 安装</h3>\n<p>如果我们需要体验 Redis 中的布隆过滤器非常简单，通过 Docker 就可以了！我们直接在 Google 搜索 <strong>docker redis bloomfilter</strong> 然后在排除广告的第一条搜素结果就找到了我们想要的答案（这是我平常解决问题的一种方式，分享一下），具体地址：<a href=\"https://hub.docker.com/r/redislabs/rebloom/\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com/r/redislabs/rebloom/</a> （介绍的很详细 ）。</p>\n<p><strong>具体操作如下：</strong></p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">➜</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  ~</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> docker</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> run</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -p</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 6379:6379</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --name</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> redis-redisbloom</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> redislabs/rebloom:latest</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">➜</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  ~</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> docker</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> exec</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -it</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> redis-redisbloom</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bash</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">root@21396d02c252:/data#</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> redis-cli</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>注意：当前 rebloom 镜像已经被废弃，官方推荐使用<a href=\"https://hub.docker.com/r/redis/redis-stack\" target=\"_blank\" rel=\"noopener noreferrer\">redis-stack</a></strong></p>\n<h3>常用命令一览</h3>\n<blockquote>\n<p>注意：key : 布隆过滤器的名称，item : 添加的元素。</p>\n</blockquote>\n<ol>\n<li><code>BF.ADD</code>：将元素添加到布隆过滤器中，如果该过滤器尚不存在，则创建该过滤器。格式：<code>BF.ADD {key} {item}</code>。</li>\n<li><code>BF.MADD</code> : 将一个或多个元素添加到“布隆过滤器”中，并创建一个尚不存在的过滤器。该命令的操作方式<code>BF.ADD</code>与之相同，只不过它允许多个输入并返回多个值。格式：<code>BF.MADD {key} {item} [item ...]</code> 。</li>\n<li><code>BF.EXISTS</code> : 确定元素是否在布隆过滤器中存在。格式：<code>BF.EXISTS {key} {item}</code>。</li>\n<li><code>BF.MEXISTS</code>：确定一个或者多个元素是否在布隆过滤器中存在格式：<code>BF.MEXISTS {key} {item} [item ...]</code>。</li>\n</ol>\n<p>另外， <code>BF.RESERVE</code> 命令需要单独介绍一下：</p>\n<p>这个命令的格式如下：</p>\n<p><code>BF.RESERVE {key} {error_rate} {capacity} [EXPANSION expansion]</code> 。</p>\n<p>下面简单介绍一下每个参数的具体含义：</p>\n<ol>\n<li>key：布隆过滤器的名称</li>\n<li>error_rate : 期望的误报率。该值必须介于 0 到 1 之间。例如，对于期望的误报率 0.1％（1000 中为 1），error_rate 应该设置为 0.001。该数字越接近零，则每个项目的内存消耗越大，并且每个操作的 CPU 使用率越高。</li>\n<li>capacity: 过滤器的容量。当实际存储的元素个数超过这个值之后，性能将开始下降。实际的降级将取决于超出限制的程度。随着过滤器元素数量呈指数增长，性能将线性下降。</li>\n</ol>\n<p>可选参数：</p>\n<ul>\n<li>expansion：如果创建了一个新的子过滤器，则其大小将是当前过滤器的大小乘以<code>expansion</code>。默认扩展值为 2。这意味着每个后续子过滤器将是前一个子过滤器的两倍。</li>\n</ul>\n<h3>实际使用</h3>\n<div class=\"language-shell line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"shell\" data-title=\"shell\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">BF.ADD</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> myFilter</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> java</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">BF.ADD</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> myFilter</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> javaguide</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">BF.EXISTS</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> myFilter</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> java</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">BF.EXISTS</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> myFilter</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> javaguide</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">127.0.0.1:6379</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">BF.EXISTS</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> myFilter</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> github</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">0</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-bit-table.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "图",
      "url": "https://javaguide.cn/cs-basics/data-structure/graph.html",
      "id": "https://javaguide.cn/cs-basics/data-structure/graph.html",
      "summary": "图是一种较为复杂的非线性结构。 为啥说其较为复杂呢？ 根据前面的内容，我们知道： 线性数据结构的元素满足唯一的线性关系，每个元素(除第一个和最后一个外)只有一个直接前趋和一个直接后继。 树形数据结构的元素之间有着明显的层次关系。 但是，图形结构的元素之间的关系是任意的。 何为图呢？ 简单来说，图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示...",
      "content_html": "<p>图是一种较为复杂的非线性结构。 <strong>为啥说其较为复杂呢？</strong></p>\n<p>根据前面的内容，我们知道：</p>\n<ul>\n<li>线性数据结构的元素满足唯一的线性关系，每个元素(除第一个和最后一个外)只有一个直接前趋和一个直接后继。</li>\n<li>树形数据结构的元素之间有着明显的层次关系。</li>\n</ul>\n<p>但是，图形结构的元素之间的关系是任意的。</p>\n<p><strong>何为图呢？</strong> 简单来说，图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为：<strong>G(V,E)</strong>，其中，G 表示一个图，V 表示顶点的集合，E 表示边的集合。</p>\n<p>下图所展示的就是图这种数据结构，并且还是一张有向图。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/directed-graph.png\" alt=\"有向图\"></p>\n<p>图在我们日常生活中的例子很多！比如我们在社交软件上好友关系就可以用图来表示。</p>\n<h2>图的基本概念</h2>\n<h3>顶点</h3>\n<p>图中的数据元素，我们称之为顶点，图至少有一个顶点（非空有穷集合）</p>\n<p>对应到好友关系图，每一个用户就代表一个顶点。</p>\n<h3>边</h3>\n<p>顶点之间的关系用边表示。</p>\n<p>对应到好友关系图，两个用户是好友的话，那两者之间就存在一条边。</p>\n<h3>度</h3>\n<p>度表示一个顶点包含多少条边，在有向图中，还分为出度和入度，出度表示从该顶点出去的边的条数，入度表示进入该顶点的边的条数。</p>\n<p>对应到好友关系图，度就代表了某个人的好友数量。</p>\n<h3>无向图和有向图</h3>\n<p>边表示的是顶点之间的关系，有的关系是双向的，比如同学关系，A 是 B 的同学，那么 B 也肯定是 A 的同学，那么在表示 A 和 B 的关系时，就不用关注方向，用不带箭头的边表示，这样的图就是无向图。</p>\n<p>有的关系是有方向的，比如父子关系，师生关系，微博的关注关系，A 是 B 的爸爸，但 B 肯定不是 A 的爸爸，A 关注 B，B 不一定关注 A。在这种情况下，我们就用带箭头的边表示二者的关系，这样的图就是有向图。</p>\n<h3>无权图和带权图</h3>\n<p>对于一个关系，如果我们只关心关系的有无，而不关心关系有多强，那么就可以用无权图表示二者的关系。</p>\n<p>对于一个关系，如果我们既关心关系的有无，也关心关系的强度，比如描述地图上两个城市的关系，需要用到距离，那么就用带权图来表示，带权图中的每一条边一个数值表示权值，代表关系的强度。</p>\n<p>下图就是一个带权有向图。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/weighted-directed-graph.png\" alt=\"带权有向图\"></p>\n<h2>图的存储</h2>\n<h3>邻接矩阵存储</h3>\n<p>邻接矩阵将图用二维矩阵存储，是一种较为直观的表示方式。</p>\n<p>如果第 i 个顶点和第 j 个顶点之间有关系，且关系权值为 n，则 <code>A[i][j]=n</code> 。</p>\n<p>在无向图中，我们只关心关系的有无，所以当顶点 i 和顶点 j 有关系时，<code>A[i][j]</code>=1，当顶点 i 和顶点 j 没有关系时，<code>A[i][j]</code>=0。如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/adjacency-matrix-representation-of-undirected-graph.png\" alt=\"无向图的邻接矩阵存储\"></p>\n<p>值得注意的是：<strong>无向图的邻接矩阵是一个对称矩阵，因为在无向图中，顶点 i 和顶点 j 有关系，则顶点 j 和顶点 i 必有关系。</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/adjacency-matrix-representation-of-directed-graph.png\" alt=\"有向图的邻接矩阵存储\"></p>\n<p>邻接矩阵存储的方式优点是简单直接（直接使用一个二维数组即可），并且，在获取两个定点之间的关系的时候也非常高效（直接获取指定位置的数组元素的值即可）。但是，这种存储方式的缺点也比较明显，那就是比较浪费空间，</p>\n<h3>邻接表存储</h3>\n<p>针对上面邻接矩阵比较浪费内存空间的问题，诞生了图的另外一种存储方法—<strong>邻接表</strong> 。</p>\n<p>邻接链表使用一个链表来存储某个顶点的所有后继相邻顶点。对于图中每个顶点 Vi，把所有邻接于 Vi 的顶点 Vj 链成一个单链表，这个单链表称为顶点 Vi 的 <strong>邻接表</strong>。如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/adjacency-list-representation-of-undirected-graph.png\" alt=\"无向图的邻接表存储\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/adjacency-list-representation-of-directed-graph.png\" alt=\"有向图的邻接表存储\"></p>\n<p>大家可以数一数邻接表中所存储的元素的个数以及图中边的条数，你会发现：</p>\n<ul>\n<li>在无向图中，邻接表元素个数等于边的条数的两倍，如左图所示的无向图中，边的条数为 7，邻接表存储的元素个数为 14。</li>\n<li>在有向图中，邻接表元素个数等于边的条数，如右图所示的有向图中，边的条数为 8，邻接表存储的元素个数为 8。</li>\n</ul>\n<h2>图的搜索</h2>\n<h3>广度优先搜索</h3>\n<p>广度优先搜索就像水面上的波纹一样一层一层向外扩展，如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search.png\" alt=\"广度优先搜索图示\"></p>\n<p><strong>广度优先搜索的具体实现方式用到了之前所学过的线性数据结构——队列</strong> 。具体过程如下图所示：</p>\n<p><strong>第 1 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search1.png\" alt=\"广度优先搜索1\"></p>\n<p><strong>第 2 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search2.png\" alt=\"广度优先搜索2\"></p>\n<p><strong>第 3 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search3.png\" alt=\"广度优先搜索3\"></p>\n<p><strong>第 4 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search4.png\" alt=\"广度优先搜索4\"></p>\n<p><strong>第 5 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search5.png\" alt=\"广度优先搜索5\"></p>\n<p><strong>第 6 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search6.png\" alt=\"广度优先搜索6\"></p>\n<h3>深度优先搜索</h3>\n<p>深度优先搜索就是“一条路走到黑”，从源顶点开始，一直走到没有后继节点，才回溯到上一顶点，然后继续“一条路走到黑”，如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search.png\" alt=\"深度优先搜索图示\"></p>\n<p><strong>和广度优先搜索类似，深度优先搜索的具体实现用到了另一种线性数据结构——栈</strong> 。具体过程如下图所示：</p>\n<p><strong>第 1 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search1.png\" alt=\"深度优先搜索1\"></p>\n<p><strong>第 2 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search2.png\" alt=\"深度优先搜索2\"></p>\n<p><strong>第 3 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search3.png\" alt=\"深度优先搜索3\"></p>\n<p><strong>第 4 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search4.png\" alt=\"深度优先搜索4\"></p>\n<p><strong>第 5 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search5.png\" alt=\"深度优先搜索5\"></p>\n<p><strong>第 6 步：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search6.png\" alt=\"深度优先搜索6\"></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/directed-graph.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "堆",
      "url": "https://javaguide.cn/cs-basics/data-structure/heap.html",
      "id": "https://javaguide.cn/cs-basics/data-structure/heap.html",
      "summary": "堆 什么是堆 堆是一种满足以下条件的树： 堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。或者说，任意一个节点的值都大于等于（或小于等于）所有子节点的值。 大家可以把堆(最大堆)理解为一个公司,这个公司很公平,谁能力强谁就当老大,不存在弱的人当老大,老大手底下的人一定不会比他强。这样有助于理解后续堆的操作。 !!!特别提示： 很多博客说堆...",
      "content_html": "\n<h2>什么是堆</h2>\n<p>堆是一种满足以下条件的树：</p>\n<p>堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。或者说，任意一个节点的值都大于等于（或小于等于）所有子节点的值。</p>\n<blockquote>\n<p>大家可以把堆(最大堆)理解为一个公司,这个公司很公平,谁能力强谁就当老大,不存在弱的人当老大,老大手底下的人一定不会比他强。这样有助于理解后续堆的操作。</p>\n</blockquote>\n<p><strong>!!!特别提示：</strong></p>\n<ul>\n<li>很多博客说堆是完全二叉树，其实并非如此，<strong>堆不一定是完全二叉树</strong>，只是为了方便存储和索引，我们通常用完全二叉树的形式来表示堆，事实上，广为人知的斐波那契堆和二项堆就不是完全二叉树,它们甚至都不是二叉树。</li>\n<li>（<strong>二叉</strong>）堆是一个数组，它可以被看成是一个 <strong>近似的完全二叉树</strong>。——《算法导论》第三版</li>\n</ul>\n<p>大家可以尝试判断下面给出的图是否是堆？</p>\n<p></p>\n<p>第 1 个和第 2 个是堆。第 1 个是最大堆，每个节点都比子树中所有节点大。第 2 个是最小堆，每个节点都比子树中所有节点小。</p>\n<p>第 3 个不是，第三个中，根结点 1 比 2 和 15 小，而 15 却比 3 大，19 比 5 大，不满足堆的性质。</p>\n<h2>堆的用途</h2>\n<p>当我们只关心所有数据中的最大值或者最小值，存在多次获取最大值或者最小值，多次插入或删除数据时，就可以使用堆。</p>\n<p>有小伙伴可能会想到用有序数组，初始化一个有序数组时间复杂度是 <code>O(nlog(n))</code>，查找最大值或者最小值时间复杂度都是 <code>O(1)</code>，但是，涉及到更新（插入或删除）数据时，时间复杂度为 <code>O(n)</code>，即使是使用复杂度为 <code>O(log(n))</code> 的二分法找到要插入或者删除的数据，在移动数据时也需要 <code>O(n)</code> 的时间复杂度。</p>\n<p><strong>相对于有序数组而言，堆的主要优势在于插入和删除数据效率较高。</strong> 因为堆是基于完全二叉树实现的，所以在插入和删除数据时，只需要在二叉树中上下移动节点，时间复杂度为 <code>O(log(n))</code>，相比有序数组的 <code>O(n)</code>，效率更高。</p>\n<p>不过，需要注意的是：Heap 初始化的时间复杂度为 <code>O(n)</code>，而非<code>O(nlogn)</code>。</p>\n<h2>堆的分类</h2>\n<p>堆分为 <strong>最大堆</strong> 和 <strong>最小堆</strong>。二者的区别在于节点的排序方式。</p>\n<ul>\n<li><strong>最大堆</strong>：堆中的每一个节点的值都大于等于子树中所有节点的值</li>\n<li><strong>最小堆</strong>：堆中的每一个节点的值都小于等于子树中所有节点的值</li>\n</ul>\n<p>如下图所示，图 1 是最大堆，图 2 是最小堆</p>\n<p></p>\n<h2>堆的存储</h2>\n<p>之前介绍树的时候说过，由于完全二叉树的优秀性质，利用数组存储二叉树即节省空间，又方便索引（若根结点的序号为 1，那么对于树中任意节点 i，其左子节点序号为 <code>2*i</code>，右子节点序号为 <code>2*i+1</code>）。</p>\n<p>为了方便存储和索引，（二叉）堆可以用完全二叉树的形式进行存储。存储的方式如下图所示：</p>\n<p></p>\n<h2>堆的操作</h2>\n<p>堆的更新操作主要包括两种 : <strong>插入元素</strong> 和 <strong>删除堆顶元素</strong>。操作过程需要着重掌握和理解。</p>\n<blockquote>\n<p>在进入正题之前，再重申一遍，堆是一个公平的公司，有能力的人自然会走到与他能力所匹配的位置</p>\n</blockquote>\n<h3>插入元素</h3>\n<blockquote>\n<p>插入元素，作为一个新入职的员工，初来乍到，这个员工需要从基层做起</p>\n</blockquote>\n<p><strong>1.将要插入的元素放到最后</strong></p>\n<p></p>\n<blockquote>\n<p>有能力的人会逐渐升职加薪，是金子总会发光的！！！</p>\n</blockquote>\n<p><strong>2.从底向上，如果父结点比该元素小，则该节点和父结点交换，直到无法交换</strong></p>\n<p></p>\n<p></p>\n<h3>删除堆顶元素</h3>\n<p>根据堆的性质可知，最大堆的堆顶元素为所有元素中最大的，最小堆的堆顶元素是所有元素中最小的。当我们需要多次查找最大元素或者最小元素的时候，可以利用堆来实现。</p>\n<p>删除堆顶元素后，为了保持堆的性质，需要对堆的结构进行调整，我们将这个过程称之为\"<strong>堆化</strong>\"，堆化的方法分为两种：</p>\n<ul>\n<li>一种是自底向上的堆化，上述的插入元素所使用的就是自底向上的堆化，元素从最底部向上移动。</li>\n<li>另一种是自顶向下堆化，元素由最顶部向下移动。在讲解删除堆顶元素的方法时，我将阐述这两种操作的过程，大家可以体会一下二者的不同。</li>\n</ul>\n<h4>自底向上堆化</h4>\n<blockquote>\n<p>在堆这个公司中，会出现老大离职的现象，老大离职之后，他的位置就空出来了</p>\n</blockquote>\n<p>首先删除堆顶元素，使得数组中下标为 1 的位置空出。</p>\n<p></p>\n<blockquote>\n<p>那么他的位置由谁来接替呢，当然是他的直接下属了，谁能力强就让谁上呗</p>\n</blockquote>\n<p>比较根结点的左子节点和右子节点，也就是下标为 2,3 的数组元素，将较大的元素填充到根结点(下标为 1)的位置。</p>\n<p></p>\n<blockquote>\n<p>这个时候又空出一个位置了，老规矩，谁有能力谁上</p>\n</blockquote>\n<p>一直循环比较空出位置的左右子节点，并将较大者移至空位，直到堆的最底部</p>\n<p></p>\n<p>这个时候已经完成了自底向上的堆化，没有元素可以填补空缺了，但是，我们可以看到数组中出现了“气泡”，这会导致存储空间的浪费。接下来我们试试自顶向下堆化。</p>\n<h4>自顶向下堆化</h4>\n<p>自顶向下的堆化用一个词形容就是“石沉大海”，那么第一件事情，就是把石头抬起来，从海面扔下去。这个石头就是堆的最后一个元素，我们将最后一个元素移动到堆顶。</p>\n<p></p>\n<p>然后开始将这个石头沉入海底，不停与左右子节点的值进行比较，和较大的子节点交换位置，直到无法交换位置。</p>\n<p></p>\n<p></p>\n<h3>堆的操作总结</h3>\n<ul>\n<li><strong>插入元素</strong>：先将元素放至数组末尾，再自底向上堆化，将末尾元素上浮</li>\n<li><strong>删除堆顶元素</strong>：删除堆顶元素，将末尾元素放至堆顶，再自顶向下堆化，将堆顶元素下沉。也可以自底向上堆化，只是会产生“气泡”，浪费存储空间。最好采用自顶向下堆化的方式。</li>\n</ul>\n<h2>堆排序</h2>\n<p>堆排序的过程分为两步：</p>\n<ul>\n<li>第一步是建堆，将一个无序的数组建立为一个堆</li>\n<li>第二步是排序，将堆顶元素取出，然后对剩下的元素进行堆化，反复迭代，直到所有元素被取出为止。</li>\n</ul>\n<h3>建堆</h3>\n<p>如果你已经足够了解堆化的过程，那么建堆的过程掌握起来就比较容易了。建堆的过程就是一个对所有非叶节点的自顶向下堆化过程。</p>\n<p>首先要了解哪些是非叶节点，最后一个节点的父结点及它之前的元素，都是非叶节点。也就是说，如果节点个数为 n，那么我们需要对 n/2 到 1 的节点进行自顶向下（沉底）堆化。</p>\n<p>具体过程如下图：</p>\n<p></p>\n<p>将初始的无序数组抽象为一棵树，图中的节点个数为 6，所以 4,5,6 节点为叶节点，1,2,3 节点为非叶节点，所以要对 1-3 号节点进行自顶向下（沉底）堆化，注意，顺序是从后往前堆化，从 3 号节点开始，一直到 1 号节点。<br>\n3 号节点堆化结果：</p>\n<p></p>\n<p>2 号节点堆化结果：</p>\n<p></p>\n<p>1 号节点堆化结果：</p>\n<p></p>\n<p>至此，数组所对应的树已经成为了一个最大堆，建堆完成！</p>\n<h3>排序</h3>\n<p>由于堆顶元素是所有元素中最大的，所以我们重复取出堆顶元素，将这个最大的堆顶元素放至数组末尾，并对剩下的元素进行堆化即可。</p>\n<p>现在思考两个问题：</p>\n<ul>\n<li>删除堆顶元素后需要执行自顶向下（沉底）堆化还是自底向上（上浮）堆化？</li>\n<li>取出的堆顶元素存在哪，新建一个数组存？</li>\n</ul>\n<p>先回答第一个问题，我们需要执行自顶向下（沉底）堆化，这个堆化一开始要将末尾元素移动至堆顶，这个时候末尾的位置就空出来了，由于堆中元素已经减小，这个位置不会再被使用，所以我们可以将取出的元素放在末尾。</p>\n<p>机智的小伙伴已经发现了，这其实是做了一次交换操作，将堆顶和末尾元素调换位置，从而将取出堆顶元素和堆化的第一步(将末尾元素放至根结点位置)进行合并。</p>\n<p>详细过程如下图所示：</p>\n<p>取出第一个元素并堆化：</p>\n<p></p>\n<p>取出第二个元素并堆化：</p>\n<p></p>\n<p>取出第三个元素并堆化：</p>\n<p></p>\n<p>取出第四个元素并堆化：</p>\n<p></p>\n<p>取出第五个元素并堆化：</p>\n<p></p>\n<p>取出第六个元素并堆化：</p>\n<p></p>\n<p>堆排序完成！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "线性数据结构",
      "url": "https://javaguide.cn/cs-basics/data-structure/linear-data-structure.html",
      "id": "https://javaguide.cn/cs-basics/data-structure/linear-data-structure.html",
      "summary": "1. 数组 数组（Array） 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。 我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。 数组的特点是：提供随机访问 并且容量有限。 数组 2. 链表 2.1. 链表简介 链表（LinkedList） 虽然是一种线性表，但是并不会按线性的...",
      "content_html": "<h2>1. 数组</h2>\n<p><strong>数组（Array）</strong> 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。</p>\n<p>我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。</p>\n<p>数组的特点是：<strong>提供随机访问</strong> 并且容量有限。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">假如数组的长度为 n。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">访问：O（</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//访问特定位置的元素</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">插入：O（n ）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">删除：O（n）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/array.png\" alt=\"数组\"></p>\n<h2>2. 链表</h2>\n<h3>2.1. 链表简介</h3>\n<p><strong>链表（LinkedList）</strong> 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。</p>\n<p>链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。</p>\n<p>使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。</p>\n<h3>2.2. 链表分类</h3>\n<p><strong>常见链表分类：</strong></p>\n<ol>\n<li>单链表</li>\n<li>双向链表</li>\n<li>循环链表</li>\n<li>双向循环链表</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">假如链表中有n个元素。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">访问：O（n）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//访问特定位置的元素</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">插入删除：O（</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//必须要要知道插入元素的位置</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>2.2.1. 单链表</h4>\n<p><strong>单链表</strong> 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/single-linkedlist.png\" alt=\"单链表\"></p>\n<h4>2.2.2. 循环链表</h4>\n<p><strong>循环链表</strong> 其实是一种特殊的单链表，和单链表不同的是循环链表的尾结点不是指向 null，而是指向链表的头结点。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/circular-linkedlist.png\" alt=\"循环链表\"></p>\n<h4>2.2.3. 双向链表</h4>\n<p><strong>双向链表</strong> 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/bidirectional-linkedlist.png\" alt=\"双向链表\"></p>\n<h4>2.2.4. 双向循环链表</h4>\n<p><strong>双向循环链表</strong> 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/bidirectional-circular-linkedlist.png\" alt=\"双向循环链表\"></p>\n<h3>2.3. 应用场景</h3>\n<ul>\n<li>如果需要支持随机访问的话，链表没办法做到。</li>\n<li>如果需要存储的数据元素的个数不确定，并且需要经常添加和删除数据的话，使用链表比较合适。</li>\n<li>如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。</li>\n</ul>\n<h3>2.4. 数组 vs 链表</h3>\n<ul>\n<li>数组支持随机访问，而链表不支持。</li>\n<li>数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。</li>\n<li>数组的大小固定，而链表则天然支持动态扩容。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！</li>\n</ul>\n<h2>3. 栈</h2>\n<h3>3.1. 栈简介</h3>\n<p><strong>栈 (Stack)</strong> 只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 <strong>后进先出（LIFO, Last In First Out）</strong> 的原理运作。<strong>在栈中，push 和 pop 的操作都发生在栈顶。</strong></p>\n<p>栈常用一维数组或链表来实现，用数组实现的栈叫作 <strong>顺序栈</strong> ，用链表实现的栈叫作 <strong>链式栈</strong> 。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">假设堆栈中有n个元素。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">访问：O（n）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//最坏情况</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">插入删除：O（</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//顶端插入和删除元素</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/栈.png\" alt=\"栈\"></p>\n<h3>3.2. 栈的常见应用场景</h3>\n<p>当我们我们要处理的数据只涉及在一端插入和删除数据，并且满足 <strong>后进先出（LIFO, Last In First Out）</strong> 的特性时，我们就可以使用栈这个数据结构。</p>\n<h4>3.2.1. 实现浏览器的回退和前进功能</h4>\n<p>我们只需要使用两个栈(Stack1 和 Stack2)和就能实现这个功能。比如你按顺序查看了 1,2,3,4 这四个页面，我们依次把 1,2,3,4 这四个页面压入 Stack1 中。当你想回头看 2 这个页面的时候，你点击回退按钮，我们依次把 4,3 这两个页面从 Stack1 弹出，然后压入 Stack2 中。假如你又想回到页面 3，你点击前进按钮，我们将 3 页面从 Stack2 弹出，然后压入到 Stack1 中。示例图如下:</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/栈实现浏览器倒退和前进.png\" alt=\"栈实现浏览器倒退和前进\"></p>\n<h4>3.2.2. 检查符号是否成对出现</h4>\n<blockquote>\n<p>给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'{'</code>，<code>'}'</code>，<code>'['</code>，<code>']'</code> 的字符串，判断该字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n</ol>\n<p>比如 \"()\"、\"()[]{}\"、\"{[]}\" 都是有效字符串，而 \"(]\"、\"([)]\" 则不是。</p>\n</blockquote>\n<p>这个问题实际是 Leetcode 的一道题目，我们可以利用栈 <code>Stack</code> 来解决这个问题。</p>\n<ol>\n<li>首先我们将括号间的对应规则存放在 <code>Map</code> 中，这一点应该毋容置疑；</li>\n<li>创建一个栈。遍历字符串，如果字符是左括号就直接加入<code>stack</code>中，否则将<code>stack</code> 的栈顶元素与这个括号做比较，如果不相等就直接返回 false。遍历结束，如果<code>stack</code>为空，返回 <code>true</code>。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> isValid</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 括号之间的对应规则</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    HashMap</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Character</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> mappings </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> HashMap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    mappings</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">')'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'('</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    mappings</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'}'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'{'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    mappings</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">put</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">']'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'['</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    Stack</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> stack </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Character</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">[] chars </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toCharArray</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> chars</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">mappings</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">containsKey</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(chars[i])</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> topElement </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">empty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '#'</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (topElement </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> mappings</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(chars[i])</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(chars[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> stack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isEmpty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>3.2.3. 反转字符串</h4>\n<p>将字符串中的每个字符先入栈再出栈就可以了。</p>\n<h4>3.2.4. 维护函数调用</h4>\n<p>最后一个被调用的函数必须先完成执行，符合栈的 <strong>后进先出（LIFO, Last In First Out）</strong> 特性。<br>\n例如递归函数调用可以通过栈来实现，每次递归调用都会将参数和返回地址压栈。</p>\n<h4>3.2.5 深度优先遍历（DFS）</h4>\n<p>在深度优先搜索过程中，栈被用来保存搜索路径，以便回溯到上一层。</p>\n<h3>3.3. 栈的实现</h3>\n<p>栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。</p>\n<p>下面我们使用数组来实现一个栈，并且这个栈具有<code>push()</code>、<code>pop()</code>（返回栈顶元素并出栈）、<code>peek()</code> （返回栈顶元素不出栈）、<code>isEmpty()</code>、<code>size()</code>这些基本的方法。</p>\n<blockquote>\n<p>提示：每次入栈之前先判断栈的容量是否够用，如果不够用就用<code>Arrays.copyOf()</code>进行扩容；</p>\n</blockquote>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">[] storage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//存放栈中元素的数组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> capacity</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//栈的容量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//栈中元素数量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> GROW_FACTOR </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //不带初始容量的构造方法。默认容量为8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">capacity</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">storage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //带初始容量的构造方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> initialCapacity</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (initialCapacity </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            throw</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IllegalArgumentException</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Capacity too small.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">capacity</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> initialCapacity;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">storage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[initialCapacity];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //入栈</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (count </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> capacity) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            ensureCapacity</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        storage[count++] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //确保容量大小</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ensureCapacity</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> newCapacity</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> capacity </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> GROW_FACTOR;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        storage </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Arrays</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">copyOf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(storage, newCapacity);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        capacity </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> newCapacity;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //返回栈顶元素并出栈</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (count </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            throw</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IllegalArgumentException</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Stack is empty.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        count--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> storage[count];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //返回栈顶元素不出栈</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> peek</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (count </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            throw</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IllegalArgumentException</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Stack is empty.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> storage[count</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //判断栈是否为空</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> isEmpty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> count </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //返回栈中元素的个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> size</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> count;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>验证</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyStack</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> myStack </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">7</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">peek</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">size</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isEmpty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">myStack</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//报错：java.lang.IllegalArgumentException: Stack is empty.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>4. 队列</h2>\n<h3>4.1. 队列简介</h3>\n<p><strong>队列（Queue）</strong> 是 <strong>先进先出 (FIFO，First In, First Out)</strong> 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 <strong>顺序队列</strong> ，用链表实现的队列叫作 <strong>链式队列</strong> 。<strong>队列只允许在后端（rear）进行插入操作也就是入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue</strong></p>\n<p>队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">假设队列中有n个元素。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">访问：O（n）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//最坏情况</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">插入删除：O（</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">）</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//后端插入前端删除元素</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/queue.png\" alt=\"队列\"></p>\n<h3>4.2. 队列分类</h3>\n<h4>4.2.1. 单队列</h4>\n<p>单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为 <strong>顺序队列（数组实现）</strong> 和 <strong>链式队列（链表实现）</strong>。</p>\n<p><strong>顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。</strong></p>\n<p>假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 <strong>”假溢出“</strong> 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。</p>\n<blockquote>\n<p>为了避免当只有一个元素的时候，队头和队尾重合使处理变得麻烦，所以引入两个指针，front 指针指向对头元素，rear 指针指向队列最后一个元素的下一个位置，这样当 front 等于 rear 时，此队列不是还剩一个元素，而是空队列。——From 《大话数据结构》</p>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/seq-queue-false-overflow.png\" alt=\"顺序队列假溢出\"></p>\n<h4>4.2.2. 循环队列</h4>\n<p>循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。</p>\n<p>还是用上面的图，我们将 rear 指针指向数组下标为 0 的位置就不会有越界问题了。当我们再向队列中添加元素的时候， rear 向后移动。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/circular-queue.png\" alt=\"循环队列\"></p>\n<p>顺序队列中，我们说 <code>front==rear</code> 的时候队列为空，循环队列中则不一样，也可能为满，如上图所示。解决办法有两种：</p>\n<ol>\n<li>可以设置一个标志变量 <code>flag</code>,当 <code>front==rear</code> 并且 <code>flag=0</code> 的时候队列为空，当<code>front==rear</code> 并且 <code>flag=1</code> 的时候队列为满。</li>\n<li>队列为空的时候就是 <code>front==rear</code> ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置，如下图所示，那么现在判断队列是否为满的条件就是：<code>(rear+1) % QueueSize==front</code> 。</li>\n</ol>\n<h4>4.2.3 双端队列</h4>\n<p><strong>双端队列 (Deque)</strong> 是一种在队列的两端都可以进行插入和删除操作的队列，相比单队列来说更加灵活。</p>\n<p>一般来说，我们可以对双端队列进行 <code>addFirst</code>、<code>addLast</code>、<code>removeFirst</code> 和 <code>removeLast</code> 操作。</p>\n<h4>4.2.4 优先队列</h4>\n<p><strong>优先队列 (Priority Queue)</strong> 从底层结构上来讲并非线性的数据结构，它一般是由堆来实现的。</p>\n<ol>\n<li>在每个元素入队时，优先队列会将新元素其插入堆中并调整堆。</li>\n<li>在队头出队时，优先队列会返回堆顶元素并调整堆。</li>\n</ol>\n<p>关于堆的具体实现可以看<a href=\"https://javaguide.cn/cs-basics/data-structure/heap.html\" target=\"_blank\" rel=\"noopener noreferrer\">堆</a>这一节。</p>\n<p>总而言之，不论我们进行什么操作，优先队列都能按照<strong>某种排序方式</strong>进行一系列堆的相关操作，从而保证整个集合的<strong>有序性</strong>。</p>\n<p>虽然优先队列的底层并非严格的线性结构，但是在我们使用的过程中，我们是感知不到<strong>堆</strong>的，从使用者的眼中优先队列可以被认为是一种线性的数据结构：一种会自动排序的线性队列。</p>\n<h3>4.3. 队列的常见应用场景</h3>\n<p>当我们需要按照一定顺序来处理数据的时候可以考虑使用队列这个数据结构。</p>\n<ul>\n<li><strong>阻塞队列：</strong> 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。</li>\n<li><strong>线程池中的请求/任务队列：</strong> 当线程池中没有空闲线程时，新的任务请求线程资源会被如何处理呢？答案是这些任务会被放入任务队列中，等待线程池中的线程空闲后再从队列中取出任务执行。任务队列分为无界队列（基于链表实现）和有界队列（基于数组实现）。无界队列的特点是队列容量理论上没有限制，任务可以持续入队，直到系统资源耗尽。例如：<code>FixedThreadPool</code> 使用的阻塞队列 <code>LinkedBlockingQueue</code>，其默认容量为 <code>Integer.MAX_VALUE</code>，因此可以被视为“无界队列”。而有界队列则不同，当队列已满时，如果再有新任务提交，由于队列无法继续容纳任务，线程池会拒绝这些任务，并抛出 <code>java.util.concurrent.RejectedExecutionException</code> 异常。</li>\n<li><strong>栈</strong>：双端队列天生便可以实现栈的全部功能（<code>push</code>、<code>pop</code> 和 <code>peek</code>），并且在 Deque 接口中已经实现了相关方法。Stack 类已经和 Vector 一样被遗弃，现在在 Java 中普遍使用双端队列（Deque）来实现栈。</li>\n<li><strong>广度优先搜索（BFS）</strong>：在图的广度优先搜索过程中，队列被用于存储待访问的节点，保证按照层次顺序遍历图的节点。</li>\n<li>Linux 内核进程队列（按优先级排队）</li>\n<li>现实生活中的派对，播放器上的播放列表;</li>\n<li>消息队列</li>\n<li>等等……</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/array.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "红黑树",
      "url": "https://javaguide.cn/cs-basics/data-structure/red-black-tree.html",
      "id": "https://javaguide.cn/cs-basics/data-structure/red-black-tree.html",
      "summary": "红黑树介绍 红黑树（Red Black Tree）是一种自平衡二叉查找树。它是在 1972 年由 Rudolf Bayer 发明的，当时被称为平衡二叉 B 树（symmetric binary B-trees）。后来，在 1978 年被 Leo J. Guibas 和 Robert Sedgewick 修改为如今的“红黑树”。 由于其自平衡的特性，保证...",
      "content_html": "<h2>红黑树介绍</h2>\n<p>红黑树（Red Black Tree）是一种自平衡二叉查找树。它是在 1972 年由 Rudolf Bayer 发明的，当时被称为平衡二叉 B 树（symmetric binary B-trees）。后来，在 1978 年被 Leo J. Guibas 和 Robert Sedgewick 修改为如今的“红黑树”。</p>\n<p>由于其自平衡的特性，保证了最坏情形下在 O(logn) 时间复杂度内完成查找、增加、删除等操作，性能表现稳定。</p>\n<p>在 JDK 中，<code>TreeMap</code>、<code>TreeSet</code> 以及 JDK1.8 的 <code>HashMap</code> 底层都用到了红黑树。</p>\n<h2>为什么需要红黑树？</h2>\n<p>红黑树的诞生就是为了解决二叉查找树的缺陷。</p>\n<p>二叉查找树是一种基于比较的数据结构，它的每个节点都有一个键值，而且左子节点的键值小于父节点的键值，右子节点的键值大于父节点的键值。这样的结构可以方便地进行查找、插入和删除操作，因为只需要比较节点的键值就可以确定目标节点的位置。但是，二叉查找树有一个很大的问题，就是它的形状取决于节点插入的顺序。如果节点是按照升序或降序的方式插入的，那么二叉查找树就会退化成一个线性结构，也就是一个链表。这样的情况下，二叉查找树的性能就会大大降低，时间复杂度就会从 O(logn) 变为 O(n)。</p>\n<p>红黑树的诞生就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。</p>\n<h2><strong>红黑树特点</strong></h2>\n<ol>\n<li>每个节点非红即黑。黑色决定平衡，红色不决定平衡。这对应了 2-3 树中一个节点内可以存放 1~2 个节点。</li>\n<li>根节点总是黑色的。</li>\n<li>每个叶子节点都是黑色的空节点（NIL 节点）。这里指的是红黑树都会有一个空的叶子节点，是红黑树自己的规则。</li>\n<li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）。通常这条规则也叫不会有连续的红色节点。一个节点最多临时会有 3 个子节点，中间是黑色节点，左右是红色节点。</li>\n<li>从任意节点到它的叶子节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。每一层都只是有一个节点贡献了树高决定平衡性，也就是对应红黑树中的黑色节点。</li>\n</ol>\n<p>正是这些特点才保证了红黑树的平衡，让红黑树的高度不会超过 2log(n+1)。</p>\n<h2>红黑树数据结构</h2>\n<p>建立在 BST 二叉搜索树的基础上，AVL、2-3 树、红黑树都是自平衡二叉树（统称 B-树）。但相比于 AVL 树，高度平衡所带来的时间复杂度，红黑树对平衡的控制要宽松一些，红黑树只需要保证黑色节点平衡即可。</p>\n<h2>红黑树结构实现</h2>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Node</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Class</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">?</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> clazz</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Node</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Node</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> left</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Node</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> right</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // AVL 树所需属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> height</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 红黑树所需属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Color</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> color </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Color</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">RED</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>1.左倾染色</h3>\n<p></p>\n<ul>\n<li>染色时根据当前节点的爷爷节点，找到当前节点的叔叔节点。</li>\n<li>再把父节点染黑、叔叔节点染黑，爷爷节点染红。但爷爷节点染红是临时的，当平衡树高操作后会把根节点染黑。</li>\n</ul>\n<h3>2.右倾染色</h3>\n<p></p>\n<h3>3.左旋调衡</h3>\n<h4>3.1 一次左旋</h4>\n<p></p>\n<h4>3.2 右旋+左旋</h4>\n<p></p>\n<h3>4.右旋调衡</h3>\n<h4>4.1 一次右旋</h4>\n<p></p>\n<h4>4.2 左旋+右旋</h4>\n<p></p>\n<h2>文章推荐</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24367771\" target=\"_blank\" rel=\"noopener noreferrer\">《红黑树深入剖析及 Java 实现》 - 美团点评技术团队</a></li>\n<li><a href=\"https://juejin.im/post/5a27c6946fb9a04509096248#comment\" target=\"_blank\" rel=\"noopener noreferrer\">漫画：什么是红黑树？ - 程序员小灰</a>（也介绍到了二叉查找树，非常推荐）</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "树",
      "url": "https://javaguide.cn/cs-basics/data-structure/tree.html",
      "id": "https://javaguide.cn/cs-basics/data-structure/tree.html",
      "summary": "树就是一种类似现实生活中的树的数据结构（倒置的树）。任何一颗非空树只有一个根节点。 一棵树具有以下特点： 一棵树中的任意两个结点有且仅有唯一的一条路径连通。 一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。 一棵树不包含回路。 下图就是一颗树，并且是一颗二叉树。 二叉树 如上图所示，通过上面这张图说明一下树中的常用概念： 节点：树中的每个元素...",
      "content_html": "<p>树就是一种类似现实生活中的树的数据结构（倒置的树）。任何一颗非空树只有一个根节点。</p>\n<p>一棵树具有以下特点：</p>\n<ol>\n<li>一棵树中的任意两个结点有且仅有唯一的一条路径连通。</li>\n<li>一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。</li>\n<li>一棵树不包含回路。</li>\n</ol>\n<p>下图就是一颗树，并且是一颗二叉树。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/二叉树-2.png\" alt=\"二叉树\"></p>\n<p>如上图所示，通过上面这张图说明一下树中的常用概念：</p>\n<ul>\n<li><strong>节点</strong>：树中的每个元素都可以统称为节点。</li>\n<li><strong>根节点</strong>：顶层节点或者说没有父节点的节点。上图中 A 节点就是根节点。</li>\n<li><strong>父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点。上图中的 B 节点是 D 节点、E 节点的父节点。</li>\n<li><strong>子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点。上图中 D 节点、E 节点是 B 节点的子节点。</li>\n<li><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点。上图中 D 节点、E 节点的共同父节点是 B 节点，故 D 和 E 为兄弟节点。</li>\n<li><strong>叶子节点</strong>：没有子节点的节点。上图中的 D、F、H、I 都是叶子节点。</li>\n<li><strong>节点的高度</strong>：该节点到叶子节点的最长路径所包含的边数。</li>\n<li><strong>节点的深度</strong>：根节点到该节点的路径所包含的边数</li>\n<li><strong>节点的层数</strong>：节点的深度+1。</li>\n<li><strong>树的高度</strong>：根节点的高度。</li>\n</ul>\n<blockquote>\n<p>关于树的深度和高度的定义可以看 stackoverflow 上的这个问题：<a href=\"https://stackoverflow.com/questions/2603692/what-is-the-difference-between-tree-depth-and-height\" target=\"_blank\" rel=\"noopener noreferrer\">What is the difference between tree depth and height?</a> 。</p>\n</blockquote>\n<h2>二叉树的分类</h2>\n<p><strong>二叉树</strong>（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。</p>\n<p><strong>二叉树</strong> 的分支通常被称作“<strong>左子树</strong>”或“<strong>右子树</strong>”。并且，<strong>二叉树</strong> 的分支具有左右次序，不能随意颠倒。</p>\n<p><strong>二叉树</strong> 的第 i 层至多拥有 <code>2^(i-1)</code> 个节点，深度为 k 的二叉树至多总共有 <code>2^(k+1)-1</code> 个节点（满二叉树的情况），至少有 2^(k) 个节点（关于节点的深度的定义国内争议比较多，我个人比较认可维基百科对<a href=\"https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)#/%E6%9C%AF%E8%AF%AD\" target=\"_blank\" rel=\"noopener noreferrer\">节点深度的定义</a>）。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/image-20220119112736158.png\" alt=\"危机百科对节点深度的定义\"></p>\n<h3>满二叉树</h3>\n<p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是 <strong>满二叉树</strong>。也就是说，如果一个二叉树的层数为 K，且结点总数是(2^k) -1 ，则它就是 <strong>满二叉树</strong>。如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/full-binary-tree.png\" alt=\"满二叉树\"></p>\n<h3>完全二叉树</h3>\n<p>除最后一层外，若其余层都是满的，并且最后一层是满的或者是在右边缺少连续若干节点，则这个二叉树就是 <strong>完全二叉树</strong> 。</p>\n<p>大家可以想象为一棵树从根结点开始扩展，扩展完左子节点才能开始扩展右子节点，每扩展完一层，才能继续扩展下一层。如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/complete-binary-tree.png\" alt=\"完全二叉树\"></p>\n<p>完全二叉树有一个很好的性质：<strong>父结点和子节点的序号有着对应关系。</strong></p>\n<p>细心的小伙伴可能发现了，当根节点的值为 1 的情况下，若父结点的序号是 i，那么左子节点的序号就是 2i，右子节点的序号是 2i+1。这个性质使得完全二叉树利用数组存储时可以极大地节省空间，以及利用序号找到某个节点的父结点和子节点，后续二叉树的存储会详细介绍。</p>\n<h3>平衡二叉树</h3>\n<p><strong>平衡二叉树</strong> 是一棵二叉排序树，且具有以下性质：</p>\n<ol>\n<li>可以是一棵空树</li>\n<li>如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</li>\n</ol>\n<p>平衡二叉树的常用实现方法有 <strong>红黑树</strong>、<strong>AVL 树</strong>、<strong>替罪羊树</strong>、<strong>加权平衡树</strong>、<strong>伸展树</strong> 等。</p>\n<p>在给大家展示平衡二叉树之前，先给大家看一棵树：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/oblique-tree.png\" alt=\"斜树\"></p>\n<p><strong>你管这玩意儿叫树？？？</strong></p>\n<p>没错，这玩意儿还真叫树，只不过这棵树已经退化为一个链表了，我们管它叫 <strong>斜树</strong>。</p>\n<p><strong>如果这样，那我为啥不直接用链表呢?</strong></p>\n<p>谁说不是呢？</p>\n<p>二叉树相比于链表，由于父子节点以及兄弟节点之间往往具有某种特殊的关系，这种关系使得我们在树中对数据进行<strong>搜索</strong>和<strong>修改</strong>时，相对于链表更加快捷便利。</p>\n<p>但是，如果二叉树退化为一个链表了，那么那么树所具有的优秀性质就难以表现出来，效率也会大打折，为了避免这样的情况，我们希望每个做 “家长”（父结点） 的，都 <strong>一碗水端平</strong>，分给左儿子和分给右儿子的尽可能一样多，相差最多不超过一层，如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/balanced-binary-tree.png\" alt=\"平衡二叉树\"></p>\n<h2>二叉树的存储</h2>\n<p>二叉树的存储主要分为 <strong>链式存储</strong> 和 <strong>顺序存储</strong> 两种：</p>\n<h3>链式存储</h3>\n<p>和链表类似，二叉树的链式存储依靠指针将各个节点串联起来，不需要连续的存储空间。</p>\n<p>每个节点包括三个属性：</p>\n<ul>\n<li>数据 data。data 不一定是单一的数据，根据不同情况，可以是多个具有不同类型的数据。</li>\n<li>左节点指针 left</li>\n<li>右节点指针 right。</li>\n</ul>\n<p>可是 JAVA 没有指针啊！</p>\n<p>那就直接引用对象呗（别问我对象哪里找）</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/chain-store-binary-tree.png\" alt=\"链式存储二叉树\"></p>\n<h3>顺序存储</h3>\n<p>顺序存储就是利用数组进行存储，数组中的每一个位置仅存储节点的 data，不存储左右子节点的指针，子节点的索引通过数组下标完成。根结点的序号为 1，对于每个节点 Node，假设它存储在数组中下标为 i 的位置，那么它的左子节点就存储在 2i 的位置，它的右子节点存储在下标为 2i+1 的位置。</p>\n<p>一棵完全二叉树的数组顺序存储如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/sequential-storage.png\" alt=\"完全二叉树的数组顺序存储\"></p>\n<p>大家可以试着填写一下存储如下二叉树的数组，比较一下和完全二叉树的顺序存储有何区别：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/sequential-storage2.png\" alt=\"非完全二叉树的数组顺序存储\"></p>\n<p>可以看到，如果我们要存储的二叉树不是完全二叉树，在数组中就会出现空隙，导致内存利用率降低</p>\n<h2>二叉树的遍历</h2>\n<h3>先序遍历</h3>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/preorder-traversal.png\" alt=\"先序遍历\"></p>\n<p>二叉树的先序遍历，就是先输出根结点，再遍历左子树，最后遍历右子树，遍历左子树和右子树的时候，同样遵循先序遍历的规则，也就是说，我们可以递归实现先序遍历。</p>\n<p>代码如下：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> preOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> root){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\tif</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\t\treturn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\t}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">\tsystem</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">\tpreOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">\tpreOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>中序遍历</h3>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/inorder-traversal.png\" alt=\"中序遍历\"></p>\n<p>二叉树的中序遍历，就是先递归中序遍历左子树，再输出根结点的值，再递归中序遍历右子树，大家可以想象成一巴掌把树压扁，父结点被拍到了左子节点和右子节点的中间，如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/inorder-traversal2.png\" alt=\"中序遍历\"></p>\n<p>代码如下：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> inOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> root){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\tif</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\t\treturn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\t}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">\tinOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">\tsystem</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">\tinOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>后序遍历</h3>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/postorder-traversal.png\" alt=\"后序遍历\"></p>\n<p>二叉树的后序遍历，就是先递归后序遍历左子树，再递归后序遍历右子树，最后输出根结点的值</p>\n<p>代码如下：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> postOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> root){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\tif</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\t\treturn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\t}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> postOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">\tpostOrder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">\tsystem</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/%E4%BA%8C%E5%8F%89%E6%A0%91-2.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "应用层常见协议总结（应用层）",
      "url": "https://javaguide.cn/cs-basics/network/application-layer-protocol.html",
      "id": "https://javaguide.cn/cs-basics/network/application-layer-protocol.html",
      "summary": "HTTP:超文本传输协议 超文本传输协议（HTTP，HyperText Transfer Protocol) 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。 HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP ...",
      "content_html": "<h2>HTTP:超文本传输协议</h2>\n<p><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong> 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</p>\n<p>HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP Request（请求），服务器响应请求并返回 HTTP Response（响应），整个过程如下图所示。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/450px-HTTP-Header.png\" alt=\"\"></p>\n<p>HTTP 协议基于 TCP 协议，发送 HTTP 请求之前首先要建立 TCP 连接也就是要经历 3 次握手。目前使用的 HTTP 协议大部分都是 1.1。在 1.1 的协议里面，默认是开启了 Keep-Alive 的，这样的话建立的连接就可以在多次请求中被复用了。</p>\n<p>另外， HTTP 协议是“无状态”的协议，它无法记录客户端用户的状态，一般我们都是通过 Session 来记录客户端用户的状态。</p>\n<h2>Websocket：全双工通信协议</h2>\n<p>WebSocket 是一种基于 TCP 连接的全双工通信协议，即客户端和服务器可以同时发送和接收数据。</p>\n<p>WebSocket 协议在 2008 年诞生，2011 年成为国际标准，几乎所有主流较新版本的浏览器都支持该协议。不过，WebSocket 不只能在基于浏览器的应用程序中使用，很多编程语言、框架和服务器都提供了 WebSocket 支持。</p>\n<p>WebSocket 协议本质上是应用层的协议，用于弥补 HTTP 协议在持久通信能力上的不足。客户端和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png\" alt=\"Websocket 示意图\"></p>\n<p>下面是 WebSocket 的常见应用场景：</p>\n<ul>\n<li>视频弹幕</li>\n<li>实时消息推送，详见<a href=\"https://javaguide.cn/system-design/web-real-time-message-push.html\" target=\"_blank\" rel=\"noopener noreferrer\">Web 实时消息推送详解</a>这篇文章</li>\n<li>实时游戏对战</li>\n<li>多用户协同编辑</li>\n<li>社交聊天</li>\n<li>……</li>\n</ul>\n<p>WebSocket 的工作过程可以分为以下几个步骤：</p>\n<ol>\n<li>客户端向服务器发送一个 HTTP 请求，请求头中包含 <code>Upgrade: websocket</code> 和 <code>Sec-WebSocket-Key</code> 等字段，表示要求升级协议为 WebSocket；</li>\n<li>服务器收到这个请求后，会进行升级协议的操作，如果支持 WebSocket，它将回复一个 HTTP 101 状态码，响应头中包含 ，<code>Connection: Upgrade</code>和 <code>Sec-WebSocket-Accept: xxx</code> 等字段、表示成功升级到 WebSocket 协议。</li>\n<li>客户端和服务器之间建立了一个 WebSocket 连接，可以进行双向的数据传输。数据以帧（frames）的形式进行传送，WebSocket 的每条消息可能会被切分成多个数据帧（最小单位）。发送端会将消息切割成多个帧发送给接收端，接收端接收消息帧，并将关联的帧重新组装成完整的消息。</li>\n<li>客户端或服务器可以主动发送一个关闭帧，表示要断开连接。另一方收到后，也会回复一个关闭帧，然后双方关闭 TCP 连接。</li>\n</ol>\n<p>另外，建立 WebSocket 连接之后，通过心跳机制来保持 WebSocket 连接的稳定性和活跃性。</p>\n<h2>SMTP:简单邮件传输(发送)协议</h2>\n<p><strong>简单邮件传输(发送)协议（SMTP，Simple Mail Transfer Protocol）</strong> 基于 TCP 协议，是一种用于发送电子邮件的协议</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/what-is-smtp.png\" alt=\"SMTP 协议\"></p>\n<p>注意 ⚠️：<strong>接受邮件的协议不是 SMTP 而是 POP3 协议。</strong></p>\n<p>SMTP 协议这块涉及的内容比较多，下面这两个问题比较重要：</p>\n<ol>\n<li>电子邮件的发送过程</li>\n<li>如何判断邮箱是真正存在的？</li>\n</ol>\n<p><strong>电子邮件的发送过程？</strong></p>\n<p>比如我的邮箱是“<a href=\"mailto:dabai@cszhinan.com\" target=\"_blank\" rel=\"noopener noreferrer\">dabai@cszhinan.com</a>”，我要向“<a href=\"mailto:xiaoma@qq.com\" target=\"_blank\" rel=\"noopener noreferrer\">xiaoma@qq.com</a>”发送邮件，整个过程可以简单分为下面几步：</p>\n<ol>\n<li>通过 <strong>SMTP</strong> 协议，我将我写好的邮件交给 163 邮箱服务器（邮局）。</li>\n<li>163 邮箱服务器发现我发送的邮箱是 qq 邮箱，然后它使用 SMTP 协议将我的邮件转发到 qq 邮箱服务器。</li>\n<li>qq 邮箱服务器接收邮件之后就通知邮箱为“<a href=\"mailto:xiaoma@qq.com\" target=\"_blank\" rel=\"noopener noreferrer\">xiaoma@qq.com</a>”的用户来收邮件，然后用户就通过 <strong>POP3/IMAP</strong> 协议将邮件取出。</li>\n</ol>\n<p><strong>如何判断邮箱是真正存在的？</strong></p>\n<p>很多场景(比如邮件营销)下面我们需要判断我们要发送的邮箱地址是否真的存在，这个时候我们可以利用 SMTP 协议来检测：</p>\n<ol>\n<li>查找邮箱域名对应的 SMTP 服务器地址</li>\n<li>尝试与服务器建立连接</li>\n<li>连接成功后尝试向需要验证的邮箱发送邮件</li>\n<li>根据返回结果判定邮箱地址的真实性</li>\n</ol>\n<p>推荐几个在线邮箱是否有效检测工具：</p>\n<ol>\n<li><a href=\"https://verify-email.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://verify-email.org/</a></li>\n<li><a href=\"http://tool.chacuo.net/mailverify\" target=\"_blank\" rel=\"noopener noreferrer\">http://tool.chacuo.net/mailverify</a></li>\n<li><a href=\"https://www.emailcamel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.emailcamel.com/</a></li>\n</ol>\n<h2>POP3/IMAP:邮件接收的协议</h2>\n<p>这两个协议没必要多做阐述，只需要了解 <strong>POP3 和 IMAP 两者都是负责邮件接收的协议</strong> 即可（二者也是基于 TCP 协议）。另外，需要注意不要将这两者和 SMTP 协议搞混淆了。<strong>SMTP 协议只负责邮件的发送，真正负责接收的协议是 POP3/IMAP。</strong></p>\n<p>IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</p>\n<h2>FTP:文件传输协议</h2>\n<p><strong>FTP 协议</strong> 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。</p>\n<p>FTP 是基于客户—服务器（C/S）模型而设计的，在客户端与 FTP 服务器之间建立两个连接。如果我们要基于 FTP 协议开发一个文件传输的软件的话，首先需要搞清楚 FTP 的原理。关于 FTP 的原理，很多书籍上已经描述的非常详细了：</p>\n<blockquote>\n<p>FTP 的独特的优势同时也是与其它客户服务器程序最大的不同点就在于它在两台通信的主机之间使用了两条 TCP 连接（其它客户服务器应用程序一般只有一条 TCP 连接）：</p>\n<ol>\n<li>控制连接：用于传送控制信息（命令和响应）</li>\n<li>数据连接：用于数据传送；</li>\n</ol>\n<p>这种将命令和数据分开传送的思想大大提高了 FTP 的效率。</p>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/ftp.png\" alt=\"FTP工作过程\"></p>\n<p>注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。因此，FTP 传输的文件可能会被窃听或篡改。建议在传输敏感数据时使用更安全的协议，如 SFTP（SSH File Transfer Protocol，一种基于 SSH 协议的安全文件传输协议，用于在网络上安全地传输文件）。</p>\n<h2>Telnet:远程登陆协议</h2>\n<p><strong>Telnet 协议</strong> 基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/Telnet_is_vulnerable_to_eavesdropping-2.png\" alt=\"Telnet:远程登陆协议\"></p>\n<h2>SSH:安全的网络传输协议</h2>\n<p><strong>SSH（Secure Shell）</strong> 基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务。</p>\n<p>SSH 的经典用途是登录到远程电脑中执行命令。除此之外，SSH 也支持隧道协议、端口映射和 X11 连接（允许用户在本地运行远程服务器上的图形应用程序）。借助 SFTP（SSH File Transfer Protocol） 或 SCP（Secure Copy Protocol） 协议，SSH 还可以安全传输文件。</p>\n<p>SSH 使用客户端-服务器模型，默认端口是 22。SSH 是一个守护进程，负责实时监听客户端请求，并进行处理。大多数现代操作系统都提供了 SSH。</p>\n<p>如下图所示，SSH Client（SSH 客户端）和 SSH Server（SSH 服务器）通过公钥交换生成共享的对称加密密钥，用于后续的加密通信。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/ssh-client-server.png\" alt=\"SSH:安全的网络传输协议\"></p>\n<h2>RTP:实时传输协议</h2>\n<p>RTP（Real-time Transport Protocol，实时传输协议）通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</p>\n<p>RTP 协议分为两种子协议：</p>\n<ul>\n<li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：传输具有实时特性的数据。</li>\n<li><strong>RTCP（RTP Control Protocol，RTP 控制协议）</strong>：提供实时传输过程中的统计信息（如网络延迟、丢包率等），WebRTC 正是根据这些信息处理丢包</li>\n</ul>\n<h2>DNS:域名系统</h2>\n<p>DNS（Domain Name System，域名管理系统）基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png\" alt=\"DNS:域名系统\"></p>\n<h2>参考</h2>\n<ul>\n<li>《计算机网络自顶向下方法》（第七版）</li>\n<li>RTP 协议介绍:<a href=\"https://mthli.xyz/rtp-introduction/\" target=\"_blank\" rel=\"noopener noreferrer\">https://mthli.xyz/rtp-introduction/</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/450px-HTTP-Header.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "ARP 协议详解(网络层)",
      "url": "https://javaguide.cn/cs-basics/network/arp.html",
      "id": "https://javaguide.cn/cs-basics/network/arp.html",
      "summary": "每当我们学习一个新的网络协议的时候，都要把他结合到 OSI 七层模型中，或者是 TCP/IP 协议栈中来学习，一是要学习该协议在整个网络协议栈中的位置，二是要学习该协议解决了什么问题，地位如何？三是要学习该协议的工作原理，以及一些更深入的细节。 ARP 协议，可以说是在协议栈中属于一个偏底层的、非常重要的、又非常简单的通信协议。 开始阅读这篇文章之前，...",
      "content_html": "<p>每当我们学习一个新的网络协议的时候，都要把他结合到 OSI 七层模型中，或者是 TCP/IP 协议栈中来学习，一是要学习该协议在整个网络协议栈中的位置，二是要学习该协议解决了什么问题，地位如何？三是要学习该协议的工作原理，以及一些更深入的细节。</p>\n<p><strong>ARP 协议</strong>，可以说是在协议栈中属于一个<strong>偏底层的、非常重要的、又非常简单的</strong>通信协议。</p>\n<p>开始阅读这篇文章之前，你可以先看看下面几个问题：</p>\n<ol>\n<li><strong>ARP 协议在协议栈中的位置？</strong> ARP 协议在协议栈中的位置非常重要，在理解了它的工作原理之后，也很难说它到底是网络层协议，还是链路层协议，因为它恰恰串联起了网络层和链路层。国外的大部分教程通常将 ARP 协议放在网络层。</li>\n<li><strong>ARP 协议解决了什么问题，地位如何？</strong> ARP 协议，全称 <strong>地址解析协议（Address Resolution Protocol）</strong>，它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li>\n<li><strong>ARP 工作原理？</strong> 只希望大家记住几个关键词：<strong>ARP 表、广播问询、单播响应</strong>。</li>\n</ol>\n<h2>MAC 地址</h2>\n<p>在介绍 ARP 协议之前，有必要介绍一下 MAC 地址。</p>\n<p>MAC 地址的全称是 <strong>媒体访问控制地址（Media Access Control Address）</strong>。如果说，互联网中每一个资源都由 IP 地址唯一标识（IP 协议内容），那么一切网络设备都由 MAC 地址唯一标识。</p>\n<p></p>\n<p>可以理解为，MAC 地址是一个网络设备真正的身份证号，IP 地址只是一种不重复的定位方式（比如说住在某省某市某街道的张三，这种逻辑定位是 IP 地址，他的身份证号才是他的 MAC 地址），也可以理解为 MAC 地址是身份证号，IP 地址是邮政地址。MAC 地址也有一些别称，如 LAN 地址、物理地址、以太网地址等。</p>\n<blockquote>\n<p>还有一点要知道的是，不仅仅是网络资源才有 IP 地址，网络设备也有 IP 地址，比如路由器。但从结构上说，路由器等网络设备的作用是组成一个网络，而且通常是内网，所以它们使用的 IP 地址通常是内网 IP，内网的设备在与内网以外的设备进行通信时，需要用到 NAT 协议。</p>\n</blockquote>\n<p>MAC 地址的长度为 6 字节（48 比特），地址空间大小有 280 万亿之多（$2^{48}$），MAC 地址由 IEEE 统一管理与分配，理论上，一个网络设备中的网卡上的 MAC 地址是永久的。不同的网卡生产商从 IEEE 那里购买自己的 MAC 地址空间（MAC 的前 24 比特），也就是前 24 比特由 IEEE 统一管理，保证不会重复。而后 24 比特，由各家生产商自己管理，同样保证生产的两块网卡的 MAC 地址不会重复。</p>\n<p>MAC 地址具有可携带性、永久性，身份证号永久地标识一个人的身份，不论他到哪里都不会改变。而 IP 地址不具有这些性质，当一台设备更换了网络，它的 IP 地址也就可能发生改变，也就是它在互联网中的定位发生了变化。</p>\n<p>最后，记住，MAC 地址有一个特殊地址：FF-FF-FF-FF-FF-FF（全 1 地址），该地址表示广播地址。</p>\n<h2>ARP 协议工作原理</h2>\n<p>ARP 协议工作时有一个大前提，那就是 <strong>ARP 表</strong>。</p>\n<p>在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <code>&lt;IP, MAC, TTL&gt;</code> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。</p>\n<p>ARP 的工作原理将分两种场景讨论：</p>\n<ol>\n<li><strong>同一局域网内的 MAC 寻址</strong>；</li>\n<li><strong>从一个局域网到另一个局域网中的网络设备的寻址</strong>。</li>\n</ol>\n<h3>同一局域网内的 MAC 寻址</h3>\n<p>假设当前有如下场景：IP 地址为<code>137.196.7.23</code>的主机 A，想要给同一局域网内的 IP 地址为<code>137.196.7.14</code>主机 B，发送 IP 数据报文。</p>\n<blockquote>\n<p>再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。</p>\n</blockquote>\n<p>为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：</p>\n<ol>\n<li>\n<p>主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。</p>\n</li>\n<li>\n<p>主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。</p>\n<p>ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——<code>FF-FF-FF-FF-FF-FF</code>，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。</p>\n</li>\n<li>\n<p>主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。</p>\n</li>\n<li>\n<p>主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。</p>\n<p>ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。</p>\n</li>\n<li>\n<p>主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。</p>\n</li>\n</ol>\n<p></p>\n<p>在整个过程中，有几点需要补充说明的是：</p>\n<ol>\n<li>主机 A 想要给主机 B 发送 IP 数据报，如果主机 B 的 IP-MAC 映射信息已经存在于主机 A 的 ARP 表中，那么主机 A 无需广播，只需提取 MAC 地址并构造链路层帧发送即可。</li>\n<li>ARP 表中的映射信息是有生存周期的，典型值为 20 分钟。</li>\n<li>目标主机接收到了问询主机构造的问询报文后，将先把问询主机的 IP-MAC 映射存进自己的 ARP 表中，这样才能获取到响应的目标 MAC 地址，顺利的发送响应分组。</li>\n</ol>\n<p>总结来说，ARP 协议是一个<strong>广播问询，单播响应</strong>协议。</p>\n<h3>不同局域网内的 MAC 寻址</h3>\n<p>更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。</p>\n<p>接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在的子网内所有设备（接口）都将会捕获该分组，因为该分组的目的 IP 与发送主机 A 的 IP 在同一个子网中。但是当目的 IP 与 A 不在同一子网时，A 所在子网内将不会有设备成功接收该分组。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：</p>\n<ol>\n<li>\n<p>主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。</p>\n<p>目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。</p>\n</li>\n<li>\n<p>主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。</p>\n</li>\n<li>\n<p>主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是<strong>本子网内与路由器连接的接口的 MAC 地址</strong>。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。</p>\n</li>\n<li>\n<p>目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。</p>\n<p>到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。</p>\n</li>\n<li>\n<p>路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。</p>\n</li>\n<li>\n<p>路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。</p>\n</li>\n<li>\n<p>路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。</p>\n</li>\n</ol>\n<p></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "《计算机网络》（谢希仁）内容总结",
      "url": "https://javaguide.cn/cs-basics/network/computer-network-xiexiren-summary.html",
      "id": "https://javaguide.cn/cs-basics/network/computer-network-xiexiren-summary.html",
      "summary": "本文是我在大二学习计算机网络期间整理， 大部分内容都来自于谢希仁老师的《计算机网络》第七版这本书。为了内容更容易理解，我对之前的整理进行了一波重构，并配上了一些相关的示意图便于理解。 相关问题：如何评价谢希仁的计算机网络（第七版）？ - 知乎 。 1. 计算机网络概述 1.1. 基本术语 结点 （node）：网络中的结点可以是计算机，集线器，交换机或路...",
      "content_html": "<p>本文是我在大二学习计算机网络期间整理， 大部分内容都来自于谢希仁老师的<a href=\"https://www.elias.ltd/usr/local/etc/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E7%AC%AC7%E7%89%88%EF%BC%89%E8%B0%A2%E5%B8%8C%E4%BB%81.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">《计算机网络》第七版</a>这本书。为了内容更容易理解，我对之前的整理进行了一波重构，并配上了一些相关的示意图便于理解。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/fb5d8645cd55484ab0177f25a13e97db~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>相关问题：<a href=\"https://www.zhihu.com/question/327872966\" target=\"_blank\" rel=\"noopener noreferrer\">如何评价谢希仁的计算机网络（第七版）？ - 知乎</a> 。</p>\n<h2>1. 计算机网络概述</h2>\n<h3>1.1. 基本术语</h3>\n<ol>\n<li>\n<p><strong>结点 （node）</strong>：网络中的结点可以是计算机，集线器，交换机或路由器等。</p>\n</li>\n<li>\n<p><strong>链路（link ）</strong> : 从一个结点到另一个结点的一段物理线路。中间没有任何其他交点。</p>\n</li>\n<li>\n<p><strong>主机（host）</strong>：连接在因特网上的计算机。</p>\n</li>\n<li>\n<p><strong>ISP（Internet Service Provider）</strong>：因特网服务提供者（提供商）。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/e77e26123d404d438d0c5943e3c65893~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"ISP (Internet Service Provider) Definition\"></p>\n</li>\n<li>\n<p><strong>IXP（Internet eXchange Point）</strong>：互联网交换点 IXP 的主要作用就是允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/7f9a6ddaa09441ceac11cb77f7a69d8f~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"IXP Traffic Levels During the Stratos Skydive — RIPE Labs\"></p>\n<p style=\"text-align:center;font-size:13px;color:gray\">https://labs.ripe.net/Members/fergalc/ixp-traffic-during-stratos-skydive</p>\n</li>\n<li>\n<p><strong>RFC(Request For Comments)</strong>：意思是“请求评议”，包含了关于 Internet 几乎所有的重要的文字资料。</p>\n</li>\n<li>\n<p><strong>广域网 WAN（Wide Area Network）</strong>：任务是通过长距离运送主机发送的数据。</p>\n</li>\n<li>\n<p><strong>城域网 MAN（Metropolitan Area Network）</strong>：用来将多个局域网进行互连。</p>\n</li>\n<li>\n<p><strong>局域网 LAN（Local Area Network）</strong>：学校或企业大多拥有多个互连的局域网。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/eb48d21b2e984a63a26250010d7adac4~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"MAN &amp; WMAN | Red de área metropolitana, Redes informaticas, Par trenzado\"></p>\n<p style=\"text-align:center;font-size:13px;color:gray\">http://conexionesmanwman.blogspot.com/</p>\n</li>\n<li>\n<p><strong>个人区域网 PAN（Personal Area Network）</strong>：在个人工作的地方把属于个人使用的电子设备用无线技术连接起来的网络 。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/54bd7b420388494fbe917e3c9c13f1a7~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"Advantages and disadvantages of personal area network (PAN) - IT Release\"></p>\n<p style=\"text-align:center;font-size:13px;color:gray\">https://www.itrelease.com/2018/07/advantages-and-disadvantages-of-personal-area-network-pan/</p>\n</li>\n<li>\n<p><strong>分组（packet ）</strong>：因特网中传送的数据单元。由首部 header 和数据段组成。分组又称为包，首部可称为包头。</p>\n</li>\n<li>\n<p><strong>存储转发（store and forward ）</strong>：路由器收到一个分组，先检查分组是否正确，并过滤掉冲突包错误。确定包正确后，取出目的地址，通过查找表找到想要发送的输出端口地址，然后将该包发送出去。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/addb6b2211444a4da9e0ffc129dd444f~tplv-k3u1fbpfcp-zoom-1.gif\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>带宽（bandwidth）</strong>：在计算机网络中，表示在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。常用来表示网络的通信线路所能传送数据的能力。单位是“比特每秒”，记为 b/s。</p>\n</li>\n<li>\n<p><strong>吞吐量（throughput ）</strong>：表示在单位时间内通过某个网络（或信道、接口）的数据量。吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。吞吐量受网络的带宽或网络的额定速率的限制。</p>\n</li>\n</ol>\n<h3>1.2. 重要知识点总结</h3>\n<ol>\n<li><strong>计算机网络（简称网络）把许多计算机连接在一起，而互联网把许多网络连接在一起，是网络的网络。</strong></li>\n<li>小写字母 i 开头的 internet（互联网）是通用名词，它泛指由多个计算机网络相互连接而成的网络。在这些网络之间的通信协议（即通信规则）可以是任意的。大写字母 I 开头的 Internet（互联网）是专用名词，它指全球最大的，开放的，由众多网络相互连接而成的特定的互联网，并采用 TCP/IP 协议作为通信规则，其前身为 ARPANET。Internet 的推荐译名为因特网，现在一般流行称为互联网。</li>\n<li>路由器是实现分组交换的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。分组交换采用存储转发技术，表示把一个报文（要发送的整块数据）分为几个分组后再进行传送。在发送报文之前，先把较长的报文划分成为一个个更小的等长数据段。在每个数据段的前面加上一些由必要的控制信息组成的首部后，就构成了一个分组。分组又称为包。分组是在互联网中传送的数据单元，正是由于分组的头部包含了诸如目的地址和源地址等重要控制信息，每一个分组才能在互联网中独立的选择传输路径，并正确地交付到分组传输的终点。</li>\n<li>互联网按工作方式可划分为边缘部分和核心部分。主机在网络的边缘部分，其作用是进行信息处理。由大量网络和连接这些网络的路由器组成核心部分，其作用是提供连通性和交换。</li>\n<li>计算机通信是计算机中进程（即运行着的程序）之间的通信。计算机网络采用的通信方式是客户-服务器方式（C/S 方式）和对等连接方式（P2P 方式）。</li>\n<li>客户和服务器都是指通信中所涉及的应用进程。客户是服务请求方，服务器是服务提供方。</li>\n<li>按照作用范围的不同，计算机网络分为广域网 WAN，城域网 MAN，局域网 LAN，个人区域网 PAN。</li>\n<li><strong>计算机网络最常用的性能指标是：速率，带宽，吞吐量，时延（发送时延，处理时延，排队时延），时延带宽积，往返时间和信道利用率。</strong></li>\n<li>网络协议即协议，是为进行网络中的数据交换而建立的规则。计算机网络的各层以及其协议集合，称为网络的体系结构。</li>\n<li><strong>五层体系结构由应用层，运输层，网络层（网际层），数据链路层，物理层组成。运输层最主要的协议是 TCP 和 UDP 协议，网络层最重要的协议是 IP 协议。</strong></li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/acec0fa44041449b8088872dcd7c0b3a~tplv-k3u1fbpfcp-zoom-1.gif\" alt=\"\"></p>\n<p>下面的内容会介绍计算机网络的五层体系结构：<strong>物理层+数据链路层+网络层（网际层）+运输层+应用层</strong>。</p>\n<h2>2. 物理层（Physical Layer）</h2>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/cf1bfdd36e5f4bde94aea44bbe7a6f8a~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"物理层\"></p>\n<h3>2.1. 基本术语</h3>\n<ol>\n<li>\n<p><strong>数据（data）</strong>：运送消息的实体。</p>\n</li>\n<li>\n<p><strong>信号（signal）</strong>：数据的电气的或电磁的表现。或者说信号是适合在传输介质上传输的对象。</p>\n</li>\n<li>\n<p><strong>码元（ code）</strong>：在使用时间域（或简称为时域）的波形来表示数字信号时，代表不同离散数值的基本波形。</p>\n</li>\n<li>\n<p><strong>单工（simplex ）</strong>：只能有一个方向的通信而没有反方向的交互。</p>\n</li>\n<li>\n<p><strong>半双工（half duplex ）</strong>：通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</p>\n</li>\n<li>\n<p><strong>全双工（full duplex）</strong>：通信的双方可以同时发送和接收信息。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/b1f02095b7c34eafb3c255ee81f58c2a~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>失真</strong>：失去真实性，主要是指接受到的信号和发送的信号不同，有磨损和衰减。影响失真程度的因素：1.码元传输速率 2.信号传输距离 3.噪声干扰 4.传输媒体质量</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/f939342f543046459ffabdc476f7bca4~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>奈氏准则</strong>：在任何信道中，码元的传输的效率是有上限的，传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的判决（即识别）成为不可能。</p>\n</li>\n<li>\n<p><strong>香农定理</strong>：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</p>\n</li>\n<li>\n<p><strong>基带信号（baseband signal）</strong>：来自信源的信号。指没有经过调制的数字信号或模拟信号。</p>\n</li>\n<li>\n<p><strong>带通（频带）信号（bandpass signal）</strong>：把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道），这里调制过后的信号就是带通信号。</p>\n</li>\n<li>\n<p><strong>调制（modulation ）</strong>：对信号源的信息进行处理后加到载波信号上，使其变为适合在信道传输的形式的过程。</p>\n</li>\n<li>\n<p><strong>信噪比（signal-to-noise ratio ）</strong>：指信号的平均功率和噪声的平均功率之比，记为 S/N。信噪比（dB）=10*log10（S/N）。</p>\n</li>\n<li>\n<p><strong>信道复用（channel multiplexing ）</strong>：指多个用户共享同一个信道。（并不一定是同时）。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/5d9bf7b3db324ae7a88fcedcbace45d8~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"信道复用技术\"></p>\n</li>\n<li>\n<p><strong>比特率（bit rate ）</strong>：单位时间（每秒）内传送的比特数。</p>\n</li>\n<li>\n<p><strong>波特率（baud rate）</strong>：单位时间载波调制状态改变的次数。针对数据信号对载波的调制速率。</p>\n</li>\n<li>\n<p><strong>复用（multiplexing）</strong>：共享信道的方法。</p>\n</li>\n<li>\n<p><strong>ADSL（Asymmetric Digital Subscriber Line ）</strong>：非对称数字用户线。</p>\n</li>\n<li>\n<p><strong>光纤同轴混合网（HFC 网）</strong>：在目前覆盖范围很广的有线电视网的基础上开发的一种居民宽带接入网</p>\n</li>\n</ol>\n<h3>2.2. 重要知识点总结</h3>\n<ol>\n<li><strong>物理层的主要任务就是确定与传输媒体接口有关的一些特性，如机械特性，电气特性，功能特性，过程特性。</strong></li>\n<li>一个数据通信系统可划分为三大部分，即源系统，传输系统，目的系统。源系统包括源点（或源站，信源）和发送器，目的系统包括接收器和终点。</li>\n<li><strong>通信的目的是传送消息。如话音，文字，图像等都是消息，数据是运送消息的实体。信号则是数据的电气或电磁的表现。</strong></li>\n<li>根据信号中代表消息的参数的取值方式不同，信号可分为模拟信号（或连续信号）和数字信号（或离散信号）。在使用时间域（简称时域）的波形表示数字信号时，代表不同离散数值的基本波形称为码元。</li>\n<li>根据双方信息交互的方式，通信可划分为单向通信（或单工通信），双向交替通信（或半双工通信），双向同时通信（全双工通信）。</li>\n<li>来自信源的信号称为基带信号。信号要在信道上传输就要经过调制。调制有基带调制和带通调制之分。最基本的带通调制方法有调幅，调频和调相。还有更复杂的调制方法，如正交振幅调制。</li>\n<li>要提高数据在信道上的传递速率，可以使用更好的传输媒体，或使用先进的调制技术。但数据传输速率不可能任意被提高。</li>\n<li>传输媒体可分为两大类，即导引型传输媒体（双绞线，同轴电缆，光纤）和非导引型传输媒体（无线，红外，大气激光）。</li>\n<li>为了有效利用光纤资源，在光纤干线和用户之间广泛使用无源光网络 PON。无源光网络无需配备电源，其长期运营成本和管理成本都很低。最流行的无源光网络是以太网无源光网络 EPON 和吉比特无源光网络 GPON。</li>\n</ol>\n<h3>2.3. 补充</h3>\n<h4>2.3.1. 物理层主要做啥？</h4>\n<p>物理层主要做的事情就是 <strong>透明地传送比特流</strong>。也可以将物理层的主要任务描述为确定与传输媒体的接口的一些特性，即：机械特性（接口所用接线器的一些物理属性如形状和尺寸），电气特性（接口电缆的各条线上出现的电压的范围），功能特性（某条线上出现的某一电平的电压的意义），过程特性（对于不同功能的各种可能事件的出现顺序）。</p>\n<p><strong>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。</strong> 现有的计算机网络中的硬件设备和传输媒体的种类非常繁多，而且通信手段也有许多不同的方式。物理层的作用正是尽可能地屏蔽掉这些传输媒体和通信手段的差异，使物理层上面的数据链路层感觉不到这些差异，这样就可以使数据链路层只考虑完成本层的协议和服务，而不必考虑网络的具体传输媒体和通信手段是什么。</p>\n<h4>2.3.2. 几种常用的信道复用技术</h4>\n<ol>\n<li><strong>频分复用(FDM)</strong>：所有用户在同样的时间占用不同的带宽资源。</li>\n<li><strong>时分复用（TDM）</strong>：所有用户在不同的时间占用同样的频带宽度（分时不分频）。</li>\n<li><strong>统计时分复用 (Statistic TDM)</strong>：改进的时分复用，能够明显提高信道的利用率。</li>\n<li><strong>码分复用(CDM)</strong>：用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰。这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li>\n<li><strong>波分复用( WDM)</strong>：波分复用就是光的频分复用。</li>\n</ol>\n<h4>2.3.3. 几种常用的宽带接入技术，主要是 ADSL 和 FTTx</h4>\n<p>用户到互联网的宽带接入方法有非对称数字用户线 ADSL（用数字技术对现有的模拟电话线进行改造，而不需要重新布线。ADSL 的快速版本是甚高速数字用户线 VDSL。），光纤同轴混合网 HFC（是在目前覆盖范围很广的有线电视网的基础上开发的一种居民宽带接入网）和 FTTx（即光纤到······）。</p>\n<h2>3. 数据链路层（Data Link Layer）</h2>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/83ec6dafc8c14ca185bafb656d86f0b2~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"数据链路层\"></p>\n<h3>3.1. 基本术语</h3>\n<ol>\n<li>\n<p><strong>链路（link）</strong>：一个结点到相邻结点的一段物理链路。</p>\n</li>\n<li>\n<p><strong>数据链路（data link）</strong>：把实现控制数据运输的协议的硬件和软件加到链路上就构成了数据链路。</p>\n</li>\n<li>\n<p><strong>循环冗余检验 CRC（Cyclic Redundancy Check）</strong>：为了保证数据传输的可靠性，CRC 是数据链路层广泛使用的一种检错技术。</p>\n</li>\n<li>\n<p><strong>帧（frame）</strong>：一个数据链路层的传输单元，由一个数据链路层首部和其携带的封包所组成协议数据单元。</p>\n</li>\n<li>\n<p><strong>MTU（Maximum Transfer Uint ）</strong>：最大传送单元。帧的数据部分的的长度上限。</p>\n</li>\n<li>\n<p><strong>误码率 BER（Bit Error Rate ）</strong>：在一段时间内，传输错误的比特占所传输比特总数的比率。</p>\n</li>\n<li>\n<p><strong>PPP（Point-to-Point Protocol ）</strong>：点对点协议。即用户计算机和 ISP 进行通信时所使用的数据链路层协议。以下是 PPP 帧的示意图：<br>\n<img src=\"https://oss.javaguide.cn/p3-juejin/6b0310d3103c4149a725a28aaf001899~tplv-k3u1fbpfcp-zoom-1.jpeg\" alt=\"PPP\"></p>\n</li>\n<li>\n<p><strong>MAC 地址（Media Access Control 或者 Medium Access Control）</strong>：意译为媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置。在 OSI 模型中，第三层网络层负责 IP 地址，第二层数据链路层则负责 MAC 地址。因此一个主机会有一个 MAC 地址，而每个网络位置会有一个专属于它的 IP 地址 。地址是识别某个系统的重要标识符，“名字指出我们所要寻找的资源，地址指出资源所在的地方，路由告诉我们如何到达该处。”</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/057b83e7ec5b4c149e56255a3be89141~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"ARP (Address Resolution Protocol) explained\"></p>\n</li>\n<li>\n<p><strong>网桥（bridge）</strong>：一种用于数据链路层实现中继，连接两个或多个局域网的网络互连设备。</p>\n</li>\n<li>\n<p><strong>交换机（switch ）</strong>：广义的来说，交换机指的是一种通信系统中完成信息交换的设备。这里工作在数据链路层的交换机指的是交换式集线器，其实质是一个多接口的网桥</p>\n</li>\n</ol>\n<h3>3.2. 重要知识点总结</h3>\n<ol>\n<li>链路是从一个结点到相邻结点的一段物理链路，数据链路则在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</li>\n<li>数据链路层使用的主要是<strong>点对点信道</strong>和<strong>广播信道</strong>两种。</li>\n<li>数据链路层传输的协议数据单元是帧。数据链路层的三个基本问题是：<strong>封装成帧</strong>，<strong>透明传输</strong>和<strong>差错检测</strong></li>\n<li><strong>循环冗余检验 CRC</strong> 是一种检错方法，而帧检验序列 FCS 是添加在数据后面的冗余码</li>\n<li><strong>点对点协议 PPP</strong> 是数据链路层使用最多的一种协议，它的特点是：简单，只检测差错而不去纠正差错，不使用序号，也不进行流量控制，可同时支持多种网络层协议</li>\n<li>PPPoE 是为宽带上网的主机使用的链路层协议</li>\n<li><strong>局域网的优点是：具有广播功能，从一个站点可方便地访问全网；便于系统的扩展和逐渐演变；提高了系统的可靠性，可用性和生存性。</strong></li>\n<li>计算机与外接局域网通信需要通过通信适配器（或网络适配器），它又称为网络接口卡或网卡。<strong>计算器的硬件地址就在适配器的 ROM 中</strong>。</li>\n<li>以太网采用的无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢掉，其他什么也不做</li>\n<li>以太网采用的协议是具有冲突检测的<strong>载波监听多点接入 CSMA/CD</strong>。协议的特点是：<strong>发送前先监听，边发送边监听，一旦发现总线上出现了碰撞，就立即停止发送。然后按照退避算法等待一段随机时间后再次发送。</strong> 因此，每一个站点在自己发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。以太网上的各站点平等地争用以太网信道</li>\n<li>以太网的适配器具有过滤功能，它只接收单播帧，广播帧和多播帧。</li>\n<li>使用集线器可以在物理层扩展以太网（扩展后的以太网仍然是一个网络）</li>\n</ol>\n<h3>3.3. 补充</h3>\n<ol>\n<li>数据链路层的点对点信道和广播信道的特点，以及这两种信道所使用的协议（PPP 协议以及 CSMA/CD 协议）的特点</li>\n<li>数据链路层的三个基本问题：<strong>封装成帧</strong>，<strong>透明传输</strong>，<strong>差错检测</strong></li>\n<li>以太网的 MAC 层硬件地址</li>\n<li>适配器，转发器，集线器，网桥，以太网交换机的作用以及适用场合</li>\n</ol>\n<h2>4. 网络层（Network Layer）</h2>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/775dc8136bec486aad4f1182c68f24cd~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"网络层\"></p>\n<h3>4.1. 基本术语</h3>\n<ol>\n<li><strong>虚电路（Virtual Circuit）</strong> : 在两个终端设备的逻辑或物理端口之间，通过建立的双向的透明传输通道。虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li>\n<li><strong>IP（Internet Protocol ）</strong> : 网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一，是 TCP/IP 体系结构网际层的核心。配套的有 ARP，RARP，ICMP，IGMP。</li>\n<li><strong>ARP（Address Resolution Protocol）</strong> : 地址解析协议。地址解析协议 ARP 把 IP 地址解析为硬件地址。</li>\n<li><strong>ICMP（Internet Control Message Protocol ）</strong>：网际控制报文协议 （ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告）。</li>\n<li><strong>子网掩码（subnet mask ）</strong>：它是一种用来指明一个 IP 地址的哪些位标识的是主机所在的子网以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合 IP 地址一起使用。</li>\n<li><strong>CIDR（ Classless Inter-Domain Routing ）</strong>：无分类域间路由选择 （特点是消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，并使用各种长度的“网络前缀”(network-prefix)来代替分类地址中的网络号和子网号）。</li>\n<li><strong>默认路由（default route）</strong>：当在路由表中查不到能到达目的地址的路由时，路由器选择的路由。默认路由还可以减小路由表所占用的空间和搜索路由表所用的时间。</li>\n<li><strong>路由选择算法（Virtual Circuit）</strong>：路由选择协议的核心部分。因特网采用自适应的，分层次的路由选择协议。</li>\n</ol>\n<h3>4.2. 重要知识点总结</h3>\n<ol>\n<li><strong>TCP/IP 协议中的网络层向上只提供简单灵活的，无连接的，尽最大努力交付的数据报服务。网络层不提供服务质量的承诺，不保证分组交付的时限，所传送的分组可能出错、丢失、重复和失序。进程之间通信的可靠性由运输层负责</strong></li>\n<li>在互联网的交付有两种，一是在本网络直接交付不用经过路由器，另一种是和其他网络的间接交付，至少经过一个路由器，但最后一次一定是直接交付</li>\n<li>分类的 IP 地址由网络号字段（指明网络）和主机号字段（指明主机）组成。网络号字段最前面的类别指明 IP 地址的类别。IP 地址是一种分等级的地址结构。IP 地址管理机构分配 IP 地址时只分配网络号，主机号由得到该网络号的单位自行分配。路由器根据目的主机所连接的网络号来转发分组。一个路由器至少连接到两个网络，所以一个路由器至少应当有两个不同的 IP 地址</li>\n<li>IP 数据报分为首部和数据两部分。首部的前一部分是固定长度，共 20 字节，是所有 IP 数据包必须具有的（源地址，目的地址，总长度等重要地段都固定在首部）。一些长度可变的可选字段固定在首部的后面。IP 首部中的生存时间给出了 IP 数据报在互联网中所能经过的最大路由器数。可防止 IP 数据报在互联网中无限制的兜圈子。</li>\n<li><strong>地址解析协议 ARP 把 IP 地址解析为硬件地址。ARP 的高速缓存可以大大减少网络上的通信量。因为这样可以使主机下次再与同样地址的主机通信时，可以直接从高速缓存中找到所需要的硬件地址而不需要再去以广播方式发送 ARP 请求分组</strong></li>\n<li>无分类域间路由选择 CIDR 是解决目前 IP 地址紧缺的一个好办法。CIDR 记法在 IP 地址后面加上斜线“/”，然后写上前缀所占的位数。前缀（或网络前缀）用来指明网络，前缀后面的部分是后缀，用来指明主机。CIDR 把前缀都相同的连续的 IP 地址组成一个“CIDR 地址块”，IP 地址分配都以 CIDR 地址块为单位。</li>\n<li>网际控制报文协议是 IP 层的协议。ICMP 报文作为 IP 数据报的数据，加上首部后组成 IP 数据报发送出去。使用 ICMP 数据报并不是为了实现可靠传输。ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。ICMP 报文的种类有两种，即 ICMP 差错报告报文和 ICMP 询问报文。</li>\n<li><strong>要解决 IP 地址耗尽的问题，最根本的办法是采用具有更大地址空间的新版本 IP 协议-IPv6。</strong> IPv6 所带来的变化有 ① 更大的地址空间（采用 128 位地址）② 灵活的首部格式 ③ 改进的选项 ④ 支持即插即用 ⑤ 支持资源的预分配 ⑥IPv6 的首部改为 8 字节对齐。</li>\n<li><strong>虚拟专用网络 VPN 利用公用的互联网作为本机构专用网之间的通信载体。VPN 内使用互联网的专用地址。一个 VPN 至少要有一个路由器具有合法的全球 IP 地址，这样才能和本系统的另一个 VPN 通过互联网进行通信。所有通过互联网传送的数据都需要加密。</strong></li>\n<li>MPLS 的特点是：① 支持面向连接的服务质量 ② 支持流量工程，平衡网络负载 ③ 有效的支持虚拟专用网 VPN。MPLS 在入口节点给每一个 IP 数据报打上固定长度的“标记”，然后根据标记在第二层（链路层）用硬件进行转发（在标记交换路由器中进行标记交换），因而转发速率大大加快。</li>\n</ol>\n<h2>5. 传输层（Transport Layer）</h2>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/9fe85e137e7f4f03a580512200a59609~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"传输层\"></p>\n<h3>5.1. 基本术语</h3>\n<ol>\n<li>\n<p><strong>进程（process）</strong>：指计算机中正在运行的程序实体。</p>\n</li>\n<li>\n<p><strong>应用进程互相通信</strong>：一台主机的进程和另一台主机中的一个进程交换数据的过程（另外注意通信真正的端点不是主机而是主机中的进程，也就是说端到端的通信是应用进程之间的通信）。</p>\n</li>\n<li>\n<p><strong>传输层的复用与分用</strong>：复用指发送方不同的进程都可以通过同一个运输层协议传送数据。分用指接收方的运输层在剥去报文的首部后能把这些数据正确的交付到目的应用进程。</p>\n</li>\n<li>\n<p><strong>TCP（Transmission Control Protocol）</strong>：传输控制协议。</p>\n</li>\n<li>\n<p><strong>UDP（User Datagram Protocol）</strong>：用户数据报协议。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/b136e69e0b9b426782f77623dcf098bd~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"TCP 和 UDP\"></p>\n</li>\n<li>\n<p><strong>端口（port）</strong>：端口的目的是为了确认对方机器的哪个进程在与自己进行交互，比如 MSN 和 QQ 的端口不同，如果没有端口就可能出现 QQ 进程和 MSN 交互错误。端口又称协议端口号。</p>\n</li>\n<li>\n<p><strong>停止等待协议（stop-and-wait）</strong>：指发送方每发送完一个分组就停止发送，等待对方确认，在收到确认之后在发送下一个分组。</p>\n</li>\n<li>\n<p><strong>流量控制</strong> : 就是让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。</p>\n</li>\n<li>\n<p><strong>拥塞控制</strong>：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。</p>\n</li>\n</ol>\n<h3>5.2. 重要知识点总结</h3>\n<ol>\n<li><strong>运输层提供应用进程之间的逻辑通信，也就是说，运输层之间的通信并不是真正在两个运输层之间直接传输数据。运输层向应用层屏蔽了下面网络的细节（如网络拓补，所采用的路由选择协议等），它使应用进程之间看起来好像两个运输层实体之间有一条端到端的逻辑通信信道。</strong></li>\n<li><strong>网络层为主机提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信。</strong></li>\n<li>运输层的两个重要协议是用户数据报协议 UDP 和传输控制协议 TCP。按照 OSI 的术语，两个对等运输实体在通信时传送的数据单位叫做运输协议数据单元 TPDU（Transport Protocol Data Unit）。但在 TCP/IP 体系中，则根据所使用的协议是 TCP 或 UDP，分别称之为 TCP 报文段或 UDP 用户数据报。</li>\n<li><strong>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式。 TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的传输服务，难以避免地增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。</strong></li>\n<li>硬件端口是不同硬件设备进行交互的接口，而软件端口是应用层各种协议进程与运输实体进行层间交互的一种地址。UDP 和 TCP 的首部格式中都有源端口和目的端口这两个重要字段。当运输层收到 IP 层交上来的运输层报文时，就能够根据其首部中的目的端口号把数据交付应用层的目的应用层。（两个进程之间进行通信不光要知道对方 IP 地址而且要知道对方的端口号(为了找到对方计算机中的应用进程)）</li>\n<li>运输层用一个 16 位端口号标志一个端口。端口号只有本地意义，它只是为了标志计算机应用层中的各个进程在和运输层交互时的层间接口。在互联网的不同计算机中，相同的端口号是没有关联的。协议端口号简称端口。虽然通信的终点是应用进程，但只要把所发送的报文交到目的主机的某个合适端口，剩下的工作（最后交付目的进程）就由 TCP 和 UDP 来完成。</li>\n<li>运输层的端口号分为服务器端使用的端口号（0˜1023 指派给熟知端口，1024˜49151 是登记端口号）和客户端暂时使用的端口号（49152˜65535）</li>\n<li><strong>UDP 的主要特点是 ① 无连接 ② 尽最大努力交付 ③ 面向报文 ④ 无拥塞控制 ⑤ 支持一对一，一对多，多对一和多对多的交互通信 ⑥ 首部开销小（只有四个字段：源端口，目的端口，长度和检验和）</strong></li>\n<li><strong>TCP 的主要特点是 ① 面向连接 ② 每一条 TCP 连接只能是一对一的 ③ 提供可靠交付 ④ 提供全双工通信 ⑤ 面向字节流</strong></li>\n<li><strong>TCP 用主机的 IP 地址加上主机上的端口号作为 TCP 连接的端点。这样的端点就叫做套接字（socket）或插口。套接字用（IP 地址：端口号）来表示。每一条 TCP 连接唯一地被通信两端的两个端点所确定。</strong></li>\n<li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>\n<li>为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用流水线传输。流水线传输就是发送方可连续发送多个分组，不必每发完一个分组就停下来等待对方确认。这样可使信道上一直有数据不间断的在传送。这种传输方式可以明显提高信道利用率。</li>\n<li>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求 ARQ。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。连续 ARQ 协议可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</li>\n<li>TCP 报文段的前 20 个字节是固定的，其后有 40 字节长度的可选字段。如果加入可选字段后首部长度不是 4 的整数倍字节，需要在再在之后用 0 填充。因此，TCP 首部的长度取值为 20+4n 字节,最长为 60 字节。</li>\n<li><strong>TCP 使用滑动窗口机制。发送窗口里面的序号表示允许发送的序号。发送窗口后沿的后面部分表示已发送且已收到确认，而发送窗口前沿的前面部分表示不允许发送。发送窗口后沿的变化情况有两种可能，即不动（没有收到新的确认）和前移（收到了新的确认）。发送窗口的前沿通常是不断向前移动的。一般来说，我们总是希望数据传输更快一些。但如果发送方把数据发送的过快，接收方就可能来不及接收，这就会造成数据的丢失。所谓流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收。</strong></li>\n<li>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</li>\n<li><strong>为了进行拥塞控制，TCP 发送方要维持一个拥塞窗口 cwnd 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</strong></li>\n<li><strong>TCP 的拥塞控制采用了四种算法，即慢开始，拥塞避免，快重传和快恢复。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</strong></li>\n<li>运输连接的三个阶段，即：连接建立，数据传送和连接释放。</li>\n<li><strong>主动发起 TCP 连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫做服务器。TCP 连接采用三报文握手机制。服务器要确认用户的连接请求，然后客户要对服务器的确认进行确认。</strong></li>\n<li>TCP 的连接释放采用四报文握手机制。任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送时，则发送连接释放通知，对方确认后就完全关闭了 TCP 连接</li>\n</ol>\n<h3>5.3. 补充（重要）</h3>\n<p>以下知识点需要重点关注：</p>\n<ol>\n<li>端口和套接字的意义</li>\n<li>UDP 和 TCP 的区别以及两者的应用场景</li>\n<li>在不可靠的网络上实现可靠传输的工作原理，停止等待协议和 ARQ 协议</li>\n<li>TCP 的滑动窗口，流量控制，拥塞控制和连接管理</li>\n<li>TCP 的三次握手，四次挥手机制</li>\n</ol>\n<h2>6. 应用层（Application Layer）</h2>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/0f13f0ee13b24af7bdddf56162eb6602~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"应用层\"></p>\n<h3>6.1. 基本术语</h3>\n<ol>\n<li>\n<p><strong>域名系统（DNS）</strong>：域名系统（DNS，Domain Name System）将人类可读的域名 (例如，<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener noreferrer\">www.baidu.com</a>) 转换为机器可读的 IP 地址 (例如，220.181.38.148)。我们可以将其理解为专为互联网设计的电话薄。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/e7da4b07947f4c0094d46dc96a067df0~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p style=\"text-align:right;font-size:12px\">https://www.seobility.net/en/wiki/HTTP_headers</p>\n</li>\n<li>\n<p><strong>文件传输协议（FTP）</strong>：FTP 是 File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于 Internet 上的控制文件的双向传输。同时，它也是一个应用程序（Application）。基于不同的操作系统有不同的 FTP 应用程序，而所有这些应用程序都遵守同一种协议以传输文件。在 FTP 的使用当中，用户经常遇到两个概念：\"下载\"（Download）和\"上传\"（Upload）。 \"下载\"文件就是从远程主机拷贝文件至自己的计算机上；\"上传\"文件就是将文件从自己的计算机中拷贝至远程主机上。用 Internet 语言来说，用户可通过客户机程序向（从）远程主机上传（下载）文件。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/f3f2caaa361045a38fb89bb9fee15bd3~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"FTP工作过程\"></p>\n</li>\n<li>\n<p><strong>简单文件传输协议（TFTP）</strong>：TFTP（Trivial File Transfer Protocol,简单文件传输协议）是 TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。端口号为 69。</p>\n</li>\n<li>\n<p><strong>远程终端协议（TELNET）</strong>：Telnet 协议是 TCP/IP 协议族中的一员，是 Internet 远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用 telnet 程序，用它连接到服务器。终端使用者可以在 telnet 程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个 telnet 会话，必须输入用户名和密码来登录服务器。Telnet 是常用的远程控制 Web 服务器的方法。</p>\n</li>\n<li>\n<p><strong>万维网（WWW）</strong>：WWW 是环球信息网的缩写，（亦作“Web”、“WWW”、“'W3'”，英文全称为“World Wide Web”），中文名字为“万维网”，\"环球网\"等，常简称为 Web。分为 Web 客户端和 Web 服务器程序。WWW 可以让 Web 客户端（常用浏览器）访问浏览 Web 服务器上的页面。是一个由许多互相链接的超文本组成的系统，通过互联网访问。在这个系统中，每个有用的事物，称为一样“资源”；并且由一个全局“统一资源标识符”（URI）标识；这些资源通过超文本传输协议（Hypertext Transfer Protocol）传送给用户，而后者通过点击链接来获得资源。万维网联盟（英语：World Wide Web Consortium，简称 W3C），又称 W3C 理事会。1994 年 10 月在麻省理工学院（MIT）计算机科学实验室成立。万维网联盟的创建者是万维网的发明者蒂姆·伯纳斯-李。万维网并不等同互联网，万维网只是互联网所能提供的服务其中之一，是靠着互联网运行的一项服务。</p>\n</li>\n<li>\n<p><strong>万维网的大致工作工程：</strong></p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/ba628fd37fdc4ba59c1a74eae32e03b1~tplv-k3u1fbpfcp-zoom-1.jpeg\" alt=\"万维网的大致工作工程\"></p>\n</li>\n<li>\n<p><strong>统一资源定位符（URL）</strong>：统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p>\n</li>\n<li>\n<p><strong>超文本传输协议（HTTP）</strong>：超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。</p>\n<p>HTTP 协议的本质就是一种浏览器与服务器之间约定好的通信格式。HTTP 的原理如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/8e3efca026654874bde8be88c96e1783~tplv-k3u1fbpfcp-zoom-1.jpeg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>代理服务器（Proxy Server）</strong>：代理服务器（Proxy Server）是一种网络实体，它又称为万维网高速缓存。 代理服务器把最近的一些请求和响应暂存在本地磁盘中。当新请求到达时，若代理服务器发现这个请求与暂时存放的的请求相同，就返回暂存的响应，而不需要按 URL 的地址再次去互联网访问该资源。代理服务器可在客户端或服务器工作，也可以在中间系统工作。</p>\n</li>\n<li>\n<p><strong>简单邮件传输协议(SMTP)</strong> : SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。 SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。 通过 SMTP 协议所指定的服务器,就可以把 E-mail 寄到收信人的服务器上了，整个过程只要几分钟。SMTP 服务器则是遵循 SMTP 协议的发送邮件服务器，用来发送或中转发出的电子邮件。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/2bdccb760474435aae52559f2ef9652f~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"一个电子邮件被发送的过程\"></p>\n<p style=\"text-align:right;font-size:12px\">https://www.campaignmonitor.com/resources/knowledge-base/what-is-the-code-that-makes-bcc-or-cc-operate-in-an-email/</p>\n</li>\n<li>\n<p><strong>搜索引擎</strong> :搜索引擎（Search Engine）是指根据一定的策略、运用特定的计算机程序从互联网上搜集信息，在对信息进行组织和处理后，为用户提供检索服务，将用户检索相关的信息展示给用户的系统。搜索引擎包括全文索引、目录索引、元搜索引擎、垂直搜索引擎、集合式搜索引擎、门户搜索引擎与免费链接列表等。</p>\n</li>\n<li>\n<p><strong>垂直搜索引擎</strong>：垂直搜索引擎是针对某一个行业的专业搜索引擎，是搜索引擎的细分和延伸，是对网页库中的某类专门的信息进行一次整合，定向分字段抽取出需要的数据进行处理后再以某种形式返回给用户。垂直搜索是相对通用搜索引擎的信息量大、查询不准确、深度不够等提出来的新的搜索引擎服务模式，通过针对某一特定领域、某一特定人群或某一特定需求提供的有一定价值的信息和相关服务。其特点就是“专、精、深”，且具有行业色彩，相比较通用搜索引擎的海量信息无序化，垂直搜索引擎则显得更加专注、具体和深入。</p>\n</li>\n<li>\n<p><strong>全文索引</strong> :全文索引技术是目前搜索引擎的关键技术。试想在 1M 大小的文件中搜索一个词，可能需要几秒，在 100M 的文件中可能需要几十秒，如果在更大的文件中搜索那么就需要更大的系统开销，这样的开销是不现实的。所以在这样的矛盾下出现了全文索引技术，有时候有人叫倒排文档技术。</p>\n</li>\n<li>\n<p><strong>目录索引</strong>：目录索引（ search index/directory)，顾名思义就是将网站分门别类地存放在相应的目录中，因此用户在查询信息时，可选择关键词搜索，也可按分类目录逐层查找。</p>\n</li>\n</ol>\n<h3>6.2. 重要知识点总结</h3>\n<ol>\n<li>文件传输协议（FTP）使用 TCP 可靠的运输服务。FTP 使用客户服务器方式。一个 FTP 服务器进程可以同时为多个用户提供服务。在进行文件传输时，FTP 的客户和服务器之间要先建立两个并行的 TCP 连接:控制连接和数据连接。实际用于传输文件的是数据连接。</li>\n<li>万维网客户程序与服务器之间进行交互使用的协议是超文本传输协议 HTTP。HTTP 使用 TCP 连接进行可靠传输。但 HTTP 本身是无连接、无状态的。HTTP/1.1 协议使用了持续连接（分为非流水线方式和流水线方式）</li>\n<li>电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人邮箱中，收件人可随时上网到自己使用的邮件服务器读取，相当于电子邮箱。</li>\n<li>一个电子邮件系统有三个重要组成构件：用户代理、邮件服务器、邮件协议（包括邮件发送协议，如 SMTP，和邮件读取协议，如 POP3 和 IMAP）。用户代理和邮件服务器都要运行这些协议。</li>\n</ol>\n<h3>6.3. 补充（重要）</h3>\n<p>以下知识点需要重点关注：</p>\n<ol>\n<li>应用层的常见协议（重点关注 HTTP 协议）</li>\n<li>域名系统-从域名解析出 IP 地址</li>\n<li>访问一个网站大致的过程</li>\n<li>系统调用和应用编程接口概念</li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/p3-juejin/fb5d8645cd55484ab0177f25a13e97db~tplv-k3u1fbpfcp-zoom-1.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "DNS 域名系统详解（应用层）",
      "url": "https://javaguide.cn/cs-basics/network/dns.html",
      "id": "https://javaguide.cn/cs-basics/network/dns.html",
      "summary": "DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是域名和 IP 地址的映射问题。 DNS:域名系统 在实际使用中，有一种情况下，浏览器是可以不必动用 DNS 就可以获知域名和 IP 地址的映射的。浏览器在本地会维护一个hosts列表，一般来说浏览器要先查看要访问的域名是否...",
      "content_html": "<p>DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是<strong>域名和 IP 地址的映射问题</strong>。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png\" alt=\"DNS:域名系统\"></p>\n<p>在实际使用中，有一种情况下，浏览器是可以不必动用 DNS 就可以获知域名和 IP 地址的映射的。浏览器在本地会维护一个<code>hosts</code>列表，一般来说浏览器要先查看要访问的域名是否在<code>hosts</code>列表中，如果有的话，直接提取对应的 IP 地址记录，就好了。如果本地<code>hosts</code>列表内没有域名-IP 对应记录的话，那么 DNS 就闪亮登场了。</p>\n<p>目前 DNS 的设计采用的是分布式、层次数据库结构，<strong>DNS 是应用层协议，基于 UDP 协议之上，端口为 53</strong> 。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-protocol-overview.png\" alt=\"TCP/IP 各层协议概览\"></p>\n<h2>DNS 服务器</h2>\n<p>DNS 服务器自底向上可以依次分为以下几个层级(所有 DNS 服务器都属于以下四个类别之一):</p>\n<ul>\n<li>根 DNS 服务器。根 DNS 服务器提供 TLD 服务器的 IP 地址。目前世界上只有 13 组根服务器，我国境内目前仍没有根服务器。</li>\n<li>顶级域 DNS 服务器（TLD 服务器）。顶级域是指域名的后缀，如<code>com</code>、<code>org</code>、<code>net</code>和<code>edu</code>等。国家也有自己的顶级域，如<code>uk</code>、<code>fr</code>和<code>ca</code>。TLD 服务器提供了权威 DNS 服务器的 IP 地址。</li>\n<li>权威 DNS 服务器。在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。</li>\n<li>本地 DNS 服务器。每个 ISP（互联网服务提供商）都有一个自己的本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，它起着代理的作用，并将该请求转发到 DNS 层次结构中。严格说来，不属于 DNS 层级结构。</li>\n</ul>\n<p>世界上并不是只有 13 台根服务器，这是很多人普遍的误解，网上很多文章也是这么写的。实际上，现在根服务器数量远远超过这个数量。最初确实是为 DNS 根服务器分配了 13 个 IP 地址，每个 IP 地址对应一个不同的根 DNS 服务器。然而，由于互联网的快速发展和增长，这个原始的架构变得不太适应当前的需求。为了提高 DNS 的可靠性、安全性和性能，目前这 13 个 IP 地址中的每一个都有多个服务器，截止到 2023 年底，所有根服务器之和达到了 600 多台，未来还会继续增加。</p>\n<h2>DNS 工作流程</h2>\n<p>以下图为例，介绍 DNS 的查询解析过程。DNS 的查询解析过程分为两种模式：</p>\n<ul>\n<li><strong>迭代</strong></li>\n<li><strong>递归</strong></li>\n</ul>\n<p>下图是实践中常采用的方式，从请求主机到本地 DNS 服务器的查询是递归的，其余的查询时迭代的。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/DNS-process.png\" alt=\"\"></p>\n<p>现在，主机<code>cis.poly.edu</code>想知道<code>gaia.cs.umass.edu</code>的 IP 地址。假设主机<code>cis.poly.edu</code>的本地 DNS 服务器为<code>dns.poly.edu</code>，并且<code>gaia.cs.umass.edu</code>的权威 DNS 服务器为<code>dns.cs.umass.edu</code>。</p>\n<ol>\n<li>首先，主机<code>cis.poly.edu</code>向本地 DNS 服务器<code>dns.poly.edu</code>发送一个 DNS 请求，该查询报文包含被转换的域名<code>gaia.cs.umass.edu</code>。</li>\n<li>本地 DNS 服务器<code>dns.poly.edu</code>检查本机缓存，发现并无记录，也不知道<code>gaia.cs.umass.edu</code>的 IP 地址该在何处，不得不向根服务器发送请求。</li>\n<li>根服务器注意到请求报文中含有<code>edu</code>顶级域，因此告诉本地 DNS，你可以向<code>edu</code>的 TLD DNS 发送请求，因为目标域名的 IP 地址很可能在那里。</li>\n<li>本地 DNS 获取到了<code>edu</code>的 TLD DNS 服务器地址，向其发送请求，询问<code>gaia.cs.umass.edu</code>的 IP 地址。</li>\n<li><code>edu</code>的 TLD DNS 服务器仍不清楚请求域名的 IP 地址，但是它注意到该域名有<code>umass.edu</code>前缀，因此返回告知本地 DNS，<code>umass.edu</code>的权威服务器可能记录了目标域名的 IP 地址。</li>\n<li>这一次，本地 DNS 将请求发送给权威 DNS 服务器<code>dns.cs.umass.edu</code>。</li>\n<li>终于，由于<code>gaia.cs.umass.edu</code>向权威 DNS 服务器备案过，在这里有它的 IP 地址记录，权威 DNS 成功地将 IP 地址返回给本地 DNS。</li>\n<li>最后，本地 DNS 获取到了目标域名的 IP 地址，将其返回给请求主机。</li>\n</ol>\n<p>除了迭代式查询，还有一种递归式查询如下图，具体过程和上述类似，只是顺序有所不同。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/DNS-process2.png\" alt=\"\"></p>\n<p>另外，DNS 的缓存位于本地 DNS 服务器。由于全世界的根服务器甚少，只有 600 多台，分为 13 组，且顶级域的数量也在一个可数的范围内，因此本地 DNS 通常已经缓存了很多 TLD DNS 服务器，所以在实际查找过程中，无需访问根服务器。根服务器通常是被跳过的，不请求的。这样可以提高 DNS 查询的效率和速度，减少对根服务器和 TLD 服务器的负担。</p>\n<h2>DNS 报文格式</h2>\n<p>DNS 的报文格式如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/DNS-packet.png\" alt=\"\"></p>\n<p>DNS 报文分为查询和回答报文，两种形式的报文结构相同。</p>\n<ul>\n<li>标识符。16 比特，用于标识该查询。这个标识符会被复制到对查询的回答报文中，以便让客户用它来匹配发送的请求和接收到的回答。</li>\n<li>标志。1 比特的”查询/回答“标识位，<code>0</code>表示查询报文，<code>1</code>表示回答报文；1 比特的”权威的“标志位（当某 DNS 服务器是所请求名字的权威 DNS 服务器时，且是回答报文，使用”权威的“标志）；1 比特的”希望递归“标志位，显式地要求执行递归查询；1 比特的”递归可用“标志位，用于回答报文中，表示 DNS 服务器支持递归查询。</li>\n<li>问题数、回答 RR 数、权威 RR 数、附加 RR 数。分别指示了后面 4 类数据区域出现的数量。</li>\n<li>问题区域。包含正在被查询的主机名字，以及正被询问的问题类型。</li>\n<li>回答区域。包含了对最初请求的名字的资源记录。<strong>在回答报文的回答区域中可以包含多条 RR，因此一个主机名能够有多个 IP 地址。</strong></li>\n<li>权威区域。包含了其他权威服务器的记录。</li>\n<li>附加区域。包含了其他有帮助的记录。</li>\n</ul>\n<h2>DNS 记录</h2>\n<p>DNS 服务器在响应查询时，需要查询自己的数据库，数据库中的条目被称为 <strong>资源记录(Resource Record，RR)</strong> 。RR 提供了主机名到 IP 地址的映射。RR 是一个包含了<code>Name</code>, <code>Value</code>, <code>Type</code>, <code>TTL</code>四个字段的四元组。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/20210506174303797.png\" alt=\"\"></p>\n<p><code>TTL</code>是该记录的生存时间，它决定了资源记录应当从缓存中删除的时间。</p>\n<p><code>Name</code>和<code>Value</code>字段的取值取决于<code>Type</code>：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/20210506170307897.png\" alt=\"\"></p>\n<ul>\n<li>如果<code>Type=A</code>，则<code>Name</code>是主机名信息，<code>Value</code> 是该主机名对应的 IP 地址。这样的 RR 记录了一条主机名到 IP 地址的映射。</li>\n<li>如果 <code>Type=AAAA</code> （与 <code>A</code> 记录非常相似），唯一的区别是 A 记录使用的是 IPv4，而 <code>AAAA</code> 记录使用的是 IPv6。</li>\n<li>如果<code>Type=CNAME</code> (Canonical Name Record,真实名称记录) ，则<code>Value</code>是别名为<code>Name</code>的主机对应的规范主机名。<code>Value</code>值才是规范主机名。<code>CNAME</code> 记录将一个主机名映射到另一个主机名。<code>CNAME</code> 记录用于为现有的 <code>A</code> 记录创建别名。下文有示例。</li>\n<li>如果<code>Type=NS</code>，则<code>Name</code>是个域，而<code>Value</code>是个知道如何获得该域中主机 IP 地址的权威 DNS 服务器的主机名。通常这样的 RR 是由 TLD 服务器发布的。</li>\n<li>如果<code>Type=MX</code> ，则<code>Value</code>是个别名为<code>Name</code>的邮件服务器的规范主机名。既然有了 <code>MX</code> 记录，那么邮件服务器可以和其他服务器使用相同的别名。为了获得邮件服务器的规范主机名，需要请求 <code>MX</code> 记录；为了获得其他服务器的规范主机名，需要请求 <code>CNAME</code> 记录。</li>\n</ul>\n<p><code>CNAME</code>记录总是指向另一则域名，而非 IP 地址。假设有下述 DNS zone：</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>NAME                    TYPE   VALUE</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "HTTP 常见状态码总结（应用层）",
      "url": "https://javaguide.cn/cs-basics/network/http-status-codes.html",
      "id": "https://javaguide.cn/cs-basics/network/http-status-codes.html",
      "summary": "HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。 常见 HTTP 状态码 1xx Informational（信息性状态码） 相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。 2xx Success（成功状态码） 200 OK：请求被成功处理。例如，发送一个查询用户数据的 HTTP 请求到...",
      "content_html": "<p>HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png\" alt=\"常见 HTTP 状态码\"></p>\n<h3>1xx Informational（信息性状态码）</h3>\n<p>相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。</p>\n<h3>2xx Success（成功状态码）</h3>\n<ul>\n<li><strong>200 OK</strong>：请求被成功处理。例如，发送一个查询用户数据的 HTTP 请求到服务端，服务端正确返回了用户数据。这个是我们平时最常见的一个 HTTP 状态码。</li>\n<li><strong>201 Created</strong>：请求被成功处理并且在服务端创建了<s>一个新的资源</s>。例如，通过 POST 请求创建一个新的用户。</li>\n<li><strong>202 Accepted</strong>：服务端已经接收到了请求，但是还未处理。例如，发送一个需要服务端花费较长时间处理的请求（如报告生成、Excel 导出），服务端接收了请求但尚未处理完毕。</li>\n<li><strong>204 No Content</strong>：服务端已经成功处理了请求，但是没有返回任何内容。例如，发送请求删除一个用户，服务器成功处理了删除操作但没有返回任何内容。</li>\n</ul>\n<p>🐛 修正（参见：<a href=\"https://github.com/Snailclimb/JavaGuide/issues/2458\" target=\"_blank\" rel=\"noopener noreferrer\">issue#2458</a>）：201 Created 状态码更准确点来说是创建一个或多个新的资源，可以参考：<a href=\"https://httpwg.org/specs/rfc9110.html#status.201\" target=\"_blank\" rel=\"noopener noreferrer\">https://httpwg.org/specs/rfc9110.html#status.201</a>。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/rfc9110-201-created.png\" alt=\"\"></p>\n<p>这里格外提一下 204 状态码，平时学习/工作中见到的次数并不多。</p>\n<p><a href=\"https://tools.ietf.org/html/rfc2616#section-10.2.5\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP RFC 2616 对 204 状态码的描述</a>如下：</p>\n<blockquote>\n<p>The server has fulfilled the request but does not need to return an<br>\nentity-body, and might want to return updated metainformation. The<br>\nresponse MAY include new or updated metainformation in the form of<br>\nentity-headers, which if present SHOULD be associated with the<br>\nrequested variant.</p>\n<p>If the client is a user agent, it SHOULD NOT change its document view<br>\nfrom that which caused the request to be sent. This response is<br>\nprimarily intended to allow input for actions to take place without<br>\ncausing a change to the user agent's active document view, although<br>\nany new or updated metainformation SHOULD be applied to the document<br>\ncurrently in the user agent's active view.</p>\n<p>The 204 response MUST NOT include a message-body, and thus is always<br>\nterminated by the first empty line after the header fields.</p>\n</blockquote>\n<p>简单来说，204 状态码描述的是我们向服务端发送 HTTP 请求之后，只关注处理结果是否成功的场景。也就是说我们需要的就是一个结果：true/false。</p>\n<p>举个例子：你要追一个女孩子，你问女孩子：“我能追你吗？”，女孩子回答：“好！”。我们把这个女孩子当做是服务端就很好理解 204 状态码了。</p>\n<h3>3xx Redirection（重定向状态码）</h3>\n<ul>\n<li><strong>301 Moved Permanently</strong>：资源被永久重定向了。比如你的网站的网址更换了。</li>\n<li><strong>302 Found</strong>：资源被临时重定向了。比如你的网站的某些资源被暂时转移到另外一个网址。</li>\n</ul>\n<h3>4xx Client Error（客户端错误状态码）</h3>\n<ul>\n<li><strong>400 Bad Request</strong>：发送的 HTTP 请求存在问题。比如请求参数不合法、请求方法错误。</li>\n<li><strong>401 Unauthorized</strong>：未认证却请求需要认证之后才能访问的资源。</li>\n<li><strong>403 Forbidden</strong>：直接拒绝 HTTP 请求，不处理。一般用来针对非法请求。</li>\n<li><strong>404 Not Found</strong>：你请求的资源未在服务端找到。比如你请求某个用户的信息，服务端并没有找到指定的用户。</li>\n<li><strong>409 Conflict</strong>：表示请求的资源与服务端当前的状态存在冲突，请求无法被处理。</li>\n</ul>\n<h3>5xx Server Error（服务端错误状态码）</h3>\n<ul>\n<li><strong>500 Internal Server Error</strong>：服务端出问题了（通常是服务端出 Bug 了）。比如你服务端处理请求的时候突然抛出异常，但是异常并未在服务端被正确处理。</li>\n<li><strong>502 Bad Gateway</strong>：我们的网关将请求转发到服务端，但是服务端返回的却是一个错误的响应。</li>\n</ul>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://www.restapitutorial.com/httpstatuscodes.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.restapitutorial.com/httpstatuscodes.html</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/List_of_HTTP_status_codes</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000018264501\" target=\"_blank\" rel=\"noopener noreferrer\">https://segmentfault.com/a/1190000018264501</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "HTTP vs HTTPS（应用层）",
      "url": "https://javaguide.cn/cs-basics/network/http-vs-https.html",
      "id": "https://javaguide.cn/cs-basics/network/http-vs-https.html",
      "summary": "HTTP 协议 HTTP 协议介绍 HTTP 协议，全称超文本传输协议（Hypertext Transfer Protocol）。顾名思义，HTTP 协议就是用来规范超文本的传输，超文本，也就是网络上的包括文本在内的各式各样的消息，具体来说，主要是来规范浏览器和服务器端的行为的。 并且，HTTP 是一个无状态（stateless）协议，也就是说服务器不...",
      "content_html": "<h2>HTTP 协议</h2>\n<h3>HTTP 协议介绍</h3>\n<p>HTTP 协议，全称超文本传输协议（Hypertext Transfer Protocol）。顾名思义，HTTP 协议就是用来规范超文本的传输，超文本，也就是网络上的包括文本在内的各式各样的消息，具体来说，主要是来规范浏览器和服务器端的行为的。</p>\n<p>并且，HTTP 是一个无状态（stateless）协议，也就是说服务器不维护任何有关客户端过去所发请求的消息。这其实是一种懒政，有状态协议会更加复杂，需要维护状态（历史信息），而且如果客户或服务器失效，会产生状态的不一致，解决这种不一致的代价更高。</p>\n<h3>HTTP 协议通信过程</h3>\n<p>HTTP 是应用层协议，它以 TCP（传输层）作为底层协议，默认端口为 80. 通信过程主要如下：</p>\n<ol>\n<li>服务器在 80 端口等待客户的请求。</li>\n<li>浏览器发起到服务器的 TCP 连接（创建套接字 Socket）。</li>\n<li>服务器接收来自浏览器的 TCP 连接。</li>\n<li>浏览器（HTTP 客户端）与 Web 服务器（HTTP 服务器）交换 HTTP 消息。</li>\n<li>关闭 TCP 连接。</li>\n</ol>\n<h3>HTTP 协议优点</h3>\n<p>扩展性强、速度快、跨平台支持性好。</p>\n<h2>HTTPS 协议</h2>\n<h3>HTTPS 协议介绍</h3>\n<p>HTTPS 协议（Hyper Text Transfer Protocol Secure），是 HTTP 的加强安全版本。HTTPS 是基于 HTTP 的，也是用 TCP 作为底层协议，并额外使用 SSL/TLS 协议用作加密和安全认证。默认端口号是 443.</p>\n<p>HTTPS 协议中，SSL 通道通常使用基于密钥的加密算法，密钥长度通常是 40 比特或 128 比特。</p>\n<h3>HTTPS 协议优点</h3>\n<p>保密性好、信任度高。</p>\n<h2>HTTPS 的核心—SSL/TLS 协议</h2>\n<p>HTTPS 之所以能达到较高的安全性要求，就是结合了 SSL/TLS 和 TCP 协议，对通信数据进行加密，解决了 HTTP 数据透明的问题。接下来重点介绍一下 SSL/TLS 的工作原理。</p>\n<h3>SSL 和 TLS 的区别？</h3>\n<p><strong>SSL 和 TLS 没有太大的区别。</strong></p>\n<p>SSL 指安全套接字协议（Secure Sockets Layer），首次发布与 1996 年。SSL 的首次发布其实已经是他的 3.0 版本，SSL 1.0 从未面世，SSL 2.0 则具有较大的缺陷（DROWN 缺陷——Decrypting RSA with Obsolete and Weakened eNcryption）。很快，在 1999 年，SSL 3.0 进一步升级，<strong>新版本被命名为 TLS 1.0</strong>。因此，TLS 是基于 SSL 之上的，但由于习惯叫法，通常把 HTTPS 中的核心加密协议混称为 SSL/TLS。</p>\n<h3>SSL/TLS 的工作原理</h3>\n<h4>非对称加密</h4>\n<p>SSL/TLS 的核心要素是<strong>非对称加密</strong>。非对称加密采用两个密钥——一个公钥，一个私钥。在通信时，私钥仅由解密者保存，公钥由任何一个想与解密者通信的发送者（加密者）所知。可以设想一个场景，</p>\n<blockquote>\n<p>在某个自助邮局，每个通信信道都是一个邮箱，每一个邮箱所有者都在旁边立了一个牌子，上面挂着一把钥匙：这是我的公钥，发送者请将信件放入我的邮箱，并用公钥锁好。</p>\n<p>但是公钥只能加锁，并不能解锁。解锁只能由邮箱的所有者——因为只有他保存着私钥。</p>\n<p>这样，通信信息就不会被其他人截获了，这依赖于私钥的保密性。</p>\n</blockquote>\n<p></p>\n<p>非对称加密的公钥和私钥需要采用一种复杂的数学机制生成（密码学认为，为了较高的安全性，尽量不要自己创造加密方案）。公私钥对的生成算法依赖于单向陷门函数。</p>\n<blockquote>\n<p>单向函数：已知单向函数 f，给定任意一个输入 x，易计算输出 y=f(x)；而给定一个输出 y，假设存在 f(x)=y，很难根据 f 来计算出 x。</p>\n<p>单向陷门函数：一个较弱的单向函数。已知单向陷门函数 f，陷门 h，给定任意一个输入 x，易计算出输出 y=f(x;h)；而给定一个输出 y，假设存在 f(x;h)=y，很难根据 f 来计算出 x，但可以根据 f 和 h 来推导出 x。</p>\n</blockquote>\n<p></p>\n<p>上图就是一个单向函数（不是单项陷门函数），假设有一个绝世秘籍，任何知道了这个秘籍的人都可以把苹果汁榨成苹果，那么这个秘籍就是“陷门”了吧。</p>\n<p>在这里，函数 f 的计算方法相当于公钥，陷门 h 相当于私钥。公钥 f 是公开的，任何人对已有输入，都可以用 f 加密，而要想根据加密信息还原出原信息，必须要有私钥才行。</p>\n<h4>对称加密</h4>\n<p>使用 SSL/TLS 进行通信的双方需要使用非对称加密方案来通信，但是非对称加密设计了较为复杂的数学算法，在实际通信过程中，计算的代价较高，效率太低，因此，SSL/TLS 实际对消息的加密使用的是对称加密。</p>\n<blockquote>\n<p>对称加密：通信双方共享唯一密钥 k，加解密算法已知，加密方利用密钥 k 加密，解密方利用密钥 k 解密，保密性依赖于密钥 k 的保密性。</p>\n</blockquote>\n<p></p>\n<p>对称加密的密钥生成代价比公私钥对的生成代价低得多，那么有的人会问了，为什么 SSL/TLS 还需要使用非对称加密呢？因为对称加密的保密性完全依赖于密钥的保密性。在双方通信之前，需要商量一个用于对称加密的密钥。我们知道网络通信的信道是不安全的，传输报文对任何人是可见的，密钥的交换肯定不能直接在网络信道中传输。因此，使用非对称加密，对对称加密的密钥进行加密，保护该密钥不在网络信道中被窃听。这样，通信双方只需要一次非对称加密，交换对称加密的密钥，在之后的信息通信中，使用绝对安全的密钥，对信息进行对称加密，即可保证传输消息的保密性。</p>\n<h4>公钥传输的信赖性</h4>\n<p>SSL/TLS 介绍到这里，了解信息安全的朋友又会想到一个安全隐患，设想一个下面的场景：</p>\n<blockquote>\n<p>客户端 C 和服务器 S 想要使用 SSL/TLS 通信，由上述 SSL/TLS 通信原理，C 需要先知道 S 的公钥，而 S 公钥的唯一获取途径，就是把 S 公钥在网络信道中传输。要注意网络信道通信中有几个前提：</p>\n<ol>\n<li>任何人都可以捕获通信包</li>\n<li>通信包的保密性由发送者设计</li>\n<li>保密算法设计方案默认为公开，而（解密）密钥默认是安全的</li>\n</ol>\n<p>因此，假设 S 公钥不做加密，在信道中传输，那么很有可能存在一个攻击者 A，发送给 C 一个诈包，假装是 S 公钥，其实是诱饵服务器 AS 的公钥。当 C 收获了 AS 的公钥（却以为是 S 的公钥），C 后续就会使用 AS 公钥对数据进行加密，并在公开信道传输，那么 A 将捕获这些加密包，用 AS 的私钥解密，就截获了 C 本要给 S 发送的内容，而 C 和 S 二人全然不知。</p>\n<p>同样的，S 公钥即使做加密，也难以避免这种信任性问题，C 被 AS 拐跑了！</p>\n</blockquote>\n<p></p>\n<p>为了公钥传输的信赖性问题，第三方机构应运而生——证书颁发机构（CA，Certificate Authority）。CA 默认是受信任的第三方。CA 会给各个服务器颁发证书，证书存储在服务器上，并附有 CA 的<strong>电子签名</strong>（见下节）。</p>\n<p>当客户端（浏览器）向服务器发送 HTTPS 请求时，一定要先获取目标服务器的证书，并根据证书上的信息，检验证书的合法性。一旦客户端检测到证书非法，就会发生错误。客户端获取了服务器的证书后，由于证书的信任性是由第三方信赖机构认证的，而证书上又包含着服务器的公钥信息，客户端就可以放心的信任证书上的公钥就是目标服务器的公钥。</p>\n<h4>数字签名</h4>\n<p>好，到这一小节，已经是 SSL/TLS 的尾声了。上一小节提到了数字签名，数字签名要解决的问题，是防止证书被伪造。第三方信赖机构 CA 之所以能被信赖，就是 <strong>靠数字签名技术</strong> 。</p>\n<p>数字签名，是 CA 在给服务器颁发证书时，使用散列+加密的组合技术，在证书上盖个章，以此来提供验伪的功能。具体行为如下：</p>\n<blockquote>\n<p>CA 知道服务器的公钥，对证书采用散列技术生成一个摘要。CA 使用 CA 私钥对该摘要进行加密，并附在证书下方，发送给服务器。</p>\n<p>现在服务器将该证书发送给客户端，客户端需要验证该证书的身份。客户端找到第三方机构 CA，获知 CA 的公钥，并用 CA 公钥对证书的签名进行解密，获得了 CA 生成的摘要。</p>\n<p>客户端对证书数据（包含服务器的公钥）做相同的散列处理，得到摘要，并将该摘要与之前从签名中解码出的摘要做对比，如果相同，则身份验证成功；否则验证失败。</p>\n</blockquote>\n<p></p>\n<p>总结来说，带有证书的公钥传输机制如下：</p>\n<ol>\n<li>设有服务器 S，客户端 C，和第三方信赖机构 CA。</li>\n<li>S 信任 CA，CA 是知道 S 公钥的，CA 向 S 颁发证书。并附上 CA 私钥对消息摘要的加密签名。</li>\n<li>S 获得 CA 颁发的证书，将该证书传递给 C。</li>\n<li>C 获得 S 的证书，信任 CA 并知晓 CA 公钥，使用 CA 公钥对 S 证书上的签名解密，同时对消息进行散列处理，得到摘要。比较摘要，验证 S 证书的真实性。</li>\n<li>如果 C 验证 S 证书是真实的，则信任 S 的公钥（在 S 证书中）。</li>\n</ol>\n<p></p>\n<p>对于数字签名，我这里讲的比较简单，如果你没有搞清楚的话，强烈推荐你看看<a href=\"https://www.bilibili.com/video/BV18N411X7ty/\" target=\"_blank\" rel=\"noopener noreferrer\">数字签名及数字证书原理</a>这个视频，这是我看过最清晰的讲解。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/image-20220321121814946.png\" alt=\"\"></p>\n<h2>总结</h2>\n<ul>\n<li><strong>端口号</strong>：HTTP 默认是 80，HTTPS 默认是 443。</li>\n<li><strong>URL 前缀</strong>：HTTP 的 URL 前缀是 <code>http://</code>，HTTPS 的 URL 前缀是 <code>https://</code>。</li>\n<li><strong>安全性和资源消耗</strong>：HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "HTTP 1.0 vs HTTP 1.1（应用层）",
      "url": "https://javaguide.cn/cs-basics/network/http1.0-vs-http1.1.html",
      "id": "https://javaguide.cn/cs-basics/network/http1.0-vs-http1.1.html",
      "summary": "这篇文章会从下面几个维度来对比 HTTP 1.0 和 HTTP 1.1： 响应状态码 缓存处理 连接方式 Host 头处理 带宽优化 响应状态码 HTTP/1.0 仅定义了 16 种状态码。HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Part...",
      "content_html": "<p>这篇文章会从下面几个维度来对比 HTTP 1.0 和 HTTP 1.1：</p>\n<ul>\n<li>响应状态码</li>\n<li>缓存处理</li>\n<li>连接方式</li>\n<li>Host 头处理</li>\n<li>带宽优化</li>\n</ul>\n<h2>响应状态码</h2>\n<p>HTTP/1.0 仅定义了 16 种状态码。HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，<code>100 (Continue)</code>——在请求大资源前的预热请求，<code>206 (Partial Content)</code>——范围请求的标识码，<code>409 (Conflict)</code>——请求与当前资源的规定冲突，<code>410 (Gone)</code>——资源已被永久转移，而且没有任何已知的转发地址。</p>\n<h2>缓存处理</h2>\n<p>缓存技术通过避免用户与源服务器的频繁交互，节约了大量的网络带宽，降低了用户接收信息的延迟。</p>\n<h3>HTTP/1.0</h3>\n<p>HTTP/1.0 提供的缓存机制非常简单。服务器端使用<code>Expires</code>标签来标志（时间）一个响应体，在<code>Expires</code>标志时间内的请求，都会获得该响应体缓存。服务器端在初次返回给客户端的响应体中，有一个<code>Last-Modified</code>标签，该标签标记了被请求资源在服务器端的最后一次修改。在请求头中，使用<code>If-Modified-Since</code>标签，该标签标志一个时间，意为客户端向服务器进行问询：“该时间之后，我要请求的资源是否有被修改过？”通常情况下，请求头中的<code>If-Modified-Since</code>的值即为上一次获得该资源时，响应体中的<code>Last-Modified</code>的值。</p>\n<p>如果服务器接收到了请求头，并判断<code>If-Modified-Since</code>时间后，资源确实没有修改过，则返回给客户端一个<code>304 not modified</code>响应头，表示”缓冲可用，你从浏览器里拿吧！”。</p>\n<p>如果服务器判断<code>If-Modified-Since</code>时间后，资源被修改过，则返回给客户端一个<code>200 OK</code>的响应体，并附带全新的资源内容，表示”你要的我已经改过的，给你一份新的”。</p>\n<p></p>\n<p></p>\n<h3>HTTP/1.1</h3>\n<p>HTTP/1.1 的缓存机制在 HTTP/1.0 的基础上，大大增加了灵活性和扩展性。基本工作原理和 HTTP/1.0 保持不变，而是增加了更多细致的特性。其中，请求头中最常见的特性就是<code>Cache-Control</code>，详见 MDN Web 文档 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"noopener noreferrer\">Cache-Control</a>.</p>\n<h2>连接方式</h2>\n<p><strong>HTTP/1.0 默认使用短连接</strong> ，也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如 JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 TCP 连接，这样就会导致有大量的“握手报文”和“挥手报文”占用了带宽。</p>\n<p><strong>为了解决 HTTP/1.0 存在的资源浪费的问题， HTTP/1.1 优化为默认长连接模式 。</strong> 采用长连接模式的请求报文会通知服务端：“我向你请求连接，并且连接成功建立后，请不要关闭”。因此，该 TCP 连接将持续打开，为后续的客户端-服务端的数据交互服务。也就是说在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。</p>\n<p>如果 TCP 连接一直保持的话也是对资源的浪费，因此，一些服务器软件（如 Apache）还会支持超时时间的时间。在超时时间之内没有新的请求达到，TCP 连接才会被关闭。</p>\n<p>有必要说明的是，HTTP/1.0 仍提供了长连接选项，即在请求头中加入<code>Connection: Keep-alive</code>。同样的，在 HTTP/1.1 中，如果不希望使用长连接选项，也可以在请求头中加入<code>Connection: close</code>，这样会通知服务器端：“我不需要长连接，连接成功后即可关闭”。</p>\n<p><strong>HTTP 协议的长连接和短连接，实质上是 TCP 协议的长连接和短连接。</strong></p>\n<p><strong>实现长连接需要客户端和服务端都支持长连接。</strong></p>\n<h2>Host 头处理</h2>\n<p>域名系统（DNS）允许多个主机名绑定到同一个 IP 地址上，但是 HTTP/1.0 并没有考虑这个问题，假设我们有一个资源 URL 是<a href=\"http://example1.org/home.html%EF%BC%8CHTTP/1.0\" target=\"_blank\" rel=\"noopener noreferrer\">http://example1.org/home.html，HTTP/1.0</a> 的请求报文中，将会请求的是<code>GET /home.html HTTP/1.0</code>.也就是不会加入主机名。这样的报文送到服务器端，服务器是理解不了客户端想请求的真正网址。</p>\n<p>因此，HTTP/1.1 在请求头中加入了<code>Host</code>字段。加入<code>Host</code>字段的报文头部将会是:</p>\n<div class=\"language-plain line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plain\" data-title=\"plain\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>GET /home.html HTTP/1.1</span></span>\n<span class=\"line\"><span>Host: example1.org</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这样，服务器端就可以确定客户端想要请求的真正的网址了。</p>\n<h2>带宽优化</h2>\n<h3>范围请求</h3>\n<p>HTTP/1.1 引入了范围请求（range request）机制，以避免带宽的浪费。当客户端想请求一个文件的一部分，或者需要继续下载一个已经下载了部分但被终止的文件，HTTP/1.1 可以在请求中加入<code>Range</code>头部，以请求（并只能请求字节型数据）数据的一部分。服务器端可以忽略<code>Range</code>头部，也可以返回若干<code>Range</code>响应。</p>\n<p><code>206 (Partial Content)</code> 状态码的主要作用是确保客户端和代理服务器能正确识别部分内容响应，避免将其误认为完整资源并错误地缓存。这对于正确处理范围请求和缓存管理非常重要。</p>\n<p>一个典型的 HTTP/1.1 范围请求示例：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 获取一个文件的前 1024 个字节</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">GET</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /z4d4kWk.jpg</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> HTTP/1.1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Host:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> i.imgur.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Range:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bytes=0-1023</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>206 Partial Content</code> 响应：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">HTTP/1.1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 206</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Partial</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Content</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Range:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bytes</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0-1023/146515</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Length:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1024</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">…</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">（二进制内容）</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>简单解释一下 HTTP 范围响应头部中的字段：</p>\n<ul>\n<li><strong><code>Content-Range</code> 头部</strong>：指示返回数据在整个资源中的位置，包括起始和结束字节以及资源的总长度。例如，<code>Content-Range: bytes 0-1023/146515</code> 表示服务器端返回了第 0 到 1023 字节的数据（共 1024 字节），而整个资源的总长度是 146,515 字节。</li>\n<li><strong><code>Content-Length</code> 头部</strong>：指示此次响应中实际传输的字节数。例如，<code>Content-Length: 1024</code> 表示服务器端传输了 1024 字节的数据。</li>\n</ul>\n<p><code>Range</code> 请求头不仅可以请求单个字节范围，还可以一次性请求多个范围。这种方式被称为“多重范围请求”（multiple range requests）。</p>\n<p>客户端想要获取资源的第 0 到 499 字节以及第 1000 到 1499 字节：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">GET</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /path/to/resource</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> HTTP/1.1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Host:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> example.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Range:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bytes=0-499,1000-1499</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>服务器端返回多个字节范围，每个范围的内容以分隔符分开：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">HTTP/1.1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 206</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Partial</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Content</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Type:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> multipart/byteranges</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">boundary</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">3d6b6a416f9b5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Length:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 376</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">--3d6b6a416f9b5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Type:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> application/octet-stream</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Range:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bytes</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 0-99/2000</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">第</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 到</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 99</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 字节的数据块</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">--3d6b6a416f9b5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Type:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> application/octet-stream</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Range:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bytes</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 500-599/2000</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">第</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 500</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 到</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 599</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 字节的数据块</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">--3d6b6a416f9b5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Type:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> application/octet-stream</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Content-Range:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bytes</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1000-1099/2000</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">第</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1000</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 到</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1099</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 字节的数据块</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">--3d6b6a416f9b5--</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>状态码 100</h3>\n<p>HTTP/1.1 中新加入了状态码<code>100</code>。该状态码的使用场景为，存在某些较大的文件请求，服务器可能不愿意响应这种请求，此时状态码<code>100</code>可以作为指示请求是否会被正常响应，过程如下图：</p>\n<p></p>\n<p></p>\n<p>然而在 HTTP/1.0 中，并没有<code>100 (Continue)</code>状态码，要想触发这一机制，可以发送一个<code>Expect</code>头部，其中包含一个<code>100-continue</code>的值。</p>\n<h3>压缩</h3>\n<p>许多格式的数据在传输时都会做预压缩处理。数据的压缩可以大幅优化带宽的利用。然而，HTTP/1.0 对数据压缩的选项提供的不多，不支持压缩细节的选择，也无法区分端到端（end-to-end）压缩或者是逐跳（hop-by-hop）压缩。</p>\n<p>HTTP/1.1 则对内容编码（content-codings）和传输编码（transfer-codings）做了区分。内容编码总是端到端的，传输编码总是逐跳的。</p>\n<p>HTTP/1.0 包含了<code>Content-Encoding</code>头部，对消息进行端到端编码。HTTP/1.1 加入了<code>Transfer-Encoding</code>头部，可以对消息进行逐跳传输编码。HTTP/1.1 还加入了<code>Accept-Encoding</code>头部，是客户端用来指示他能处理什么样的内容编码。</p>\n<h2>总结</h2>\n<ol>\n<li><strong>连接方式</strong> : HTTP 1.0 为短连接，HTTP 1.1 支持长连接。</li>\n<li><strong>状态响应码</strong> : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，<code>100 (Continue)</code>——在请求大资源前的预热请求，<code>206 (Partial Content)</code>——范围请求的标识码，<code>409 (Conflict)</code>——请求与当前资源的规定冲突，<code>410 (Gone)</code>——资源已被永久转移，而且没有任何已知的转发地址。</li>\n<li><strong>缓存处理</strong> : 在 HTTP1.0 中主要使用 header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li>\n<li><strong>带宽优化及网络连接的使用</strong> :HTTP1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li>\n<li><strong>Host 头处理</strong> : HTTP/1.1 在请求头中加入了<code>Host</code>字段。</li>\n</ol>\n<h2>参考资料</h2>\n<p><a href=\"http://www.ra.ethz.ch/cdstore/www8/data/2136/pdf/pd1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Key differences between HTTP/1.0 and HTTP/1.1</a></p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "NAT 协议详解（网络层）",
      "url": "https://javaguide.cn/cs-basics/network/nat.html",
      "id": "https://javaguide.cn/cs-basics/network/nat.html",
      "summary": "应用场景 NAT 协议（Network Address Translation） 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，Local Area Network，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（Wide Area Netwo...",
      "content_html": "<h2>应用场景</h2>\n<p><strong>NAT 协议（Network Address Translation）</strong> 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，Local Area Network，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（Wide Area Network，WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</p>\n<p>这个场景其实不难理解。随着一个个小型办公室、家庭办公室（Small Office, Home Office, SOHO）的出现，为了管理这些 SOHO，一个个子网被设计出来，从而在整个 Internet 中的主机数量将非常庞大。如果每个主机都有一个“绝对唯一”的 IP 地址，那么 IPv4 地址的表达能力可能很快达到上限（$2^{32}$）。因此，实际上，SOHO 子网中的 IP 地址是“相对的”，这在一定程度上也缓解了 IPv4 地址的分配压力。</p>\n<p>SOHO 子网的“代理人”，也就是和外界的窗口，通常由路由器扮演。路由器的 LAN 一侧管理着一个小子网，而它的 WAN 接口才是真正参与到 Internet 中的接口，也就有一个“绝对唯一的地址”。NAT 协议，正是在 LAN 中的主机在与 LAN 外界通信时，起到了地址转换的关键作用。</p>\n<h2>细节</h2>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/nat-demo.png\" alt=\"NAT 协议\"></p>\n<p>假设当前场景如上图。中间是一个路由器，它的右侧组织了一个 LAN，网络号为<code>10.0.0/24</code>。LAN 侧接口的 IP 地址为<code>10.0.0.4</code>，并且该子网内有至少三台主机，分别是<code>10.0.0.1</code>，<code>10.0.0.2</code>和<code>10.0.0.3</code>。路由器的左侧连接的是 WAN，WAN 侧接口的 IP 地址为<code>138.76.29.7</code>。</p>\n<p>首先，针对以上信息，我们有如下事实需要说明：</p>\n<ol>\n<li>路由器的右侧子网的网络号为<code>10.0.0/24</code>，主机号为<code>10.0.0/8</code>，三台主机地址，以及路由器的 LAN 侧接口地址，均由 DHCP 协议规定。而且，该 DHCP 运行在路由器内部（路由器自维护一个小 DHCP 服务器），从而为子网内提供 DHCP 服务。</li>\n<li>路由器的 WAN 侧接口地址同样由 DHCP 协议规定，但该地址是路由器从 ISP（网络服务提供商）处获得，也就是该 DHCP 通常运行在路由器所在区域的 DHCP 服务器上。</li>\n</ol>\n<p>现在，路由器内部还运行着 NAT 协议，从而为 LAN-WAN 间通信提供地址转换服务。为此，一个很重要的结构是 <strong>NAT 转换表</strong>。为了说明 NAT 的运行细节，假设有以下请求发生：</p>\n<ol>\n<li>主机<code>10.0.0.1</code>向 IP 地址为<code>128.119.40.186</code>的 Web 服务器（端口 80）发送了 HTTP 请求（如请求页面）。此时，主机<code>10.0.0.1</code>将随机指派一个端口，如<code>3345</code>，作为本次请求的源端口号，将该请求发送到路由器中（目的地址将是<code>128.119.40.186</code>，但会先到达<code>10.0.0.4</code>）。</li>\n<li><code>10.0.0.4</code>即路由器的 LAN 接口收到<code>10.0.0.1</code>的请求。路由器将为该请求指派一个新的源端口号，如<code>5001</code>，并将请求报文发送给 WAN 接口<code>138.76.29.7</code>。同时，在 NAT 转换表中记录一条转换记录<strong>138.76.29.7:5001——10.0.0.1:3345</strong>。</li>\n<li>请求报文到达 WAN 接口，继续向目的主机<code>128.119.40.186</code>发送。</li>\n</ol>\n<p>之后，将会有如下响应发生：</p>\n<ol>\n<li>主机<code>128.119.40.186</code>收到请求，构造响应报文，并将其发送给目的地<code>138.76.29.7:5001</code>。</li>\n<li>响应报文到达路由器的 WAN 接口。路由器查询 NAT 转换表，发现<code>138.76.29.7:5001</code>在转换表中有记录，从而将其目的地址和目的端口转换成为<code>10.0.0.1:3345</code>，再发送到<code>10.0.0.4</code>上。</li>\n<li>被转换的响应报文到达路由器的 LAN 接口，继而被转发至目的地<code>10.0.0.1</code>。</li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/nat-demo2.png\" alt=\"LAN-WAN 间通信提供地址转换\"></p>\n<p>🐛 修正（参见：<a href=\"https://github.com/Snailclimb/JavaGuide/issues/2009\" target=\"_blank\" rel=\"noopener noreferrer\">issue#2009</a>）：上图第四步的 Dest 值应该为 <code>10.0.0.1:3345</code> 而不是~~<code>138.76.29.7:5001</code>~~，这里笔误了。</p>\n<h2>划重点</h2>\n<p>针对以上过程，有以下几个重点需要强调：</p>\n<ol>\n<li>当请求报文到达路由器，并被指定了新端口号时，由于端口号有 16 位，因此，通常来说，一个路由器管理的 LAN 中的最大主机数 $≈65500$（$2^{16}$ 的地址空间），但通常 SOHO 子网内不会有如此多的主机数量。</li>\n<li>对于目的服务器来说，从来不知道“到底是哪个主机给我发送的请求”，它只知道是来自<code>138.76.29.7:5001</code>的路由器转发的请求。因此，可以说，<strong>路由器在 WAN 和 LAN 之间起到了屏蔽作用</strong>，所有内部主机发送到外部的报文，都具有同一个 IP 地址（不同的端口号），所有外部发送到内部的报文，也都只有一个目的地（不同端口号），是经过了 NAT 转换后，外部报文才得以正确地送达内部主机。</li>\n<li>在报文穿过路由器，发生 NAT 转换时，如果 LAN 主机 IP 已经在 NAT 转换表中注册过了，则不需要路由器新指派端口，而是直接按照转换记录穿过路由器。同理，外部报文发送至内部时也如此。</li>\n</ol>\n<p>总结 NAT 协议的特点，有以下几点：</p>\n<ol>\n<li>NAT 协议通过对 WAN 屏蔽 LAN，有效地缓解了 IPv4 地址分配压力。</li>\n<li>LAN 主机 IP 地址的变更，无需通告 WAN。</li>\n<li>WAN 的 ISP 变更接口地址时，无需通告 LAN 内主机。</li>\n<li>LAN 主机对 WAN 不可见，不可直接寻址，可以保证一定程度的安全性。</li>\n</ol>\n<p>然而，NAT 协议由于其独特性，存在着一些争议。比如，可能你已经注意到了，<strong>NAT 协议在 LAN 以外，标识一个内部主机时，使用的是端口号，因为 IP 地址都是相同的</strong>。这种将端口号作为主机寻址的行为，可能会引发一些误会。此外，路由器作为网络层的设备，修改了传输层的分组内容（修改了源 IP 地址和端口号），同样是不规范的行为。但是，尽管如此，NAT 协议作为 IPv4 时代的产物，极大地方便了一些本来棘手的问题，一直被沿用至今。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/network/nat-demo.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "网络攻击常见手段总结",
      "url": "https://javaguide.cn/cs-basics/network/network-attack-means.html",
      "id": "https://javaguide.cn/cs-basics/network/network-attack-means.html",
      "summary": "本文整理完善自TCP/IP 常见攻击手段 - 暖蓝笔记 - 2021这篇文章。 这篇文章的内容主要是介绍 TCP/IP 常见攻击手段，尤其是 DDoS 攻击，也会补充一些其他的常见网络攻击手段。 IP 欺骗 IP 是什么? 在网络中，所有的设备都会分配一个地址。这个地址就仿佛小蓝的家地址「多少号多少室」，这个号就是分配给整个子网的，「室」对应的号码即分...",
      "content_html": "<blockquote>\n<p>本文整理完善自<a href=\"https://mp.weixin.qq.com/s/AZwWrOlLxRSSi-ywBgZ0fA\" target=\"_blank\" rel=\"noopener noreferrer\">TCP/IP 常见攻击手段 - 暖蓝笔记 - 2021</a>这篇文章。</p>\n</blockquote>\n<p>这篇文章的内容主要是介绍 TCP/IP 常见攻击手段，尤其是 DDoS 攻击，也会补充一些其他的常见网络攻击手段。</p>\n<h2>IP 欺骗</h2>\n<h3>IP 是什么?</h3>\n<p>在网络中，所有的设备都会分配一个地址。这个地址就仿佛小蓝的家地址「<strong>多少号多少室</strong>」，这个号就是分配给整个子网的，「<strong>室</strong>」对应的号码即分配给子网中计算机的，这就是网络中的地址。「号」对应的号码为网络号，「<strong>室</strong>」对应的号码为主机号，这个地址的整体就是 <strong>IP 地址</strong>。</p>\n<h3>通过 IP 地址我们能知道什么？</h3>\n<p>通过 IP 地址，我们就可以知道判断访问对象服务器的位置，从而将消息发送到服务器。一般发送者发出的消息首先经过子网的集线器，转发到最近的路由器，然后根据路由位置访问下一个路由器的位置，直到终点</p>\n<p><strong>IP 头部格式</strong> :</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/843fd07074874ee0b695eca659411b42~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<h3>IP 欺骗技术是什么？</h3>\n<p>骗呗，拐骗，诱骗！</p>\n<p>IP 欺骗技术就是<strong>伪造</strong>某台主机的 IP 地址的技术。通过 IP 地址的伪装使得某台主机能够<strong>伪装</strong>另外的一台主机，而这台主机往往具有某种特权或者被另外的主机所信任。</p>\n<p>假设现在有一个合法用户 <strong>(1.1.1.1)</strong> 已经同服务器建立正常的连接，攻击者构造攻击的 TCP 数据，伪装自己的 IP 为 <strong>1.1.1.1</strong>，并向服务器发送一个带有 RST 位的 TCP 数据段。服务器接收到这样的数据后，认为从 <strong>1.1.1.1</strong> 发送的连接有错误，就会清空缓冲区中建立好的连接。</p>\n<p>这时，如果合法用户 <strong>1.1.1.1</strong> 再发送合法数据，服务器就已经没有这样的连接了，该用户就必须从新开始建立连接。攻击时，伪造大量的 IP 地址，向目标发送 RST 数据，使服务器不对合法用户服务。虽然 IP 地址欺骗攻击有着相当难度，但我们应该清醒地意识到，这种攻击非常广泛，入侵往往从这种攻击开始。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/7547a145adf9404aa3a05f01f5ca2e32~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"IP 欺骗 DDoS 攻击\"></p>\n<h3>如何缓解 IP 欺骗？</h3>\n<p>虽然无法预防 IP 欺骗，但可以采取措施来阻止伪造数据包渗透网络。<strong>入口过滤</strong> 是防范欺骗的一种极为常见的防御措施，如 BCP38（通用最佳实践文档）所示。入口过滤是一种数据包过滤形式，通常在<a href=\"https://www.cloudflare.com/learning/serverless/glossary/what-is-edge-computing/\" target=\"_blank\" rel=\"noopener noreferrer\">网络边缘</a>设备上实施，用于检查传入的 IP 数据包并确定其源标头。如果这些数据包的源标头与其来源不匹配或者看上去很可疑，则拒绝这些数据包。一些网络还实施出口过滤，检查退出网络的 IP 数据包，确保这些数据包具有合法源标头，以防止网络内部用户使用 IP 欺骗技术发起出站恶意攻击。</p>\n<h2>SYN Flood(洪水)</h2>\n<h3>SYN Flood 是什么？</h3>\n<p>SYN Flood 是互联网上最原始、最经典的 DDoS（Distributed Denial of Service，分布式拒绝服务）攻击之一，旨在耗尽可用服务器资源，致使服务器无法传输合法流量</p>\n<p>SYN Flood 利用了 TCP 协议的三次握手机制，攻击者通常利用工具或者控制僵尸主机向服务器发送海量的变源 IP 地址或变源端口的 TCP SYN 报文，服务器响应了这些报文后就会生成大量的半连接，当系统资源被耗尽后，服务器将无法提供正常的服务。<br>\n增加服务器性能，提供更多的连接能力对于 SYN Flood 的海量报文来说杯水车薪，防御 SYN Flood 的关键在于判断哪些连接请求来自于真实源，屏蔽非真实源的请求以保障正常的业务请求能得到服务。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/2b3d2d4dc8f24890b5957df1c7d6feb8~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<h3>TCP SYN Flood 攻击原理是什么？</h3>\n<p><strong>TCP SYN Flood</strong> 攻击利用的是 <strong>TCP</strong> 的三次握手（<strong>SYN -&gt; SYN/ACK -&gt; ACK</strong>），假设连接发起方是 A，连接接受方是 B，即 B 在某个端口（<strong>Port</strong>）上监听 A 发出的连接请求，过程如下图所示，左边是 A，右边是 B。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/a39355a1ea404323a11ca6644e009183~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>A 首先发送 <strong>SYN</strong>（Synchronization）消息给 B，要求 B 做好接收数据的准备；B 收到后反馈 <strong>SYN-ACK</strong>（Synchronization-Acknowledgement） 消息给 A，这个消息的目的有两个：</p>\n<ul>\n<li>向 A 确认已做好接收数据的准备，</li>\n<li>同时要求 A 也做好接收数据的准备，此时 B 已向 A 确认好接收状态，并等待 A 的确认，连接处于<strong>半开状态（Half-Open）</strong>，顾名思义只开了一半；A 收到后再次发送 <strong>ACK</strong> (Acknowledgement) 消息给 B，向 B 确认也做好了接收数据的准备，至此三次握手完成，「<strong>连接</strong>」就建立了，</li>\n</ul>\n<p>大家注意到没有，最关键的一点在于双方是否都按对方的要求进入了<strong>可以接收消息</strong>的状态。而这个状态的确认主要是双方将要使用的<strong>消息序号(<strong>SequenceNum)，<strong>TCP</strong> 为保证消息按发送顺序抵达接收方的上层应用，需要用</strong>消息序号</strong>来标记消息的发送先后顺序的。</p>\n<p><strong>TCP</strong>是「<strong>双工</strong>」(Duplex)连接，同时支持双向通信，也就是双方同时可向对方发送消息，其中 <strong>SYN</strong> 和 <strong>SYN-ACK</strong> 消息开启了 A→B 的单向通信通道（B 获知了 A 的消息序号）；<strong>SYN-ACK</strong> 和 <strong>ACK</strong> 消息开启了 B→A 单向通信通道（A 获知了 B 的消息序号）。</p>\n<p>上面讨论的是双方在诚实守信，正常情况下的通信。</p>\n<p>但实际情况是，网络可能不稳定会丢包，使握手消息不能抵达对方，也可能是对方故意不按规矩来，故意延迟或不发送握手确认消息。</p>\n<p>假设 B 通过某 <strong>TCP</strong> 端口提供服务，B 在收到 A 的 <strong>SYN</strong> 消息时，积极的反馈了 <strong>SYN-ACK</strong> 消息，使连接进入<strong>半开状态</strong>，因为 B 不确定自己发给 A 的 <strong>SYN-ACK</strong> 消息或 A 反馈的 ACK 消息是否会丢在半路，所以会给每个待完成的半开连接都设一个<strong>Timer</strong>，如果超过时间还没有收到 A 的 <strong>ACK</strong> 消息，则重新发送一次 <strong>SYN-ACK</strong> 消息给 A，直到重试超过一定次数时才会放弃。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/7ff1daddcec44d61994f254e664987b4~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"图片\"></p>\n<p>B 为帮助 A 能顺利连接，需要<strong>分配内核资源</strong>维护半开连接，那么当 B 面临海量的连接 A 时，如上图所示，<strong>SYN Flood</strong> 攻击就形成了。攻击方 A 可以控制肉鸡向 B 发送大量 SYN 消息但不响应 ACK 消息，或者干脆伪造 SYN 消息中的 <strong>Source IP</strong>，使 B 反馈的 <strong>SYN-ACK</strong> 消息石沉大海，导致 B 被大量注定不能完成的半开连接占据，直到资源耗尽，停止响应正常的连接请求。</p>\n<h3>SYN Flood 的常见形式有哪些？</h3>\n<p><strong>恶意用户可通过三种不同方式发起 SYN Flood 攻击</strong>：</p>\n<ol>\n<li><strong>直接攻击：</strong> 不伪造 IP 地址的 SYN 洪水攻击称为直接攻击。在此类攻击中，攻击者完全不屏蔽其 IP 地址。由于攻击者使用具有真实 IP 地址的单一源设备发起攻击，因此很容易发现并清理攻击者。为使目标机器呈现半开状态，黑客将阻止个人机器对服务器的 SYN-ACK 数据包做出响应。为此，通常采用以下两种方式实现：部署防火墙规则，阻止除 SYN 数据包以外的各类传出数据包；或者，对传入的所有 SYN-ACK 数据包进行过滤，防止其到达恶意用户机器。实际上，这种方法很少使用（即便使用过也不多见），因为此类攻击相当容易缓解 – 只需阻止每个恶意系统的 IP 地址。哪怕攻击者使用僵尸网络（如 <a href=\"https://www.cloudflare.com/learning/ddos/glossary/mirai-botnet/\" target=\"_blank\" rel=\"noopener noreferrer\">Mirai 僵尸网络</a>），通常也不会刻意屏蔽受感染设备的 IP。</li>\n<li><strong>欺骗攻击：</strong> 恶意用户还可以伪造其发送的各个 SYN 数据包的 IP 地址，以便阻止缓解措施并加大身份暴露难度。虽然数据包可能经过伪装，但还是可以通过这些数据包追根溯源。此类检测工作很难开展，但并非不可实现；特别是，如果 Internet 服务提供商 (ISP) 愿意提供帮助，则更容易实现。</li>\n<li><strong>分布式攻击（DDoS）：</strong> 如果使用僵尸网络发起攻击，则追溯攻击源头的可能性很低。随着混淆级别的攀升，攻击者可能还会命令每台分布式设备伪造其发送数据包的 IP 地址。哪怕攻击者使用僵尸网络（如 Mirai 僵尸网络），通常也不会刻意屏蔽受感染设备的 IP。</li>\n</ol>\n<h3>如何缓解 SYN Flood？</h3>\n<h4>扩展积压工作队列</h4>\n<p>目标设备安装的每个操作系统都允许具有一定数量的半开连接。若要响应大量 SYN 数据包，一种方法是增加操作系统允许的最大半开连接数目。为成功扩展最大积压工作，系统必须额外预留内存资源以处理各类新请求。如果系统没有足够的内存，无法应对增加的积压工作队列规模，将对系统性能产生负面影响，但仍然好过拒绝服务。</p>\n<h4>回收最先创建的 TCP 半开连接</h4>\n<p>另一种缓解策略是在填充积压工作后覆盖最先创建的半开连接。这项策略要求完全建立合法连接的时间低于恶意 SYN 数据包填充积压工作的时间。当攻击量增加或积压工作规模小于实际需求时，这项特定的防御措施将不奏效。</p>\n<h4>SYN Cookie</h4>\n<p>此策略要求服务器创建 Cookie。为避免在填充积压工作时断开连接，服务器使用 SYN-ACK 数据包响应每一项连接请求，而后从积压工作中删除 SYN 请求，同时从内存中删除请求，保证端口保持打开状态并做好重新建立连接的准备。如果连接是合法请求并且已将最后一个 ACK 数据包从客户端机器发回服务器，服务器将重建（存在一些限制）SYN 积压工作队列条目。虽然这项缓解措施势必会丢失一些 TCP 连接信息，但好过因此导致对合法用户发起拒绝服务攻击。</p>\n<h2>UDP Flood(洪水)</h2>\n<h3>UDP Flood 是什么？</h3>\n<p><strong>UDP Flood</strong> 也是一种拒绝服务攻击，将大量的用户数据报协议（<strong>UDP</strong>）数据包发送到目标服务器，目的是压倒该设备的处理和响应能力。防火墙保护目标服务器也可能因 <strong>UDP</strong> 泛滥而耗尽，从而导致对合法流量的拒绝服务。</p>\n<h3>UDP Flood 攻击原理是什么？</h3>\n<p><strong>UDP Flood</strong> 主要通过利用服务器响应发送到其中一个端口的 <strong>UDP</strong> 数据包所采取的步骤。在正常情况下，当服务器在特定端口接收到 <strong>UDP</strong> 数据包时，会经过两个步骤：</p>\n<ul>\n<li>服务器首先检查是否正在运行正在侦听指定端口的请求的程序。</li>\n<li>如果没有程序在该端口接收数据包，则服务器使用 <strong>ICMP</strong>（ping）数据包进行响应，以通知发送方目的地不可达。</li>\n</ul>\n<p>举个例子。假设今天要联系酒店的小蓝，酒店客服接到电话后先查看房间的列表来确保小蓝在客房内，随后转接给小蓝。</p>\n<p>首先，接待员接收到呼叫者要求连接到特定房间的电话。接待员然后需要查看所有房间的清单，以确保客人在房间中可用，并愿意接听电话。碰巧的是，此时如果突然间所有的电话线同时亮起来，那么他们就会很快就变得不堪重负了。</p>\n<p>当服务器接收到每个新的 <strong>UDP</strong> 数据包时，它将通过步骤来处理请求，并利用该过程中的服务器资源。发送 <strong>UDP</strong> 报文时，每个报文将包含源设备的 <strong>IP</strong> 地址。在这种类型的 <strong>DDoS</strong> 攻击期间，攻击者通常不会使用自己的真实 <strong>IP</strong> 地址，而是会欺骗 <strong>UDP</strong> 数据包的源 <strong>IP</strong> 地址，从而阻止攻击者的真实位置被暴露并潜在地饱和来自目标的响应数据包服务器。</p>\n<p>由于目标服务器利用资源检查并响应每个接收到的 <strong>UDP</strong> 数据包的结果，当接收到大量 <strong>UDP</strong> 数据包时，目标的资源可能会迅速耗尽，导致对正常流量的拒绝服务。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/23dbbc8243a84ed181e088e38bffb37a~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<h3>如何缓解 UDP Flooding？</h3>\n<p>大多数操作系统部分限制了 <strong>ICMP</strong> 报文的响应速率，以中断需要 ICMP 响应的 <strong>DDoS</strong> 攻击。这种缓解的一个缺点是在攻击过程中，合法的数据包也可能被过滤。如果 <strong>UDP Flood</strong> 的容量足够高以使目标服务器的防火墙的状态表饱和，则在服务器级别发生的任何缓解都将不足以应对目标设备上游的瓶颈。</p>\n<h2>HTTP Flood(洪水)</h2>\n<h3>HTTP Flood 是什么？</h3>\n<p>HTTP Flood 是一种大规模的 DDoS（Distributed Denial of Service，分布式拒绝服务）攻击，旨在利用 HTTP 请求使目标服务器不堪重负。目标因请求而达到饱和，且无法响应正常流量后，将出现拒绝服务，拒绝来自实际用户的其他请求。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/aa64869551d94c8d89fa80eaf4395bfa~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"HTTP 洪水攻击\"></p>\n<h3>HTTP Flood 的攻击原理是什么？</h3>\n<p>HTTP 洪水攻击是“第 7 层”DDoS 攻击的一种。第 7 层是 OSI 模型的应用程序层，指的是 HTTP 等互联网协议。HTTP 是基于浏览器的互联网请求的基础，通常用于加载网页或通过互联网发送表单内容。缓解应用程序层攻击特别复杂，因为恶意流量和正常流量很难区分。</p>\n<p>为了获得最大效率，恶意行为者通常会利用或创建僵尸网络，以最大程度地扩大攻击的影响。通过利用感染了恶意软件的多台设备，攻击者可以发起大量攻击流量来进行攻击。</p>\n<p>HTTP 洪水攻击有两种：</p>\n<ul>\n<li><strong>HTTP GET 攻击</strong>：在这种攻击形式下，多台计算机或其他设备相互协调，向目标服务器发送对图像、文件或其他资产的多个请求。当目标被传入的请求和响应所淹没时，来自正常流量源的其他请求将被拒绝服务。</li>\n<li><strong>HTTP POST 攻击</strong>：一般而言，在网站上提交表单时，服务器必须处理传入的请求并将数据推送到持久层（通常是数据库）。与发送 POST 请求所需的处理能力和带宽相比，处理表单数据和运行必要数据库命令的过程相对密集。这种攻击利用相对资源消耗的差异，直接向目标服务器发送许多 POST 请求，直到目标服务器的容量饱和并拒绝服务为止。</li>\n</ul>\n<h3>如何防护 HTTP Flood？</h3>\n<p>如前所述，缓解第 7 层攻击非常复杂，而且通常要从多方面进行。一种方法是对发出请求的设备实施质询，以测试它是否是机器人，这与在线创建帐户时常用的 CAPTCHA 测试非常相似。通过提出 JavaScript 计算挑战之类的要求，可以缓解许多攻击。</p>\n<p>其他阻止 HTTP 洪水攻击的途径包括使用 Web 应用程序防火墙 (WAF)、管理 IP 信誉数据库以跟踪和有选择地阻止恶意流量，以及由工程师进行动态分析。Cloudflare 具有超过 2000 万个互联网设备的规模优势，能够分析来自各种来源的流量并通过快速更新的 WAF 规则和其他防护策略来缓解潜在的攻击，从而消除应用程序层 DDoS 流量。</p>\n<h2>DNS Flood(洪水)</h2>\n<h3>DNS Flood 是什么？</h3>\n<p>域名系统（DNS）服务器是互联网的“电话簿“；互联网设备通过这些服务器来查找特定 Web 服务器以便访问互联网内容。DNS Flood 攻击是一种分布式拒绝服务（DDoS）攻击，攻击者用大量流量淹没某个域的 DNS 服务器，以尝试中断该域的 DNS 解析。如果用户无法找到电话簿，就无法查找到用于调用特定资源的地址。通过中断 DNS 解析，DNS Flood 攻击将破坏网站、API 或 Web 应用程序响应合法流量的能力。很难将 DNS Flood 攻击与正常的大流量区分开来，因为这些大规模流量往往来自多个唯一地址，查询该域的真实记录，模仿合法流量。</p>\n<h3>DNS Flood 的攻击原理是什么？</h3>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/97ea11a212924900b10d159226783887~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>域名系统的功能是将易于记忆的名称（例如 <a href=\"http://example.com\" target=\"_blank\" rel=\"noopener noreferrer\">example.com</a>）转换成难以记住的网站服务器地址（例如 192.168.0.1），因此成功攻击 DNS 基础设施将导致大多数人无法使用互联网。DNS Flood 攻击是一种相对较新的基于 DNS 的攻击，这种攻击是在高带宽<a href=\"https://www.cloudflare.com/learning/ddos/glossary/internet-of-things-iot/\" target=\"_blank\" rel=\"noopener noreferrer\">物联网（IoT）</a><a href=\"https://www.cloudflare.com/learning/ddos/what-is-a-ddos-botnet/\" target=\"_blank\" rel=\"noopener noreferrer\">僵尸网络</a>（如 <a href=\"https://www.cloudflare.com/learning/ddos/glossary/mirai-botnet/\" target=\"_blank\" rel=\"noopener noreferrer\">Mirai</a>）兴起后激增的。DNS Flood 攻击使用 IP 摄像头、DVR 盒和其他 IoT 设备的高带宽连接直接淹没主要提供商的 DNS 服务器。来自 IoT 设备的大量请求淹没 DNS 提供商的服务，阻止合法用户访问提供商的 DNS 服务器。</p>\n<p>DNS Flood 攻击不同于 <a href=\"https://www.cloudflare.com/zh-cn/learning/ddos/dns-amplification-ddos-attack/\" target=\"_blank\" rel=\"noopener noreferrer\">DNS 放大攻击</a>。与 DNS Flood 攻击不同，DNS 放大攻击反射并放大不安全 DNS 服务器的流量，以便隐藏攻击的源头并提高攻击的有效性。DNS 放大攻击使用连接带宽较小的设备向不安全的 DNS 服务器发送无数请求。这些设备对非常大的 DNS 记录发出小型请求，但在发出请求时，攻击者伪造返回地址为目标受害者。这种放大效果让攻击者能借助有限的攻击资源来破坏较大的目标。</p>\n<h3>如何防护 DNS Flood?</h3>\n<p>DNS Flood 对传统上基于放大的攻击方法做出了改变。借助轻易获得的高带宽僵尸网络，攻击者现能针对大型组织发动攻击。除非被破坏的 IoT 设备得以更新或替换，否则抵御这些攻击的唯一方法是使用一个超大型、高度分布式的 DNS 系统，以便实时监测、吸收和阻止攻击流量。</p>\n<h2>TCP 重置攻击</h2>\n<p>在 <strong>TCP</strong> 重置攻击中，攻击者通过向通信的一方或双方发送伪造的消息，告诉它们立即断开连接，从而使通信双方连接中断。正常情况下，如果客户端收发现到达的报文段对于相关连接而言是不正确的，<strong>TCP</strong> 就会发送一个重置报文段，从而导致 <strong>TCP</strong> 连接的快速拆卸。</p>\n<p><strong>TCP</strong> 重置攻击利用这一机制，通过向通信方发送伪造的重置报文段，欺骗通信双方提前关闭 TCP 连接。如果伪造的重置报文段完全逼真，接收者就会认为它有效，并关闭 <strong>TCP</strong> 连接，防止连接被用来进一步交换信息。服务端可以创建一个新的 <strong>TCP</strong> 连接来恢复通信，但仍然可能会被攻击者重置连接。万幸的是，攻击者需要一定的时间来组装和发送伪造的报文，所以一般情况下这种攻击只对长连接有杀伤力，对于短连接而言，你还没攻击呢，人家已经完成了信息交换。</p>\n<p>从某种意义上来说，伪造 <strong>TCP</strong> 报文段是很容易的，因为 <strong>TCP/IP</strong> 都没有任何内置的方法来验证服务端的身份。有些特殊的 IP 扩展协议（例如 <code>IPSec</code>）确实可以验证身份，但并没有被广泛使用。客户端只能接收报文段，并在可能的情况下使用更高级别的协议（如 <code>TLS</code>）来验证服务端的身份。但这个方法对 <strong>TCP</strong> 重置包并不适用，因为 <strong>TCP</strong> 重置包是 <strong>TCP</strong> 协议本身的一部分，无法使用更高级别的协议进行验证。</p>\n<h2>模拟攻击</h2>\n<blockquote>\n<p>以下实验是在 <code>OSX</code> 系统中完成的，其他系统请自行测试。</p>\n</blockquote>\n<p>现在来总结一下伪造一个 <strong>TCP</strong> 重置报文要做哪些事情：</p>\n<ul>\n<li>嗅探通信双方的交换信息。</li>\n<li>截获一个 <code>ACK</code> 标志位置位 1 的报文段，并读取其 <code>ACK</code> 号。</li>\n<li>伪造一个 TCP 重置报文段（<code>RST</code> 标志位置为 1），其序列号等于上面截获的报文的 <code>ACK</code> 号。这只是理想情况下的方案，假设信息交换的速度不是很快。大多数情况下为了增加成功率，可以连续发送序列号不同的重置报文。</li>\n<li>将伪造的重置报文发送给通信的一方或双方，时其中断连接。</li>\n</ul>\n<p>为了实验简单，我们可以使用本地计算机通过 <code>localhost</code> 与自己通信，然后对自己进行 TCP 重置攻击。需要以下几个步骤：</p>\n<ul>\n<li>在两个终端之间建立一个 TCP 连接。</li>\n<li>编写一个能嗅探通信双方数据的攻击程序。</li>\n<li>修改攻击程序，伪造并发送重置报文。</li>\n</ul>\n<p>下面正式开始实验。</p>\n<blockquote>\n<p>建立 TCP 连接</p>\n</blockquote>\n<p>可以使用 netcat 工具来建立 TCP 连接，这个工具很多操作系统都预装了。打开第一个终端窗口，运行以下命令：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nc</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -nvl</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 8000</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>这个命令会启动一个 TCP 服务，监听端口为 <code>8000</code>。接着再打开第二个终端窗口，运行以下命令：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nc</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 127.0.0.1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 8000</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>该命令会尝试与上面的服务建立连接，在其中一个窗口输入一些字符，就会通过 TCP 连接发送给另一个窗口并打印出来。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/df0508cbf26446708cf98f8ad514dbea~tplv-k3u1fbpfcp-zoom-1.gif\" alt=\"\"></p>\n<blockquote>\n<p>嗅探流量</p>\n</blockquote>\n<p>编写一个攻击程序，使用 Python 网络库 <code>scapy</code> 来读取两个终端窗口之间交换的数据，并将其打印到终端上。代码比较长，下面为一部份，完整代码后台回复 TCP 攻击，代码的核心是调用 <code>scapy</code> 的嗅探方法：</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/27feb834aa9d4b629fd938611ac9972e~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>这段代码告诉 <code>scapy</code> 在 <code>lo0</code> 网络接口上嗅探数据包，并记录所有 TCP 连接的详细信息。</p>\n<ul>\n<li><strong>iface</strong> : 告诉 scapy 在 <code>lo0</code>（localhost）网络接口上进行监听。</li>\n<li><strong>lfilter</strong> : 这是个过滤器，告诉 scapy 忽略所有不属于指定的 TCP 连接（通信双方皆为 <code>localhost</code>，且端口号为 <code>8000</code>）的数据包。</li>\n<li><strong>prn</strong> : scapy 通过这个函数来操作所有符合 <code>lfilter</code> 规则的数据包。上面的例子只是将数据包打印到终端，下文将会修改函数来伪造重置报文。</li>\n<li><strong>count</strong> : scapy 函数返回之前需要嗅探的数据包数量。</li>\n</ul>\n<blockquote>\n<p>发送伪造的重置报文</p>\n</blockquote>\n<p>下面开始修改程序，发送伪造的 TCP 重置报文来进行 TCP 重置攻击。根据上面的解读，只需要修改 prn 函数就行了，让其检查数据包，提取必要参数，并利用这些参数来伪造 TCP 重置报文并发送。</p>\n<p>例如，假设该程序截获了一个从（<code>src_ip</code>, <code>src_port</code>）发往 （<code>dst_ip</code>, <code>dst_port</code>）的报文段，该报文段的 ACK 标志位已置为 1，ACK 号为 <code>100,000</code>。攻击程序接下来要做的是：</p>\n<ul>\n<li>由于伪造的数据包是对截获的数据包的响应，所以伪造数据包的源 <code>IP/Port</code> 应该是截获数据包的目的 <code>IP/Port</code>，反之亦然。</li>\n<li>将伪造数据包的 <code>RST</code> 标志位置为 1，以表示这是一个重置报文。</li>\n<li>将伪造数据包的序列号设置为截获数据包的 ACK 号，因为这是发送方期望收到的下一个序列号。</li>\n<li>调用 <code>scapy</code> 的 <code>send</code> 方法，将伪造的数据包发送给截获数据包的发送方。</li>\n</ul>\n<p>对于我的程序而言，只需将这一行取消注释，并注释这一行的上面一行，就可以全面攻击了。按照步骤 1 的方法设置 TCP 连接，打开第三个窗口运行攻击程序，然后在 TCP 连接的其中一个终端输入一些字符串，你会发现 TCP 连接被中断了！</p>\n<blockquote>\n<p>进一步实验</p>\n</blockquote>\n<ol>\n<li>可以继续使用攻击程序进行实验，将伪造数据包的序列号加减 1 看看会发生什么，是不是确实需要和截获数据包的 <code>ACK</code> 号完全相同。</li>\n<li>打开 <code>Wireshark</code>，监听 lo0 网络接口，并使用过滤器 <code>ip.src == 127.0.0.1 &amp;&amp; ip.dst == 127.0.0.1 &amp;&amp; tcp.port == 8000</code> 来过滤无关数据。你可以看到 TCP 连接的所有细节。</li>\n<li>在连接上更快速地发送数据流，使攻击更难执行。</li>\n</ol>\n<h2>中间人攻击</h2>\n<p>猪八戒要向小蓝表白，于是写了一封信给小蓝，结果第三者小黑拦截到了这封信，把这封信进行了篡改，于是乎在他们之间进行搞破坏行动。这个马文才就是中间人，实施的就是中间人攻击。好我们继续聊聊什么是中间人攻击。</p>\n<h3>什么是中间人?</h3>\n<p>攻击中间人攻击英文名叫 Man-in-the-MiddleAttack，简称「MITM 攻击」。指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方 直接对话，但事实上整个会话都被攻击者完全控制。我们画一张图：</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/d69b74e63981472b852797f2fa08976f~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"图片\"></p>\n<p>从这张图可以看到，中间人其实就是攻击者。通过这种原理，有很多实现的用途，比如说，你在手机上浏览不健康网站的时候，手机就会提示你，此网站可能含有病毒，是否继续访问还是做其他的操作等等。</p>\n<h3>中间人攻击的原理是什么？</h3>\n<p>举个例子，我和公司签了一个一份劳动合同，一人一份合同。不晓得哪个可能改了合同内容，不知道真假了，怎么搞？只好找专业的机构来鉴定，自然就要花钱。</p>\n<p>在安全领域有句话：<strong>我们没有办法杜绝网络犯罪，只好想办法提高网络犯罪的成本</strong>。既然没法杜绝这种情况，那我们就想办法提高作案的成本，今天我们就简单了解下基本的网络安全知识，也是面试中的高频面试题了。</p>\n<p>为了避免双方说活不算数的情况，双方引入第三家机构，将合同原文给可信任的第三方机构，只要这个机构不监守自盗，合同就相对安全。</p>\n<p><strong>如果第三方机构内部不严格或容易出现纰漏？</strong></p>\n<p>虽然我们将合同原文给第三方机构了，为了防止内部人员的更改，需要采取什么措施呢</p>\n<p>一种可行的办法是引入 <strong>摘要算法</strong> 。即合同和摘要一起，为了简单的理解摘要。大家可以想象这个摘要为一个函数，这个函数对原文进行了加密，会产生一个唯一的散列值，一旦原文发生一点点变化，那么这个散列值将会变化。</p>\n<h4>有哪些常用的摘要算法呢？</h4>\n<p>目前比较常用的加密算法有消息摘要算法和安全散列算法(<strong>SHA</strong>)。<strong>MD5</strong> 是将任意长度的文章转化为一个 128 位的散列值，可是在 2004 年，<strong>MD5</strong> 被证实了容易发生碰撞，即两篇原文产生相同的摘要。这样的话相当于直接给黑客一个后门，轻松伪造摘要。</p>\n<p>所以在大部分的情况下都会选择 <strong>SHA 算法</strong> 。</p>\n<p><strong>出现内鬼了怎么办？</strong></p>\n<p>看似很安全的场面了，理论上来说杜绝了篡改合同的做法。主要某个员工同时具有修改合同和摘要的权利，那搞事儿就是时间的问题了，毕竟没哪个系统可以完全的杜绝员工接触敏感信息，除非敏感信息都不存在。所以能不能考虑将合同和摘要分开存储呢</p>\n<p><strong>那如何确保员工不会修改合同呢？</strong></p>\n<p>这确实蛮难的，不过办法总比困难多。我们将合同放在双方手中，摘要放在第三方机构，篡改难度进一步加大</p>\n<p><strong>那么员工万一和某个用户串通好了呢？</strong></p>\n<p>看来放在第三方的机构还是不好使，同样存在不小风险。所以还需要寻找新的方案，这就出现了 <strong>数字签名和证书</strong>。</p>\n<h4>数字证书和签名有什么用？</h4>\n<p>同样的，举个例子。Sum 和 Mike 两个人签合同。Sum 首先用 <strong>SHA</strong> 算法计算合同的摘要，然后用自己私钥将摘要加密，得到数字签名。Sum 将合同原文、签名，以及公钥三者都交给 Mike</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/e4b7d6fca78b45c8840c12411b717f2f~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>如果 Sum 想要证明合同是 Mike 的，那么就要使用 Mike 的公钥，将这个签名解密得到摘要 x，然后 Mike 计算原文的 sha 摘要 Y，随后对比 x 和 y，如果两者相等，就认为数据没有被篡改</p>\n<p>在这样的过程中，Mike 是不能更改 Sum 的合同，因为要修改合同不仅仅要修改原文还要修改摘要，修改摘要需要提供 Mike 的私钥，私钥即 Sum 独有的密码，公钥即 Sum 公布给他人使用的密码</p>\n<p>总之，公钥加密的数据只能私钥可以解密。私钥加密的数据只有公钥可以解密，这就是 <strong>非对称加密</strong> 。</p>\n<p>隐私保护？不是吓唬大家，信息是透明的兄 die，不过尽量去维护个人的隐私吧，今天学习对称加密和非对称加密。</p>\n<p>大家先读读这个字\"钥\",是读\"yao\"，我以前也是，其实读\"yue\"</p>\n<h4>什么是对称加密？</h4>\n<p>对称加密，顾名思义，加密方与解密方使用同一钥匙(秘钥)。具体一些就是，发送方通过使用相应的加密算法和秘钥，对将要发送的信息进行加密；对于接收方而言，使用解密算法和相同的秘钥解锁信息，从而有能力阅读信息。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/ef81cb5e2f0a4d3d9ac5a44ecf97e3cc~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"图片\"></p>\n<h4>常见的对称加密算法有哪些？</h4>\n<p><strong>DES</strong></p>\n<p>DES 使用的密钥表面上是 64 位的，然而只有其中的 56 位被实际用于算法，其余 8 位可以被用于奇偶校验，并在算法中被丢弃。因此，<strong>DES</strong> 的有效密钥长度为 56 位，通常称 <strong>DES</strong> 的密钥长度为 56 位。假设秘钥为 56 位，采用暴力破 Jie 的方式，其秘钥个数为 2 的 56 次方，那么每纳秒执行一次解密所需要的时间差不多 1 年的样子。当然，没人这么干。<strong>DES</strong> 现在已经不是一种安全的加密方法，主要因为它使用的 56 位密钥过短。</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/9eb3a2bf6cf14132a890bc3447480eeb~tplv-k3u1fbpfcp-zoom-1.jpeg\" alt=\"\"></p>\n<p><strong>IDEA</strong></p>\n<p>国际数据加密算法(International Data Encryption Algorithm)。秘钥长度 128 位，优点没有专利的限制。</p>\n<p><strong>AES</strong></p>\n<p>当 DES 被破解以后，没过多久推出了 <strong>AES</strong> 算法，提供了三种长度供选择，128 位、192 位和 256，为了保证性能不受太大的影响，选择 128 即可。</p>\n<p><strong>SM1 和 SM4</strong></p>\n<p>之前几种都是国外的，我们国内自行研究了国密 <strong>SM1</strong>和 <strong>SM4</strong>。其中 S 都属于国家标准，算法公开。优点就是国家的大力支持和认可</p>\n<p><strong>总结</strong>：</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/578961e3175540e081e1432c409b075a~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<h4>常见的非对称加密算法有哪些？</h4>\n<p>在对称加密中，发送方与接收方使用相同的秘钥。那么在非对称加密中则是发送方与接收方使用的不同的秘钥。其主要解决的问题是防止在秘钥协商的过程中发生泄漏。比如在对称加密中，小蓝将需要发送的消息加密，然后告诉你密码是 123balala,ok,对于其他人而言，很容易就能劫持到密码是 123balala。那么在非对称的情况下，小蓝告诉所有人密码是 123balala,对于中间人而言，拿到也没用，因为没有私钥。所以，非对称密钥其实主要解决了密钥分发的难题。如下图</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/153cf04a0ecc43c38003f3a1ab198cc0~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>其实我们经常都在使用非对称加密，比如使用多台服务器搭建大数据平台 hadoop，为了方便多台机器设置免密登录，是不是就会涉及到秘钥分发。再比如搭建 docker 集群也会使用相关非对称加密算法。</p>\n<p>常见的非对称加密算法：</p>\n<ul>\n<li>\n<p>RSA（RSA 加密算法，RSA Algorithm）：优势是性能比较快，如果想要较高的加密难度，需要很长的秘钥。</p>\n</li>\n<li>\n<p>ECC：基于椭圆曲线提出。是目前加密强度最高的非对称加密算法</p>\n</li>\n<li>\n<p>SM2：同样基于椭圆曲线问题设计。最大优势就是国家认可和大力支持。</p>\n</li>\n</ul>\n<p>总结：</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/28b96fb797904d4b818ee237cdc7614c~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<h4>常见的散列算法有哪些？</h4>\n<p>这个大家应该更加熟悉了，比如我们平常使用的 MD5 校验，在很多时候，我并不是拿来进行加密，而是用来获得唯一性 ID。在做系统的过程中，存储用户的各种密码信息，通常都会通过散列算法，最终存储其散列值。</p>\n<p><strong>MD5</strong>（不推荐）</p>\n<p>MD5 可以用来生成一个 128 位的消息摘要，它是目前应用比较普遍的散列算法，具体的应用场景你可以自行  参阅。虽然，因为算法的缺陷，它的唯一性已经被破解了，但是大部分场景下，这并不会构成安全问题。但是，如果不是长度受限（32 个字符），我还是不推荐你继续使用 <strong>MD5</strong> 的。</p>\n<p><strong>SHA</strong></p>\n<p>安全散列算法。<strong>SHA</strong> 包括<strong>SHA-1</strong>、<strong>SHA-2</strong>和<strong>SHA-3</strong>三个版本。该算法的基本思想是：接收一段明文数据，通过不可逆的方式将其转换为固定长度的密文。简单来说，SHA 将输入数据（即预映射或消息）转化为固定长度、较短的输出值，称为散列值（或信息摘要、信息认证码）。SHA-1 已被证明不够安全，因此逐渐被 SHA-2 取代，而 SHA-3 则作为 SHA 系列的最新版本，采用不同的结构（Keccak 算法）提供更高的安全性和灵活性。</p>\n<p><strong>SM3</strong></p>\n<p>国密算法<strong>SM3</strong>。加密强度和 SHA-256 算法 相差不多。主要是受到了国家的支持。</p>\n<p><strong>总结</strong>：</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/79c3c2f72d2f44c7abf2d73a49024495~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"图片\"></p>\n<p><strong>大部分情况下使用对称加密，具有比较不错的安全性。如果需要分布式进行秘钥分发，考虑非对称。如果不需要可逆计算则散列算法。</strong> 因为这段时间有这方面需求，就看了一些这方面的资料，入坑信息安全，就怕以后洗发水都不用买。谢谢大家查看！</p>\n<h4>第三方机构和证书机制有什么用？</h4>\n<p>问题还有，此时如果 Sum 否认给过 Mike 的公钥和合同，不久 gg 了</p>\n<p>所以需要 Sum 过的话做过的事儿需要足够的信誉，这就引入了 <strong>第三方机构和证书机制</strong> 。</p>\n<p>证书之所以会有信用，是因为证书的签发方拥有信用。所以如果 Sum 想让 Mike 承认自己的公钥，Sum 不会直接将公钥给 Mike ，而是提供由第三方机构，含有公钥的证书。如果 Mike 也信任这个机构，法律都认可，那 ik，信任关系成立</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/b1a3dbf87e3e41ff894f39512a10f66d~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>如上图所示，Sum 将自己的申请提交给机构，产生证书的原文。机构用自己的私钥签名 Sum 的申请原文（先根据原文内容计算摘要，再用私钥加密），得到带有签名信息的证书。Mike 拿到带签名信息的证书，通过第三方机构的公钥进行解密，获得 Sum 证书的摘要、证书的原文。有了 Sum 证书的摘要和原文，Mike 就可以进行验签。验签通过，Mike 就可以确认 Sum 的证书的确是第三方机构签发的。</p>\n<p>用上面这样一个机制，合同的双方都无法否认合同。这个解决方案的核心在于需要第三方信用服务机构提供信用背书。这里产生了一个最基础的信任链，如果第三方机构的信任崩溃，比如被黑客攻破，那整条信任链条也就断裂了</p>\n<p>为了让这个信任条更加稳固，就需要环环相扣，打造更长的信任链，避免单点信任风险</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/1481f0409da94ba6bb0fee69bf0996f8~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>上图中，由信誉最好的根证书机构提供根证书，然后根证书机构去签发二级机构的证书；二级机构去签发三级机构的证书；最后有由三级机构去签发 Sum 证书。</p>\n<p>如果要验证 Sum 证书的合法性，就需要用三级机构证书中的公钥去解密 Sum 证书的数字签名。</p>\n<p>如果要验证三级机构证书的合法性，就需要用二级机构的证书去解密三级机构证书的数字签名。</p>\n<p>如果要验证二级结构证书的合法性，就需要用根证书去解密。</p>\n<p>以上，就构成了一个相对长一些的信任链。如果其中一方想要作弊是非常困难的，除非链条中的所有机构同时联合起来，进行欺诈。</p>\n<h3>中间人攻击如何避免?</h3>\n<p>既然知道了中间人攻击的原理也知道了他的危险，现在我们看看如何避免。相信我们都遇到过下面这种状况：</p>\n<p><img src=\"https://oss.javaguide.cn/p3-juejin/0dde4b76be6240699312d822a3fe1ed3~tplv-k3u1fbpfcp-zoom-1.png\" alt=\"\"></p>\n<p>出现这个界面的很多情况下，都是遇到了中间人攻击的现象，需要对安全证书进行及时地监测。而且大名鼎鼎的 github 网站，也曾遭遇过中间人攻击：</p>\n<p>想要避免中间人攻击的方法目前主要有两个：</p>\n<ul>\n<li>客户端不要轻易相信证书：因为这些证书极有可能是中间人。</li>\n<li>App 可以提前预埋证书在本地：意思是我们本地提前有一些证书，这样其他证书就不能再起作用了。</li>\n</ul>\n<h2>DDOS</h2>\n<p>通过上面的描述，总之即好多种攻击都是 <strong>DDOS</strong> 攻击，所以简单总结下这个攻击相关内容。</p>\n<p>其实，像全球互联网各大公司，均遭受过大量的 <strong>DDoS</strong>。</p>\n<p>2018 年，GitHub 在一瞬间遭到高达 1.35Tbps 的带宽攻击。这次 DDoS 攻击几乎可以堪称是互联网有史以来规模最大、威力最大的 DDoS 攻击了。在 GitHub 遭到攻击后，仅仅一周后，DDoS 攻击又开始对 Google、亚马逊甚至 Pornhub 等网站进行了 DDoS 攻击。后续的 DDoS 攻击带宽最高也达到了 1Tbps。</p>\n<h3>DDoS 攻击究竟是什么？</h3>\n<p>DDos 全名 Distributed Denial of Service，翻译成中文就是<strong>分布式拒绝服务</strong>。指的是处于不同位置的多个攻击者同时向一个或数个目标发动攻击，是一种分布的、协同的大规模攻击方式。单一的 DoS 攻击一般是采用一对一方式的，它利用网络协议和操作系统的一些缺陷，采用<strong>欺骗和伪装</strong>的策略来进行网络攻击，使网站服务器充斥大量要求回复的信息，消耗网络带宽或系统资源，导致网络或系统不胜负荷以至于瘫痪而停止提供正常的网络服务。</p>\n<blockquote>\n<p>举个例子</p>\n</blockquote>\n<p>我开了一家有五十个座位的重庆火锅店，由于用料上等，童叟无欺。平时门庭若市，生意特别红火，而对面二狗家的火锅店却无人问津。二狗为了对付我，想了一个办法，叫了五十个人来我的火锅店坐着却不点菜，让别的客人无法吃饭。</p>\n<p>上面这个例子讲的就是典型的 DDoS 攻击，一般来说是指攻击者利用“肉鸡”对目标网站在较短的时间内发起大量请求，大规模消耗目标网站的主机资源，让它无法正常服务。在线游戏、互联网金融等领域是 DDoS 攻击的高发行业。</p>\n<p>攻击方式很多，比如 <strong>ICMP Flood</strong>、<strong>UDP Flood</strong>、<strong>NTP Flood</strong>、<strong>SYN Flood</strong>、<strong>CC 攻击</strong>、<strong>DNS Query Flood</strong>等等。</p>\n<h3>如何应对 DDoS 攻击？</h3>\n<h4>高防服务器</h4>\n<p>还是拿开的重庆火锅店举例，高防服务器就是我给重庆火锅店增加了两名保安，这两名保安可以让保护店铺不受流氓骚扰，并且还会定期在店铺周围巡逻防止流氓骚扰。</p>\n<p>高防服务器主要是指能独立硬防御 50Gbps 以上的服务器，能够帮助网站拒绝服务攻击，定期扫描网络主节点等，这东西是不错，就是贵~</p>\n<h4>黑名单</h4>\n<p>面对火锅店里面的流氓，我一怒之下将他们拍照入档，并禁止他们踏入店铺，但是有的时候遇到长得像的人也会禁止他进入店铺。这个就是设置黑名单，此方法秉承的就是“错杀一千，也不放一百”的原则，会封锁正常流量，影响到正常业务。</p>\n<h4>DDoS 清洗</h4>\n<p><strong>DDos</strong> 清洗，就是我发现客人进店几分钟以后，但是一直不点餐，我就把他踢出店里。</p>\n<p><strong>DDoS</strong> 清洗会对用户请求数据进行实时监控，及时发现 <strong>DOS</strong> 攻击等异常流量，在不影响正常业务开展的情况下清洗掉这些异常流量。</p>\n<h4>CDN 加速</h4>\n<p>CDN 加速，我们可以这么理解：为了减少流氓骚扰，我干脆将火锅店开到了线上，承接外卖服务，这样流氓找不到店在哪里，也耍不来流氓了。</p>\n<p>在现实中，CDN 服务将网站访问流量分配到了各个节点中，这样一方面隐藏网站的真实 IP，另一方面即使遭遇 <strong>DDoS</strong> 攻击，也可以将流量分散到各个节点中，防止源站崩溃。</p>\n<h2>参考</h2>\n<ul>\n<li>HTTP 洪水攻击 - CloudFlare：<a href=\"https://www.cloudflare.com/zh-cn/learning/ddos/http-flood-ddos-attack/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cloudflare.com/zh-cn/learning/ddos/http-flood-ddos-attack/</a></li>\n<li>SYN 洪水攻击：<a href=\"https://www.cloudflare.com/zh-cn/learning/ddos/syn-flood-ddos-attack/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cloudflare.com/zh-cn/learning/ddos/syn-flood-ddos-attack/</a></li>\n<li>什么是 IP 欺骗？：<a href=\"https://www.cloudflare.com/zh-cn/learning/ddos/glossary/ip-spoofing/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cloudflare.com/zh-cn/learning/ddos/glossary/ip-spoofing/</a></li>\n<li>什么是 DNS 洪水？| DNS 洪水 DDoS 攻击：<a href=\"https://www.cloudflare.com/zh-cn/learning/ddos/dns-flood-ddos-attack/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cloudflare.com/zh-cn/learning/ddos/dns-flood-ddos-attack/</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/p3-juejin/843fd07074874ee0b695eca659411b42~tplv-k3u1fbpfcp-zoom-1.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "OSI 和 TCP/IP 网络分层模型详解（基础）",
      "url": "https://javaguide.cn/cs-basics/network/osi-and-tcp-ip-model.html",
      "id": "https://javaguide.cn/cs-basics/network/osi-and-tcp-ip-model.html",
      "summary": "OSI 七层模型 OSI 七层模型 是国际标准化组织提出一个网络分层模型，其大体结构以及每一层提供的功能如下图所示： OSI 七层模型 每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。 OSI 的七层体系结构概念清楚，理论也很完整，但是它比较复杂而且不实用，而...",
      "content_html": "<h2>OSI 七层模型</h2>\n<p><strong>OSI 七层模型</strong> 是国际标准化组织提出一个网络分层模型，其大体结构以及每一层提供的功能如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png\" alt=\"OSI 七层模型\"></p>\n<p>每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。</p>\n<p><strong>OSI 的七层体系结构概念清楚，理论也很完整，但是它比较复杂而且不实用，而且有些功能在多个层中重复出现。</strong></p>\n<p>上面这种图可能比较抽象，再来一个比较生动的图片。下面这个图片是我在国外的一个网站上看到的，非常赞！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/osi七层模型2.png\" alt=\"osi七层模型2\"></p>\n<p><strong>既然 OSI 七层模型这么厉害，为什么干不过 TCP/IP 四 层模型呢？</strong></p>\n<p>的确，OSI 七层模型当时一直被一些大公司甚至一些国家政府支持。这样的背景下，为什么会失败呢？我觉得主要有下面几方面原因：</p>\n<ol>\n<li>OSI 的专家缺乏实际经验，他们在完成 OSI 标准时缺乏商业驱动力</li>\n<li>OSI 的协议实现起来过分复杂，而且运行效率很低</li>\n<li>OSI 制定标准的周期太长，因而使得按 OSI 标准生产的设备无法及时进入市场（20 世纪 90 年代初期，虽然整套的 OSI 国际标准都已经制定出来，但基于 TCP/IP 的互联网已经抢先在全球相当大的范围成功运行了）</li>\n<li>OSI 的层次划分不太合理，有些功能在多个层次中重复出现。</li>\n</ol>\n<p>OSI 七层模型虽然失败了，但是却提供了很多不错的理论基础。为了更好地去了解网络分层，OSI 七层模型还是非常有必要学习的。</p>\n<p>最后再分享一个关于 OSI 七层模型非常不错的总结图片！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-model-detail.png\" alt=\"\"></p>\n<h2>TCP/IP 四层模型</h2>\n<p><strong>TCP/IP 四层模型</strong> 是目前被广泛采用的一种模型,我们可以将 TCP / IP 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：</p>\n<ol>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>网络接口层</li>\n</ol>\n<p>需要注意的是，我们并不能将 TCP/IP 四层模型 和 OSI 七层模型完全精确地匹配起来，不过可以简单将两者对应起来，如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png\" alt=\"TCP/IP 四层模型\"></p>\n<h3>应用层（Application layer）</h3>\n<p><strong>应用层位于传输层之上，主要提供两个终端设备上的应用程序之间信息交换的服务，它定义了信息交换的格式，消息会交给下一层传输层来传输。</strong> 我们把应用层交互的数据单元称为报文。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-five-layer-sample-diagram.png\" alt=\"\"></p>\n<p>应用层协议定义了网络通信规则，对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如支持 Web 应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。</p>\n<p><strong>应用层常见协议</strong>：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/application-layer-protocol.png\" alt=\"应用层常见协议\"></p>\n<ul>\n<li><strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>：基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</li>\n<li><strong>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</strong>：基于 TCP 协议，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li>\n<li><strong>POP3/IMAP（邮件接收协议）</strong>：基于 TCP 协议，两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li>\n<li><strong>FTP（File Transfer Protocol，文件传输协议）</strong> : 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li>\n<li><strong>Telnet（远程登陆协议）</strong>：基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li>\n<li><strong>SSH（Secure Shell Protocol，安全的网络传输协议）</strong>：基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务</li>\n<li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</li>\n<li><strong>DNS（Domain Name System，域名管理系统）</strong>: 基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</li>\n</ul>\n<p>关于这些协议的详细介绍请看 <a href=\"/cs-basics/network/application-layer-protocol.html\" target=\"_blank\">应用层常见协议总结（应用层）</a> 这篇文章。</p>\n<h3>传输层（Transport layer）</h3>\n<p><strong>传输层的主要任务就是负责向两台终端设备进程之间的通信提供通用的数据传输服务。</strong> 应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。</p>\n<p><strong>传输层常见协议</strong>：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/transport-layer-protocol.png\" alt=\"传输层常见协议\"></p>\n<ul>\n<li><strong>TCP（Transmission Control Protocol，传输控制协议 ）</strong>：提供 <strong>面向连接</strong> 的，<strong>可靠</strong> 的数据传输服务。</li>\n<li><strong>UDP（User Datagram Protocol，用户数据协议）</strong>：提供 <strong>无连接</strong> 的，<strong>尽最大努力</strong> 的数据传输服务（不保证数据传输的可靠性），简单高效。</li>\n</ul>\n<h3>网络层（Network layer）</h3>\n<p><strong>网络层负责为分组交换网上的不同主机提供通信服务。</strong> 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报，简称数据报。</p>\n<p>⚠️ 注意：<strong>不要把运输层的“用户数据报 UDP”和网络层的“IP 数据报”弄混</strong>。</p>\n<p><strong>网络层的还有一个任务就是选择合适的路由，使源主机运输层所传下来的分组，能通过网络层中的路由器找到目的主机。</strong></p>\n<p>这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称。</p>\n<p>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Internet Protocol）和许多路由选择协议，因此互联网的网络层也叫做 <strong>网际层</strong> 或 <strong>IP 层</strong>。</p>\n<p><strong>网络层常见协议</strong>：</p>\n<p></p>\n<ul>\n<li><strong>IP（Internet Protocol，网际协议）</strong>：TCP/IP 协议中最重要的协议之一，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。</li>\n<li><strong>ARP（Address Resolution Protocol，地址解析协议）</strong>：ARP 协议解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li>\n<li><strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>：一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除。例如，Ping 工具就使用了 ICMP 协议来测试网络连通性。</li>\n<li><strong>NAT（Network Address Translation，网络地址转换协议）</strong>：NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</li>\n<li><strong>OSPF（Open Shortest Path First，开放式最短路径优先）</strong> ）：一种内部网关协议（Interior Gateway Protocol，IGP），也是广泛使用的一种动态路由协议，基于链路状态算法，考虑了链路的带宽、延迟等因素来选择最佳路径。</li>\n<li><strong>RIP(Routing Information Protocol，路由信息协议）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是一种动态路由协议，基于距离向量算法，使用固定的跳数作为度量标准，选择跳数最少的路径作为最佳路径。</li>\n<li><strong>BGP（Border Gateway Protocol，边界网关协议）</strong>：一种用来在路由选择域之间交换网络层可达性信息（Network Layer Reachability Information，NLRI）的路由选择协议，具有高度的灵活性和可扩展性。</li>\n</ul>\n<h3>网络接口层（Network interface layer）</h3>\n<p>我们可以把网络接口层看作是数据链路层和物理层的合体。</p>\n<ol>\n<li>数据链路层(data link layer)通常简称为链路层（ 两台主机之间的数据传输，总是在一段一段的链路上传送的）。<strong>数据链路层的作用是将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</strong></li>\n<li><strong>物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异</strong></li>\n</ol>\n<p>网络接口层重要功能和协议如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-interface-layer-protocol.png\" alt=\"网络接口层重要功能和协议\"></p>\n<h3>总结</h3>\n<p>简单总结一下每一层包含的协议和核心技术:</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-protocol-overview.png\" alt=\"TCP/IP 各层协议概览\"></p>\n<p><strong>应用层协议</strong> :</p>\n<ul>\n<li>HTTP（Hypertext Transfer Protocol，超文本传输协议）</li>\n<li>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</li>\n<li>POP3/IMAP（邮件接收协议）</li>\n<li>FTP（File Transfer Protocol，文件传输协议）</li>\n<li>Telnet（远程登陆协议）</li>\n<li>SSH（Secure Shell Protocol，安全的网络传输协议）</li>\n<li>RTP（Real-time Transport Protocol，实时传输协议）</li>\n<li>DNS（Domain Name System，域名管理系统）</li>\n<li>……</li>\n</ul>\n<p><strong>传输层协议</strong> :</p>\n<ul>\n<li>TCP 协议\n<ul>\n<li>报文段结构</li>\n<li>可靠数据传输</li>\n<li>流量控制</li>\n<li>拥塞控制</li>\n</ul>\n</li>\n<li>UDP 协议\n<ul>\n<li>报文段结构</li>\n<li>RDT（可靠数据传输协议）</li>\n</ul>\n</li>\n</ul>\n<p><strong>网络层协议</strong> :</p>\n<ul>\n<li>IP（Internet Protocol，网际协议）</li>\n<li>ARP（Address Resolution Protocol，地址解析协议）</li>\n<li>ICMP 协议（控制报文协议，用于发送控制消息）</li>\n<li>NAT（Network Address Translation，网络地址转换协议）</li>\n<li>OSPF（Open Shortest Path First，开放式最短路径优先）</li>\n<li>RIP(Routing Information Protocol，路由信息协议）</li>\n<li>BGP（Border Gateway Protocol，边界网关协议）</li>\n<li>……</li>\n</ul>\n<p><strong>网络接口层</strong> :</p>\n<ul>\n<li>差错检测技术</li>\n<li>多路访问协议（信道复用技术）</li>\n<li>CSMA/CD 协议</li>\n<li>MAC 协议</li>\n<li>以太网技术</li>\n<li>……</li>\n</ul>\n<h2>网络分层的原因</h2>\n<p>在这篇文章的最后，我想聊聊：“为什么网络要分层？”。</p>\n<p>说到分层，我们先从我们平时使用框架开发一个后台程序来说，我们往往会按照每一层做不同的事情的原则将系统分为三层（复杂的系统分层会更多）:</p>\n<ol>\n<li>Repository（数据库操作）</li>\n<li>Service（业务操作）</li>\n<li>Controller（前后端数据交互）</li>\n</ol>\n<p><strong>复杂的系统需要分层，因为每一层都需要专注于一类事情。网络分层的原因也是一样，每一层只专注于做一类事情。</strong></p>\n<p>好了，再来说回：“为什么网络要分层？”。我觉得主要有 3 方面的原因：</p>\n<ol>\n<li><strong>各层之间相互独立</strong>：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）<strong>。这个和我们对开发时系统进行分层是一个道理。</strong></li>\n<li><strong>提高了整体灵活性</strong>：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。<strong>这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。</strong></li>\n<li><strong>大问题化小</strong>：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 <strong>这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。</strong></li>\n</ol>\n<p>我想到了计算机世界非常非常有名的一句话，这里分享一下：</p>\n<blockquote>\n<p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决，计算机整个体系从上到下都是按照严格的层次结构设计的。</p>\n</blockquote>\n<h2>参考</h2>\n<ul>\n<li>TCP/IP model vs OSI model：<a href=\"https://fiberbit.com.tw/tcpip-model-vs-osi-model/\" target=\"_blank\" rel=\"noopener noreferrer\">https://fiberbit.com.tw/tcpip-model-vs-osi-model/</a></li>\n<li>Data Encapsulation and the TCP/IP Protocol Stack：<a href=\"https://docs.oracle.com/cd/E19683-01/806-4075/ipov-32/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.oracle.com/cd/E19683-01/806-4075/ipov-32/index.html</a></li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png\" alt=\"JavaGuide 官方公众号\"></p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "计算机网络常见面试题总结(上)",
      "url": "https://javaguide.cn/cs-basics/network/other-network-questions.html",
      "id": "https://javaguide.cn/cs-basics/network/other-network-questions.html",
      "summary": "这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 上篇主要是计算机网络基础和应用层相关的内容。 计算机网络基础 网络分层模型 OSI 七层模型是什么？每一层...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">这是一则或许对你有用的小广告</p>\n<ul>\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\"/zhuanlan/java-mian-shi-zhi-bei.html\" target=\"_blank\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\"/about-the-author/zhishixingqiu-two-years.html\" target=\"_blank\">JavaGuide 官方知识星球</a></strong>。</li>\n</ul>\n</div>\n<p>上篇主要是计算机网络基础和应用层相关的内容。</p>\n<h2>计算机网络基础</h2>\n<h3>网络分层模型</h3>\n<h4>OSI 七层模型是什么？每一层的作用是什么？</h4>\n<p><strong>OSI 七层模型</strong> 是国际标准化组织提出的一个网络分层模型，其大体结构以及每一层提供的功能如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png\" alt=\"OSI 七层模型\"></p>\n<p>每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。</p>\n<p><strong>OSI 的七层体系结构概念清楚，理论也很完整，但是它比较复杂而且不实用，而且有些功能在多个层中重复出现。</strong></p>\n<p>上面这种图可能比较抽象，再来一个比较生动的图片。下面这个图片是我在国外的一个网站上看到的，非常赞！</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/osi七层模型2.png\" alt=\"osi七层模型2\"></p>\n<h4>TCP/IP 四层模型是什么？每一层的作用是什么？</h4>\n<p><strong>TCP/IP 四层模型</strong> 是目前被广泛采用的一种模型,我们可以将 TCP / IP 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：</p>\n<ol>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>网络接口层</li>\n</ol>\n<p>需要注意的是，我们并不能将 TCP/IP 四层模型 和 OSI 七层模型完全精确地匹配起来，不过可以简单将两者对应起来，如下图所示：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png\" alt=\"TCP/IP 四层模型\"></p>\n<p>关于每一层作用的详细介绍，请看 <a href=\"/cs-basics/network/osi-and-tcp-ip-model.html\" target=\"_blank\">OSI 和 TCP/IP 网络分层模型详解（基础）</a> 这篇文章。</p>\n<h4>为什么网络要分层？</h4>\n<p>说到分层，我们先从我们平时使用框架开发一个后台程序来说，我们往往会按照每一层做不同的事情的原则将系统分为三层（复杂的系统分层会更多）:</p>\n<ol>\n<li>Repository（数据库操作）</li>\n<li>Service（业务操作）</li>\n<li>Controller（前后端数据交互）</li>\n</ol>\n<p><strong>复杂的系统需要分层，因为每一层都需要专注于一类事情。网络分层的原因也是一样，每一层只专注于做一类事情。</strong></p>\n<p>好了，再来说回：“为什么网络要分层？”。我觉得主要有 3 方面的原因：</p>\n<ol>\n<li><strong>各层之间相互独立</strong>：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）<strong>。这个和我们对开发时系统进行分层是一个道理。</strong></li>\n<li><strong>提高了灵活性和可替换性</strong>：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。并且，每一层都可以根据需要进行修改或替换，而不会影响到整个网络的结构。<strong>这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。</strong></li>\n<li><strong>大问题化小</strong>：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 <strong>这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。</strong></li>\n</ol>\n<p>我想到了计算机世界非常非常有名的一句话，这里分享一下：</p>\n<blockquote>\n<p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决，计算机整个体系从上到下都是按照严格的层次结构设计的。</p>\n</blockquote>\n<h3>常见网络协议</h3>\n<h4>应用层有哪些常见的协议？</h4>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/application-layer-protocol.png\" alt=\"应用层常见协议\"></p>\n<ul>\n<li><strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>：基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</li>\n<li><strong>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</strong>：基于 TCP 协议，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li>\n<li><strong>POP3/IMAP（邮件接收协议）</strong>：基于 TCP 协议，两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li>\n<li><strong>FTP（File Transfer Protocol，文件传输协议）</strong> : 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li>\n<li><strong>Telnet（远程登陆协议）</strong>：基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li>\n<li><strong>SSH（Secure Shell Protocol，安全的网络传输协议）</strong>：基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务</li>\n<li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</li>\n<li><strong>DNS（Domain Name System，域名管理系统）</strong>: 基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</li>\n</ul>\n<p>关于这些协议的详细介绍请看 <a href=\"/cs-basics/network/application-layer-protocol.html\" target=\"_blank\">应用层常见协议总结（应用层）</a> 这篇文章。</p>\n<h4>传输层有哪些常见的协议？</h4>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/transport-layer-protocol.png\" alt=\"传输层常见协议\"></p>\n<ul>\n<li><strong>TCP（Transmission Control Protocol，传输控制协议 ）</strong>：提供 <strong>面向连接</strong> 的，<strong>可靠</strong> 的数据传输服务。</li>\n<li><strong>UDP（User Datagram Protocol，用户数据协议）</strong>：提供 <strong>无连接</strong> 的，<strong>尽最大努力</strong> 的数据传输服务（不保证数据传输的可靠性），简单高效。</li>\n</ul>\n<h4>网络层有哪些常见的协议？</h4>\n<p></p>\n<ul>\n<li><strong>IP（Internet Protocol，网际协议）</strong>：TCP/IP 协议中最重要的协议之一，属于网络层的协议，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。</li>\n<li><strong>ARP（Address Resolution Protocol，地址解析协议）</strong>：ARP 协议解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li>\n<li><strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>：一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除。例如，Ping 工具就使用了 ICMP 协议来测试网络连通性。</li>\n<li><strong>NAT（Network Address Translation，网络地址转换协议）</strong>：NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</li>\n<li><strong>OSPF（Open Shortest Path First，开放式最短路径优先）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是广泛使用的一种动态路由协议，基于链路状态算法，考虑了链路的带宽、延迟等因素来选择最佳路径。</li>\n<li><strong>RIP(Routing Information Protocol，路由信息协议）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是一种动态路由协议，基于距离向量算法，使用固定的跳数作为度量标准，选择跳数最少的路径作为最佳路径。</li>\n<li><strong>BGP（Border Gateway Protocol，边界网关协议）</strong>：一种用来在路由选择域之间交换网络层可达性信息（Network Layer Reachability Information，NLRI）的路由选择协议，具有高度的灵活性和可扩展性。</li>\n</ul>\n<h2>HTTP</h2>\n<h3>从输入 URL 到页面展示到底发生了什么？（非常重要）</h3>\n<blockquote>\n<p>类似的问题：打开一个网页，整个过程会使用哪些协议？</p>\n</blockquote>\n<p>先来看一张图（来源于《图解 HTTP》）：</p>\n<img src=\"https://oss.javaguide.cn/github/javaguide/url输入到展示出来的过程.jpg\" style=\"zoom:50%\">\n<p>上图有一个错误需要注意：是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议</p>\n<p>总体来说分为以下几个步骤:</p>\n<ol>\n<li>在浏览器中输入指定网页的 URL。</li>\n<li>浏览器通过 DNS 协议，获取域名对应的 IP 地址。</li>\n<li>浏览器根据 IP 地址和端口号，向目标服务器发起一个 TCP 连接请求。</li>\n<li>浏览器在 TCP 连接上，向服务器发送一个 HTTP 请求报文，请求获取网页的内容。</li>\n<li>服务器收到 HTTP 请求报文后，处理请求，并返回 HTTP 响应报文给浏览器。</li>\n<li>浏览器收到 HTTP 响应报文后，解析响应体中的 HTML 代码，渲染网页的结构和样式，同时根据 HTML 中的其他资源的 URL（如图片、CSS、JS 等），再次发起 HTTP 请求，获取这些资源的内容，直到网页完全加载显示。</li>\n<li>浏览器在不需要和服务器通信时，可以主动关闭 TCP 连接，或者等待服务器的关闭请求。</li>\n</ol>\n<p>详细介绍可以查看这篇文章：<a href=\"/cs-basics/network/the-whole-process-of-accessing-web-pages.html\" target=\"_blank\">访问网页的全过程（知识串联）</a>（强烈推荐）。</p>\n<h3>HTTP 状态码有哪些？</h3>\n<p>HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png\" alt=\"常见 HTTP 状态码\"></p>\n<p>关于 HTTP 状态码更详细的总结，可以看我写的这篇文章：<a href=\"/cs-basics/network/http-status-codes.html\" target=\"_blank\">HTTP 常见状态码总结（应用层）</a>。</p>\n<h3>HTTP Header 中常见的字段有哪些？</h3>\n<p>| 请求头字段名        | 说明                                                                                                                                                                          | 示例                                                                             |<br>\n| :</p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    },
    {
      "title": "计算机网络常见面试题总结(下)",
      "url": "https://javaguide.cn/cs-basics/network/other-network-questions2.html",
      "id": "https://javaguide.cn/cs-basics/network/other-network-questions2.html",
      "summary": "下篇主要是传输层和网络层相关的内容。 TCP 与 UDP TCP 与 UDP 的区别（重要） 是否面向连接： TCP 是面向连接的。在传输数据之前，必须先通过“三次握手”建立连接；数据传输完成后，还需要通过“四次挥手”来释放连接。这保证了双方都准备好通信。 UDP 是无连接的。发送数据前不需要建立任何连接，直接把数据包（数据报）扔出去。 是否是可靠传输...",
      "content_html": "<p>下篇主要是传输层和网络层相关的内容。</p>\n<h2>TCP 与 UDP</h2>\n<h3>TCP 与 UDP 的区别（重要）</h3>\n<ol>\n<li><strong>是否面向连接</strong>：\n<ul>\n<li>TCP 是面向连接的。在传输数据之前，必须先通过“三次握手”建立连接；数据传输完成后，还需要通过“四次挥手”来释放连接。这保证了双方都准备好通信。</li>\n<li>UDP 是无连接的。发送数据前不需要建立任何连接，直接把数据包（数据报）扔出去。</li>\n</ul>\n</li>\n<li><strong>是否是可靠传输</strong>：\n<ul>\n<li>TCP 提供可靠的数据传输服务。它通过序列号、确认应答 (ACK)、超时重传、流量控制、拥塞控制等一系列机制，来确保数据能够无差错、不丢失、不重复且按顺序地到达目的地。</li>\n<li>UDP 提供不可靠的传输。它尽最大努力交付 (best-effort delivery)，但不保证数据一定能到达，也不保证到达的顺序，更不会自动重传。收到报文后，接收方也不会主动发确认。</li>\n</ul>\n</li>\n<li><strong>是否有状态</strong>：\n<ul>\n<li>TCP 是有状态的。因为要保证可靠性，TCP 需要在连接的两端维护连接状态信息，比如序列号、窗口大小、哪些数据发出去了、哪些收到了确认等。</li>\n<li>UDP 是无状态的。它不维护连接状态，发送方发出数据后就不再关心它是否到达以及如何到达，因此开销更小（<strong>这很“渣男”！</strong>）。</li>\n</ul>\n</li>\n<li><strong>传输效率</strong>：\n<ul>\n<li>TCP 因为需要建立连接、发送确认、处理重传等，其开销较大，传输效率相对较低。</li>\n<li>UDP 结构简单，没有复杂的控制机制，开销小，传输效率更高，速度更快。</li>\n</ul>\n</li>\n<li><strong>传输形式</strong>：\n<ul>\n<li>TCP 是面向字节流 (Byte Stream) 的。它将应用程序交付的数据视为一连串无结构的字节流，可能会对数据进行拆分或合并。</li>\n<li>UDP 是面向报文 (Message Oriented) 的。应用程序交给 UDP 多大的数据块，UDP 就照样发送，既不拆分也不合并，保留了应用程序消息的边界。</li>\n</ul>\n</li>\n<li><strong>首部开销</strong>：\n<ul>\n<li>TCP 的头部至少需要 20 字节，如果包含选项字段，最多可达 60 字节。</li>\n<li>UDP 的头部非常简单，固定只有 8 字节。</li>\n</ul>\n</li>\n<li><strong>是否提供广播或多播服务</strong>：\n<ul>\n<li>TCP 只支持点对点 (Point-to-Point) 的单播通信。</li>\n<li>UDP 支持一对一 (单播)、一对多 (多播/Multicast) 和一对所有 (广播/Broadcast) 的通信方式。</li>\n</ul>\n</li>\n<li>……</li>\n</ol>\n<p>为了更直观地对比，可以看下面这个表格：</p>\n<p>| 特性         | TCP                        | UDP                                 |<br>\n|</p>\n",
      "image": "https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-3-implementation.png",
      "date_published": "2025-06-22T03:45:21.000Z",
      "date_modified": "2025-06-22T03:45:21.000Z",
      "authors": [],
      "tags": [
        "计算机基础"
      ]
    }
  ]
}