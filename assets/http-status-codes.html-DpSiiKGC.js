import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o as n}from"./app-DIPkjwKa.js";const s={};function o(i,e){return n(),r("div",null,e[0]||(e[0]=[a('<p>HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png" alt="常见 HTTP 状态码"></p><h3 id="_1xx-informational-信息性状态码" tabindex="-1"><a class="header-anchor" href="#_1xx-informational-信息性状态码"><span>1xx Informational（信息性状态码）</span></a></h3><p>相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。</p><h3 id="_2xx-success-成功状态码" tabindex="-1"><a class="header-anchor" href="#_2xx-success-成功状态码"><span>2xx Success（成功状态码）</span></a></h3><ul><li><strong>200 OK</strong>：请求被成功处理。例如，发送一个查询用户数据的 HTTP 请求到服务端，服务端正确返回了用户数据。这个是我们平时最常见的一个 HTTP 状态码。</li><li><strong>201 Created</strong>：请求被成功处理并且在服务端创建了<s>一个新的资源</s>。例如，通过 POST 请求创建一个新的用户。</li><li><strong>202 Accepted</strong>：服务端已经接收到了请求，但是还未处理。例如，发送一个需要服务端花费较长时间处理的请求（如报告生成、Excel 导出），服务端接收了请求但尚未处理完毕。</li><li><strong>204 No Content</strong>：服务端已经成功处理了请求，但是没有返回任何内容。例如，发送请求删除一个用户，服务器成功处理了删除操作但没有返回任何内容。</li></ul><p>🐛 修正（参见：<a href="https://github.com/Snailclimb/JavaGuide/issues/2458" target="_blank" rel="noopener noreferrer">issue#2458</a>）：201 Created 状态码更准确点来说是创建一个或多个新的资源，可以参考：<a href="https://httpwg.org/specs/rfc9110.html#status.201" target="_blank" rel="noopener noreferrer">https://httpwg.org/specs/rfc9110.html#status.201</a>。</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/rfc9110-201-created.png" alt=""></p><p>这里格外提一下 204 状态码，平时学习/工作中见到的次数并不多。</p><p><a href="https://tools.ietf.org/html/rfc2616#section-10.2.5" target="_blank" rel="noopener noreferrer">HTTP RFC 2616 对 204 状态码的描述</a>如下：</p><blockquote><p>The server has fulfilled the request but does not need to return an<br> entity-body, and might want to return updated metainformation. The<br> response MAY include new or updated metainformation in the form of<br> entity-headers, which if present SHOULD be associated with the<br> requested variant.</p><p>If the client is a user agent, it SHOULD NOT change its document view<br> from that which caused the request to be sent. This response is<br> primarily intended to allow input for actions to take place without<br> causing a change to the user agent&#39;s active document view, although<br> any new or updated metainformation SHOULD be applied to the document<br> currently in the user agent&#39;s active view.</p><p>The 204 response MUST NOT include a message-body, and thus is always<br> terminated by the first empty line after the header fields.</p></blockquote><p>简单来说，204 状态码描述的是我们向服务端发送 HTTP 请求之后，只关注处理结果是否成功的场景。也就是说我们需要的就是一个结果：true/false。</p><p>举个例子：你要追一个女孩子，你问女孩子：“我能追你吗？”，女孩子回答：“好！”。我们把这个女孩子当做是服务端就很好理解 204 状态码了。</p><h3 id="_3xx-redirection-重定向状态码" tabindex="-1"><a class="header-anchor" href="#_3xx-redirection-重定向状态码"><span>3xx Redirection（重定向状态码）</span></a></h3><ul><li><strong>301 Moved Permanently</strong>：资源被永久重定向了。比如你的网站的网址更换了。</li><li><strong>302 Found</strong>：资源被临时重定向了。比如你的网站的某些资源被暂时转移到另外一个网址。</li></ul><h3 id="_4xx-client-error-客户端错误状态码" tabindex="-1"><a class="header-anchor" href="#_4xx-client-error-客户端错误状态码"><span>4xx Client Error（客户端错误状态码）</span></a></h3><ul><li><strong>400 Bad Request</strong>：发送的 HTTP 请求存在问题。比如请求参数不合法、请求方法错误。</li><li><strong>401 Unauthorized</strong>：未认证却请求需要认证之后才能访问的资源。</li><li><strong>403 Forbidden</strong>：直接拒绝 HTTP 请求，不处理。一般用来针对非法请求。</li><li><strong>404 Not Found</strong>：你请求的资源未在服务端找到。比如你请求某个用户的信息，服务端并没有找到指定的用户。</li><li><strong>409 Conflict</strong>：表示请求的资源与服务端当前的状态存在冲突，请求无法被处理。</li></ul><h3 id="_5xx-server-error-服务端错误状态码" tabindex="-1"><a class="header-anchor" href="#_5xx-server-error-服务端错误状态码"><span>5xx Server Error（服务端错误状态码）</span></a></h3><ul><li><strong>500 Internal Server Error</strong>：服务端出问题了（通常是服务端出 Bug 了）。比如你服务端处理请求的时候突然抛出异常，但是异常并未在服务端被正确处理。</li><li><strong>502 Bad Gateway</strong>：我们的网关将请求转发到服务端，但是服务端返回的却是一个错误的响应。</li></ul><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3><ul><li><a href="https://www.restapitutorial.com/httpstatuscodes.html" target="_blank" rel="noopener noreferrer">https://www.restapitutorial.com/httpstatuscodes.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></li><li><a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/List_of_HTTP_status_codes</a></li><li><a href="https://segmentfault.com/a/1190000018264501" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000018264501</a></li></ul><p><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号"></p>',22)]))}const p=t(s,[["render",o],["__file","http-status-codes.html.vue"]]),h=JSON.parse('{"path":"/cs-basics/network/http-status-codes.html","title":"HTTP 常见状态码总结（应用层）","lang":"zh-CN","frontmatter":{"title":"HTTP 常见状态码总结（应用层）","category":"计算机基础","tag":["计算机网络"],"description":"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。 常见 HTTP 状态码 1xx Informational（信息性状态码） 相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。 2xx Success（成功状态码） 200 OK：请求被成功处理。例如，发送一个查询用户数据的 HTTP 请求到...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/cs-basics/network/http-status-codes.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"HTTP 常见状态码总结（应用层）"}],["meta",{"property":"og:description","content":"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。 常见 HTTP 状态码 1xx Informational（信息性状态码） 相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。 2xx Success（成功状态码） 200 OK：请求被成功处理。例如，发送一个查询用户数据的 HTTP 请求到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T03:42:59.000Z"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:modified_time","content":"2025-06-22T03:42:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP 常见状态码总结（应用层）\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/rfc9110-201-created.png\\"],\\"dateModified\\":\\"2025-06-22T03:42:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":3,"title":"1xx Informational（信息性状态码）","slug":"_1xx-informational-信息性状态码","link":"#_1xx-informational-信息性状态码","children":[]},{"level":3,"title":"2xx Success（成功状态码）","slug":"_2xx-success-成功状态码","link":"#_2xx-success-成功状态码","children":[]},{"level":3,"title":"3xx Redirection（重定向状态码）","slug":"_3xx-redirection-重定向状态码","link":"#_3xx-redirection-重定向状态码","children":[]},{"level":3,"title":"4xx Client Error（客户端错误状态码）","slug":"_4xx-client-error-客户端错误状态码","link":"#_4xx-client-error-客户端错误状态码","children":[]},{"level":3,"title":"5xx Server Error（服务端错误状态码）","slug":"_5xx-server-error-服务端错误状态码","link":"#_5xx-server-error-服务端错误状态码","children":[]},{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1750563779000,"updatedTime":1750563779000,"contributors":[{"name":"DanlionYou","username":"DanlionYou","email":"3184877618.com","commits":1,"url":"https://github.com/DanlionYou"}]},"readingTime":{"minutes":3.3,"words":990},"filePathRelative":"cs-basics/network/http-status-codes.md","localizedDate":"2025年6月22日","excerpt":"<p>HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。</p>\\n<p><img src=\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png\\" alt=\\"常见 HTTP 状态码\\"></p>\\n<h3>1xx Informational（信息性状态码）</h3>\\n<p>相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。</p>\\n<h3>2xx Success（成功状态码）</h3>\\n<ul>\\n<li><strong>200 OK</strong>：请求被成功处理。例如，发送一个查询用户数据的 HTTP 请求到服务端，服务端正确返回了用户数据。这个是我们平时最常见的一个 HTTP 状态码。</li>\\n<li><strong>201 Created</strong>：请求被成功处理并且在服务端创建了<s>一个新的资源</s>。例如，通过 POST 请求创建一个新的用户。</li>\\n<li><strong>202 Accepted</strong>：服务端已经接收到了请求，但是还未处理。例如，发送一个需要服务端花费较长时间处理的请求（如报告生成、Excel 导出），服务端接收了请求但尚未处理完毕。</li>\\n<li><strong>204 No Content</strong>：服务端已经成功处理了请求，但是没有返回任何内容。例如，发送请求删除一个用户，服务器成功处理了删除操作但没有返回任何内容。</li>\\n</ul>","autoDesc":true}');export{p as comp,h as data};
