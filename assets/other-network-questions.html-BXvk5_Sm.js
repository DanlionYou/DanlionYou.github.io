import{_ as o}from"./nerwork-layer-protocol-Bjz31g7o.js";import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as s,f as e,d as l,e as n,a,r as d,o as g}from"./app-BF0hwt7B.js";const h={},T={class:"hint-container tip"};function c(k,t){const i=d("RouteLink");return g(),p("div",null,[s("div",T,[t[8]||(t[8]=s("p",{class:"hint-container-title"},"这是一则或许对你有用的小广告",-1)),s("ul",null,[s("li",null,[t[1]||(t[1]=s("strong",null,"面试专版",-1)),t[2]||(t[2]=e("：准备 Java 面试的小伙伴可以考虑面试专版：")),s("strong",null,[l(i,{to:"/zhuanlan/java-mian-shi-zhi-bei.html"},{default:n(()=>t[0]||(t[0]=[e("《Java 面试指北 》")])),_:1})]),t[3]||(t[3]=e(" (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。"))]),s("li",null,[t[5]||(t[5]=s("strong",null,"知识星球",-1)),t[6]||(t[6]=e("：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 ")),s("strong",null,[l(i,{to:"/about-the-author/zhishixingqiu-two-years.html"},{default:n(()=>t[4]||(t[4]=[e("JavaGuide 官方知识星球")])),_:1})]),t[7]||(t[7]=e("。"))])])]),t[33]||(t[33]=a('<p>上篇主要是计算机网络基础和应用层相关的内容。</p><h2 id="计算机网络基础" tabindex="-1"><a class="header-anchor" href="#计算机网络基础"><span>计算机网络基础</span></a></h2><h3 id="网络分层模型" tabindex="-1"><a class="header-anchor" href="#网络分层模型"><span>网络分层模型</span></a></h3><h4 id="osi-七层模型是什么-每一层的作用是什么" tabindex="-1"><a class="header-anchor" href="#osi-七层模型是什么-每一层的作用是什么"><span>OSI 七层模型是什么？每一层的作用是什么？</span></a></h4><p><strong>OSI 七层模型</strong> 是国际标准化组织提出的一个网络分层模型，其大体结构以及每一层提供的功能如下图所示：</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png" alt="OSI 七层模型"></p><p>每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。</p><p><strong>OSI 的七层体系结构概念清楚，理论也很完整，但是它比较复杂而且不实用，而且有些功能在多个层中重复出现。</strong></p><p>上面这种图可能比较抽象，再来一个比较生动的图片。下面这个图片是我在国外的一个网站上看到的，非常赞！</p><p><img src="https://oss.javaguide.cn/github/javaguide/osi七层模型2.png" alt="osi七层模型2"></p><h4 id="tcp-ip-四层模型是什么-每一层的作用是什么" tabindex="-1"><a class="header-anchor" href="#tcp-ip-四层模型是什么-每一层的作用是什么"><span>TCP/IP 四层模型是什么？每一层的作用是什么？</span></a></h4><p><strong>TCP/IP 四层模型</strong> 是目前被广泛采用的一种模型,我们可以将 TCP / IP 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：</p><ol><li>应用层</li><li>传输层</li><li>网络层</li><li>网络接口层</li></ol><p>需要注意的是，我们并不能将 TCP/IP 四层模型 和 OSI 七层模型完全精确地匹配起来，不过可以简单将两者对应起来，如下图所示：</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png" alt="TCP/IP 四层模型"></p>',15)),s("p",null,[t[10]||(t[10]=e("关于每一层作用的详细介绍，请看 ")),l(i,{to:"/cs-basics/network/osi-and-tcp-ip-model.html"},{default:n(()=>t[9]||(t[9]=[e("OSI 和 TCP/IP 网络分层模型详解（基础）")])),_:1}),t[11]||(t[11]=e(" 这篇文章。"))]),t[34]||(t[34]=a('<h4 id="为什么网络要分层" tabindex="-1"><a class="header-anchor" href="#为什么网络要分层"><span>为什么网络要分层？</span></a></h4><p>说到分层，我们先从我们平时使用框架开发一个后台程序来说，我们往往会按照每一层做不同的事情的原则将系统分为三层（复杂的系统分层会更多）:</p><ol><li>Repository（数据库操作）</li><li>Service（业务操作）</li><li>Controller（前后端数据交互）</li></ol><p><strong>复杂的系统需要分层，因为每一层都需要专注于一类事情。网络分层的原因也是一样，每一层只专注于做一类事情。</strong></p><p>好了，再来说回：“为什么网络要分层？”。我觉得主要有 3 方面的原因：</p><ol><li><strong>各层之间相互独立</strong>：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）<strong>。这个和我们对开发时系统进行分层是一个道理。</strong></li><li><strong>提高了灵活性和可替换性</strong>：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。并且，每一层都可以根据需要进行修改或替换，而不会影响到整个网络的结构。<strong>这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。</strong></li><li><strong>大问题化小</strong>：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 <strong>这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。</strong></li></ol><p>我想到了计算机世界非常非常有名的一句话，这里分享一下：</p><blockquote><p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决，计算机整个体系从上到下都是按照严格的层次结构设计的。</p></blockquote><h3 id="常见网络协议" tabindex="-1"><a class="header-anchor" href="#常见网络协议"><span>常见网络协议</span></a></h3><h4 id="应用层有哪些常见的协议" tabindex="-1"><a class="header-anchor" href="#应用层有哪些常见的协议"><span>应用层有哪些常见的协议？</span></a></h4><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/application-layer-protocol.png" alt="应用层常见协议"></p><ul><li><strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>：基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</li><li><strong>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</strong>：基于 TCP 协议，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li><li><strong>POP3/IMAP（邮件接收协议）</strong>：基于 TCP 协议，两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li><li><strong>FTP（File Transfer Protocol，文件传输协议）</strong> : 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li><li><strong>Telnet（远程登陆协议）</strong>：基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li><li><strong>SSH（Secure Shell Protocol，安全的网络传输协议）</strong>：基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务</li><li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</li><li><strong>DNS（Domain Name System，域名管理系统）</strong>: 基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</li></ul>',12)),s("p",null,[t[13]||(t[13]=e("关于这些协议的详细介绍请看 ")),l(i,{to:"/cs-basics/network/application-layer-protocol.html"},{default:n(()=>t[12]||(t[12]=[e("应用层常见协议总结（应用层）")])),_:1}),t[14]||(t[14]=e(" 这篇文章。"))]),t[35]||(t[35]=a('<h4 id="传输层有哪些常见的协议" tabindex="-1"><a class="header-anchor" href="#传输层有哪些常见的协议"><span>传输层有哪些常见的协议？</span></a></h4><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/transport-layer-protocol.png" alt="传输层常见协议"></p><ul><li><strong>TCP（Transmission Control Protocol，传输控制协议 ）</strong>：提供 <strong>面向连接</strong> 的，<strong>可靠</strong> 的数据传输服务。</li><li><strong>UDP（User Datagram Protocol，用户数据协议）</strong>：提供 <strong>无连接</strong> 的，<strong>尽最大努力</strong> 的数据传输服务（不保证数据传输的可靠性），简单高效。</li></ul><h4 id="网络层有哪些常见的协议" tabindex="-1"><a class="header-anchor" href="#网络层有哪些常见的协议"><span>网络层有哪些常见的协议？</span></a></h4><p><img src="'+o+'" alt="网络层常见协议"></p><ul><li><strong>IP（Internet Protocol，网际协议）</strong>：TCP/IP 协议中最重要的协议之一，属于网络层的协议，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。</li><li><strong>ARP（Address Resolution Protocol，地址解析协议）</strong>：ARP 协议解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li><li><strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>：一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除。例如，Ping 工具就使用了 ICMP 协议来测试网络连通性。</li><li><strong>NAT（Network Address Translation，网络地址转换协议）</strong>：NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</li><li><strong>OSPF（Open Shortest Path First，开放式最短路径优先）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是广泛使用的一种动态路由协议，基于链路状态算法，考虑了链路的带宽、延迟等因素来选择最佳路径。</li><li><strong>RIP(Routing Information Protocol，路由信息协议）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是一种动态路由协议，基于距离向量算法，使用固定的跳数作为度量标准，选择跳数最少的路径作为最佳路径。</li><li><strong>BGP（Border Gateway Protocol，边界网关协议）</strong>：一种用来在路由选择域之间交换网络层可达性信息（Network Layer Reachability Information，NLRI）的路由选择协议，具有高度的灵活性和可扩展性。</li></ul><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h2><h3 id="从输入-url-到页面展示到底发生了什么-非常重要" tabindex="-1"><a class="header-anchor" href="#从输入-url-到页面展示到底发生了什么-非常重要"><span>从输入 URL 到页面展示到底发生了什么？（非常重要）</span></a></h3><blockquote><p>类似的问题：打开一个网页，整个过程会使用哪些协议？</p></blockquote><p>先来看一张图（来源于《图解 HTTP》）：</p><img src="https://oss.javaguide.cn/github/javaguide/url输入到展示出来的过程.jpg" style="zoom:50%;"><p>上图有一个错误需要注意：是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议</p><p>总体来说分为以下几个步骤:</p><ol><li>在浏览器中输入指定网页的 URL。</li><li>浏览器通过 DNS 协议，获取域名对应的 IP 地址。</li><li>浏览器根据 IP 地址和端口号，向目标服务器发起一个 TCP 连接请求。</li><li>浏览器在 TCP 连接上，向服务器发送一个 HTTP 请求报文，请求获取网页的内容。</li><li>服务器收到 HTTP 请求报文后，处理请求，并返回 HTTP 响应报文给浏览器。</li><li>浏览器收到 HTTP 响应报文后，解析响应体中的 HTML 代码，渲染网页的结构和样式，同时根据 HTML 中的其他资源的 URL（如图片、CSS、JS 等），再次发起 HTTP 请求，获取这些资源的内容，直到网页完全加载显示。</li><li>浏览器在不需要和服务器通信时，可以主动关闭 TCP 连接，或者等待服务器的关闭请求。</li></ol>',14)),s("p",null,[t[16]||(t[16]=e("详细介绍可以查看这篇文章：")),l(i,{to:"/cs-basics/network/the-whole-process-of-accessing-web-pages.html"},{default:n(()=>t[15]||(t[15]=[e("访问网页的全过程（知识串联）")])),_:1}),t[17]||(t[17]=e("（强烈推荐）。"))]),t[36]||(t[36]=s("h3",{id:"http-状态码有哪些",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#http-状态码有哪些"},[s("span",null,"HTTP 状态码有哪些？")])],-1)),t[37]||(t[37]=s("p",null,"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。",-1)),t[38]||(t[38]=s("p",null,[s("img",{src:"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png",alt:"常见 HTTP 状态码"})],-1)),s("p",null,[t[19]||(t[19]=e("关于 HTTP 状态码更详细的总结，可以看我写的这篇文章：")),l(i,{to:"/cs-basics/network/http-status-codes.html"},{default:n(()=>t[18]||(t[18]=[e("HTTP 常见状态码总结（应用层）")])),_:1}),t[20]||(t[20]=e("。"))]),t[39]||(t[39]=a('<h3 id="http-header-中常见的字段有哪些" tabindex="-1"><a class="header-anchor" href="#http-header-中常见的字段有哪些"><span>HTTP Header 中常见的字段有哪些？</span></a></h3><table><thead><tr><th style="text-align:left;">请求头字段名</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;">Accept</td><td style="text-align:left;">能够接受的回应内容类型（Content-Types）。</td><td style="text-align:left;">Accept: text/plain</td></tr><tr><td style="text-align:left;">Accept-Charset</td><td style="text-align:left;">能够接受的字符集</td><td style="text-align:left;">Accept-Charset: utf-8</td></tr><tr><td style="text-align:left;">Accept-Datetime</td><td style="text-align:left;">能够接受的按照时间来表示的版本</td><td style="text-align:left;">Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT</td></tr><tr><td style="text-align:left;">Accept-Encoding</td><td style="text-align:left;">能够接受的编码方式列表。参考 HTTP 压缩。</td><td style="text-align:left;">Accept-Encoding: gzip, deflate</td></tr><tr><td style="text-align:left;">Accept-Language</td><td style="text-align:left;">能够接受的回应内容的自然语言列表。</td><td style="text-align:left;">Accept-Language: en-US</td></tr><tr><td style="text-align:left;">Authorization</td><td style="text-align:left;">用于超文本传输协议的认证的认证信息</td><td style="text-align:left;">Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td></tr><tr><td style="text-align:left;">Cache-Control</td><td style="text-align:left;">用来指定在这次的请求/响应链中的所有缓存机制 都必须 遵守的指令</td><td style="text-align:left;">Cache-Control: no-cache</td></tr><tr><td style="text-align:left;">Connection</td><td style="text-align:left;">该浏览器想要优先使用的连接类型</td><td style="text-align:left;">Connection: keep-alive</td></tr><tr><td style="text-align:left;">Content-Length</td><td style="text-align:left;">以八位字节数组（8 位的字节）表示的请求体的长度</td><td style="text-align:left;">Content-Length: 348</td></tr><tr><td style="text-align:left;">Content-MD5</td><td style="text-align:left;">请求体的内容的二进制 MD5 散列值，以 Base64 编码的结果</td><td style="text-align:left;">Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td></tr><tr><td style="text-align:left;">Content-Type</td><td style="text-align:left;">请求体的多媒体类型（用于 POST 和 PUT 请求中）</td><td style="text-align:left;">Content-Type: application/x-www-form-urlencoded</td></tr><tr><td style="text-align:left;">Cookie</td><td style="text-align:left;">之前由服务器通过 Set-Cookie（下文详述）发送的一个超文本传输协议 Cookie</td><td style="text-align:left;">Cookie: $Version=1; Skin=new;</td></tr><tr><td style="text-align:left;">Date</td><td style="text-align:left;">发送该消息的日期和时间(按照 RFC 7231 中定义的&quot;超文本传输协议日期&quot;格式来发送)</td><td style="text-align:left;">Date: Tue, 15 Nov 1994 08:12:31 GMT</td></tr><tr><td style="text-align:left;">Expect</td><td style="text-align:left;">表明客户端要求服务器做出特定的行为</td><td style="text-align:left;">Expect: 100-continue</td></tr><tr><td style="text-align:left;">From</td><td style="text-align:left;">发起此请求的用户的邮件地址</td><td style="text-align:left;">From: <code>user@example.com</code></td></tr><tr><td style="text-align:left;">Host</td><td style="text-align:left;">服务器的域名(用于虚拟主机)，以及服务器所监听的传输控制协议端口号。如果所请求的端口是对应的服务的标准端口，则端口号可被省略。</td><td style="text-align:left;">Host: <a href="http://en.wikipedia.org" target="_blank" rel="noopener noreferrer">en.wikipedia.org</a></td></tr><tr><td style="text-align:left;">If-Match</td><td style="text-align:left;">仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要作用是用于像 PUT 这样的方法中，仅当从用户上次更新某个资源以来，该资源未被修改的情况下，才更新该资源。</td><td style="text-align:left;">If-Match: &quot;737060cd8c284d8af7ad3082f209582d&quot;</td></tr><tr><td style="text-align:left;">If-Modified-Since</td><td style="text-align:left;">允许服务器在请求的资源自指定的日期以来未被修改的情况下返回 <code>304 Not Modified</code> 状态码</td><td style="text-align:left;">If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT</td></tr><tr><td style="text-align:left;">If-None-Match</td><td style="text-align:left;">允许服务器在请求的资源的 ETag 未发生变化的情况下返回 <code>304 Not Modified</code> 状态码</td><td style="text-align:left;">If-None-Match: &quot;737060cd8c284d8af7ad3082f209582d&quot;</td></tr><tr><td style="text-align:left;">If-Range</td><td style="text-align:left;">如果该实体未被修改过，则向我发送我所缺少的那一个或多个部分；否则，发送整个新的实体</td><td style="text-align:left;">If-Range: &quot;737060cd8c284d8af7ad3082f209582d&quot;</td></tr><tr><td style="text-align:left;">If-Unmodified-Since</td><td style="text-align:left;">仅当该实体自某个特定时间以来未被修改的情况下，才发送回应。</td><td style="text-align:left;">If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT</td></tr><tr><td style="text-align:left;">Max-Forwards</td><td style="text-align:left;">限制该消息可被代理及网关转发的次数。</td><td style="text-align:left;">Max-Forwards: 10</td></tr><tr><td style="text-align:left;">Origin</td><td style="text-align:left;">发起一个针对跨来源资源共享的请求。</td><td style="text-align:left;"><code>Origin: http://www.example-social-network.com</code></td></tr><tr><td style="text-align:left;">Pragma</td><td style="text-align:left;">与具体的实现相关，这些字段可能在请求/回应链中的任何时候产生多种效果。</td><td style="text-align:left;">Pragma: no-cache</td></tr><tr><td style="text-align:left;">Proxy-Authorization</td><td style="text-align:left;">用来向代理进行认证的认证信息。</td><td style="text-align:left;">Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td></tr><tr><td style="text-align:left;">Range</td><td style="text-align:left;">仅请求某个实体的一部分。字节偏移以 0 开始。参见字节服务。</td><td style="text-align:left;">Range: bytes=500-999</td></tr><tr><td style="text-align:left;">Referer</td><td style="text-align:left;">表示浏览器所访问的前一个页面，正是那个页面上的某个链接将浏览器带到了当前所请求的这个页面。</td><td style="text-align:left;"><code>Referer: http://en.wikipedia.org/wiki/Main_Page</code></td></tr><tr><td style="text-align:left;">TE</td><td style="text-align:left;">浏览器预期接受的传输编码方式：可使用回应协议头 Transfer-Encoding 字段中的值；</td><td style="text-align:left;">TE: trailers, deflate</td></tr><tr><td style="text-align:left;">Upgrade</td><td style="text-align:left;">要求服务器升级到另一个协议。</td><td style="text-align:left;">Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td></tr><tr><td style="text-align:left;">User-Agent</td><td style="text-align:left;">浏览器的浏览器身份标识字符串</td><td style="text-align:left;">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0</td></tr><tr><td style="text-align:left;">Via</td><td style="text-align:left;">向服务器告知，这个请求是由哪些代理发出的。</td><td style="text-align:left;">Via: 1.0 fred, 1.1 <a href="http://example.com" target="_blank" rel="noopener noreferrer">example.com</a> (Apache/1.1)</td></tr><tr><td style="text-align:left;">Warning</td><td style="text-align:left;">一个一般性的警告，告知，在实体内容体中可能存在错误。</td><td style="text-align:left;">Warning: 199 Miscellaneous warning</td></tr></tbody></table><h3 id="http-和-https-有什么区别-重要" tabindex="-1"><a class="header-anchor" href="#http-和-https-有什么区别-重要"><span>HTTP 和 HTTPS 有什么区别？（重要）</span></a></h3><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-vs-https.png" alt="HTTP 和 HTTPS 对比"></p><ul><li><strong>端口号</strong>：HTTP 默认是 80，HTTPS 默认是 443。</li><li><strong>URL 前缀</strong>：HTTP 的 URL 前缀是 <code>http://</code>，HTTPS 的 URL 前缀是 <code>https://</code>。</li><li><strong>安全性和资源消耗</strong>：HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li><li><strong>SEO（搜索引擎优化）</strong>：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。</li></ul>',5)),s("p",null,[t[22]||(t[22]=e("关于 HTTP 和 HTTPS 更详细的对比总结，可以看我写的这篇文章：")),l(i,{to:"/cs-basics/network/http-vs-https.html"},{default:n(()=>t[21]||(t[21]=[e("HTTP vs HTTPS（应用层）")])),_:1}),t[23]||(t[23]=e(" 。"))]),t[40]||(t[40]=a('<h3 id="http-1-0-和-http-1-1-有什么区别" tabindex="-1"><a class="header-anchor" href="#http-1-0-和-http-1-1-有什么区别"><span>HTTP/1.0 和 HTTP/1.1 有什么区别？</span></a></h3><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http1.0-vs-http1.1.png" alt="HTTP/1.0 和 HTTP/1.1 对比"></p><ul><li><strong>连接方式</strong> : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。HTTP 协议的长连接和短连接，实质上是 TCP 协议的长连接和短连接。</li><li><strong>状态响应码</strong> : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，<code>100 (Continue)</code>——在请求大资源前的预热请求，<code>206 (Partial Content)</code>——范围请求的标识码，<code>409 (Conflict)</code>——请求与当前资源的规定冲突，<code>410 (Gone)</code>——资源已被永久转移，而且没有任何已知的转发地址。</li><li><strong>缓存机制</strong> : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li><li><strong>带宽</strong>：HTTP/1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP/1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li><strong>Host 头（Host Header）处理</strong> :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。</li></ul>',3)),s("p",null,[t[25]||(t[25]=e("关于 HTTP/1.0 和 HTTP/1.1 更详细的对比总结，可以看我写的这篇文章：")),l(i,{to:"/cs-basics/network/http1.0-vs-http1.1.html"},{default:n(()=>t[24]||(t[24]=[e("HTTP/1.0 vs HTTP/1.1（应用层）")])),_:1}),t[26]||(t[26]=e(" 。"))]),t[41]||(t[41]=a('<h3 id="http-1-1-和-http-2-0-有什么区别" tabindex="-1"><a class="header-anchor" href="#http-1-1-和-http-2-0-有什么区别"><span>HTTP/1.1 和 HTTP/2.0 有什么区别？</span></a></h3><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http1.1-vs-http2.0.png" alt="HTTP/1.0 和 HTTP/1.1 对比"></p><ul><li><strong>多路复用（Multiplexing）</strong>：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本），互不干扰。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接，而浏览器为了控制资源会有 6-8 个 TCP 连接的限制。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。</li><li><strong>二进制帧（Binary Frames）</strong>：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。</li><li><strong>队头阻塞</strong>：HTTP/2 引入了多路复用技术，允许多个请求和响应在单个 TCP 连接上并行交错传输，解决了 HTTP/1.1 应用层的队头阻塞问题，但 HTTP/2 依然受到 TCP 层队头阻塞 的影响。</li><li><strong>头部压缩（Header Compression）</strong>：HTTP/1.1 支持<code>Body</code>压缩，<code>Header</code>不支持压缩。HTTP/2.0 支持对<code>Header</code>压缩，使用了专门为<code>Header</code>压缩而设计的 HPACK 算法，减少了网络开销。</li><li><strong>服务器推送（Server Push）</strong>：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。</li></ul><p>HTTP/2.0 多路复用效果图（图源： <a href="https://blog.cloudflare.com/http-2-for-web-developers/" target="_blank" rel="noopener noreferrer">HTTP/2 For Web Developers</a>）：</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http2.0-multiplexing.png" alt="HTTP/2 Multiplexing"></p><p>可以看到，HTTP/2 的多路复用机制允许多个请求和响应共享一个 TCP 连接，从而避免了 HTTP/1.1 在应对并发请求时需要建立多个并行连接的情况，减少了重复连接建立和维护的额外开销。而在 HTTP/1.1 中，尽管支持持久连接，但为了缓解队头阻塞问题，浏览器通常会为同一域名建立多个并行连接。</p><h3 id="http-2-0-和-http-3-0-有什么区别" tabindex="-1"><a class="header-anchor" href="#http-2-0-和-http-3-0-有什么区别"><span>HTTP/2.0 和 HTTP/3.0 有什么区别？</span></a></h3><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http2.0-vs-http3.0.png" alt="HTTP/2.0 和 HTTP/3.0 对比"></p><ul><li><strong>传输协议</strong>：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。</li><li><strong>连接建立</strong>：HTTP/2.0 需要经过经典的 TCP 三次握手过程（由于安全的 HTTPS 连接建立还需要 TLS 握手，共需要大约 3 个 RTT）。由于 QUIC 协议的特性（TLS 1.3，TLS 1.3 除了支持 1 个 RTT 的握手，还支持 0 个 RTT 的握手）连接建立仅需 0-RTT 或者 1-RTT。这意味着 QUIC 在最佳情况下不需要任何的额外往返时间就可以建立新连接。</li><li><strong>头部压缩</strong>：HTTP/2.0 使用 HPACK 算法进行头部压缩，而 HTTP/3.0 使用更高效的 QPACK 头压缩算法。</li><li><strong>队头阻塞</strong>：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。</li><li><strong>连接迁移</strong>：HTTP/3.0 支持连接迁移，因为 QUIC 使用 64 位 ID 标识连接，只要 ID 不变就不会中断，网络环境改变时（如从 Wi-Fi 切换到移动数据）也能保持连接。而 TCP 连接是由（源 IP，源端口，目的 IP，目的端口）组成，这个四元组中一旦有一项值发生改变，这个连接也就不能用了。</li><li><strong>错误恢复</strong>：HTTP/3.0 具有更好的错误恢复机制，当出现丢包、延迟等网络问题时，可以更快地进行恢复和重传。而 HTTP/2.0 则需要依赖于 TCP 的错误恢复机制。</li><li><strong>安全性</strong>：在 HTTP/2.0 中，TLS 用于加密和认证整个 HTTP 会话，包括所有的 HTTP 头部和数据负载。TLS 的工作是在 TCP 层之上，它加密的是在 TCP 连接中传输的应用层的数据，并不会对 TCP 头部以及 TLS 记录层头部进行加密，所以在传输的过程中 TCP 头部可能会被攻击者篡改来干扰通信。而 HTTP/3.0 的 QUIC 对整个数据包（包括报文头和报文体）进行了加密与认证处理，保障安全性。</li></ul><p>HTTP/1.0、HTTP/2.0 和 HTTP/3.0 的协议栈比较：</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-3-implementation.png" alt="http-3-implementation"></p><p>下图是一个更详细的 HTTP/2.0 和 HTTP/3.0 对比图：</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http2-and-http3-stacks-comparison.png" alt="HTTP/2.0 和 HTTP/3.0 详细对比图"></p><p>从上图可以看出：</p><ul><li><strong>HTTP/2.0</strong>：使用 TCP 作为传输协议、使用 HPACK 进行头部压缩、依赖 TLS 进行加密。</li><li><strong>HTTP/3.0</strong>：使用基于 UDP 的 QUIC 协议、使用更高效的 QPACK 进行头部压缩、在 QUIC 中直接集成了 TLS。QUIC 协议具备连接迁移、拥塞控制与避免、流量控制等特性。</li></ul><p>关于 HTTP/1.0 -&gt; HTTP/3.0 更详细的演进介绍，推荐阅读<a href="https://dbwu.tech/posts/http_evolution/" target="_blank" rel="noopener noreferrer">HTTP1 到 HTTP3 的工程优化</a>。</p><h3 id="http-1-1-和-http-2-0-的队头阻塞有什么不同" tabindex="-1"><a class="header-anchor" href="#http-1-1-和-http-2-0-的队头阻塞有什么不同"><span>HTTP/1.1 和 HTTP/2.0 的队头阻塞有什么不同？</span></a></h3><p>HTTP/1.1 队头阻塞的主要原因是无法多路复用：</p><ul><li>在一个 TCP 连接中，资源的请求和响应是按顺序处理的。如果一个大的资源（如一个大文件）正在传输，后续的小资源（如较小的 CSS 文件）需要等待前面的资源传输完成后才能被发送。</li><li>如果浏览器需要同时加载多个资源（如多个 CSS、JS 文件等），它通常会开启多个并行的 TCP 连接（一般限制为 6 个）。但每个连接仍然受限于顺序的请求-响应机制，因此仍然会发生 <strong>应用层的队头阻塞</strong>。</li></ul><p>虽然 HTTP/2.0 引入了多路复用技术，允许多个请求和响应在单个 TCP 连接上并行交错传输，解决了 <strong>HTTP/1.1 应用层的队头阻塞问题</strong>，但 HTTP/2.0 依然受到 <strong>TCP 层队头阻塞</strong> 的影响：</p><ul><li>HTTP/2.0 通过帧（frame）机制将每个资源分割成小块，并为每个资源分配唯一的流 ID，这样多个资源的数据可以在同一 TCP 连接中交错传输。</li><li>TCP 作为传输层协议，要求数据按顺序交付。如果某个数据包在传输过程中丢失，即使后续的数据包已经到达，也必须等待丢失的数据包重传后才能继续处理。这种传输层的顺序性导致了 <strong>TCP 层的队头阻塞</strong>。</li><li>举例来说，如果 HTTP/2 的一个 TCP 数据包中携带了多个资源的数据（例如 JS 和 CSS），而该数据包丢失了，那么后续数据包中的所有资源数据都需要等待丢失的数据包重传回来，导致所有流（streams）都被阻塞。</li></ul><p>最后，来一张表格总结补充一下：</p><table><thead><tr><th><strong>方面</strong></th><th><strong>HTTP/1.1 的队头阻塞</strong></th><th><strong>HTTP/2.0 的队头阻塞</strong></th></tr></thead><tbody><tr><td><strong>层级</strong></td><td>应用层（HTTP 协议本身的限制）</td><td>传输层（TCP 协议的限制）</td></tr><tr><td><strong>根本原因</strong></td><td>无法多路复用，请求和响应必须按顺序传输</td><td>TCP 要求数据包按顺序交付，丢包时阻塞整个连接</td></tr><tr><td><strong>受影响范围</strong></td><td>单个 HTTP 请求/响应会阻塞后续请求/响应。</td><td>单个 TCP 包丢失会影响所有 HTTP/2.0 流(依赖于同一个底层 TCP 连接)</td></tr><tr><td><strong>缓解方法</strong></td><td>开启多个并行的 TCP 连接</td><td>减少网络掉包或者使用基于 UDP 的 QUIC 协议</td></tr><tr><td><strong>影响场景</strong></td><td>每次都会发生，尤其是大文件阻塞小文件时。</td><td>丢包率较高的网络环境下更容易发生。</td></tr></tbody></table><h3 id="http-是不保存状态的协议-如何保存用户状态" tabindex="-1"><a class="header-anchor" href="#http-是不保存状态的协议-如何保存用户状态"><span>HTTP 是不保存状态的协议, 如何保存用户状态?</span></a></h3><p>HTTP 协议本身是 <strong>无状态的 (stateless)</strong> 。这意味着服务器默认情况下无法区分两个连续的请求是否来自同一个用户，或者同一个用户之前的操作是什么。这就像一个“健忘”的服务员，每次你跟他说话，他都不知道你是谁，也不知道你之前点过什么菜。</p><p>但在实际的 Web 应用中，比如网上购物、用户登录等场景，我们显然需要记住用户的状态（例如购物车里的商品、用户的登录信息）。为了解决这个问题，主要有以下几种常用机制：</p><p><strong>方案一：Session (会话) 配合 Cookie (主流方式)：</strong></p><p><img src="https://oss.javaguide.cn/github/javaguide/system-design/security/session-cookie-authentication-process.png" alt=""></p><p>这可以说是最经典也是最常用的方法了。基本流程是这样的：</p><ol><li>用户向服务器发送用户名、密码、验证码用于登陆系统。</li><li>服务器验证通过后，会为这个用户创建一个专属的 Session 对象（可以理解为服务器上的一块内存，存放该用户的状态数据，如购物车、登录信息等）存储起来，并给这个 Session 分配一个唯一的 <code>SessionID</code>。</li><li>服务器通过 HTTP 响应头中的 <code>Set-Cookie</code> 指令，把这个 <code>SessionID</code> 发送给用户的浏览器。</li><li>浏览器接收到 <code>SessionID</code> 后，会将其以 Cookie 的形式保存在本地。当用户保持登录状态时，每次向该服务器发请求，浏览器都会自动带上这个存有 <code>SessionID</code> 的 Cookie。</li><li>服务器收到请求后，从 Cookie 中拿出 <code>SessionID</code>，就能找到之前保存的那个 Session 对象，从而知道这是哪个用户以及他之前的状态了。</li></ol><p>使用 Session 的时候需要注意下面几个点：</p><ul><li><strong>客户端 Cookie 支持</strong>：依赖 Session 的核心功能要确保用户浏览器开启了 Cookie。</li><li><strong>Session 过期管理</strong>：合理设置 Session 的过期时间，平衡安全性和用户体验。</li><li><strong>Session ID 安全</strong>：为包含 <code>SessionID</code> 的 Cookie 设置 <code>HttpOnly</code> 标志可以防止客户端脚本（如 JavaScript）窃取，设置 Secure 标志可以保证 <code>SessionID</code> 只在 HTTPS 连接下传输，增加安全性。</li></ul><p>Session 数据本身存储在服务器端。常见的存储方式有：</p><ul><li><strong>服务器内存</strong>:实现简单，访问速度快，但服务器重启数据会丢失，且不利于多服务器间的负载均衡。这种方式适合简单且用户量不大的业务场景。</li><li><strong>数据库 (如 MySQL, PostgreSQL)</strong>:数据持久化，但读写性能相对较低，一般不会使用这种方式。</li><li><strong>分布式缓存 (如 Redis)</strong>:性能高，支持分布式部署，是目前大规模应用中非常主流的方案。</li></ul><p><strong>方案二：当 Cookie 被禁用时：URL 重写 (URL Rewriting)</strong></p><p>如果用户的浏览器禁用了 Cookie，或者某些情况下不便使用 Cookie，还有一种备选方案是 URL 重写。这种方式会将 <code>SessionID</code> 直接附加到 URL 的末尾，作为参数传递。例如：<a href="http://www.example.com/page?sessionid=xxxxxx" target="_blank" rel="noopener noreferrer">http://www.example.com/page?sessionid=xxxxxx</a>。服务器端会解析 URL 中的 <code>sessionid</code> 参数来获取 <code>SessionID</code>，进而找到对应的 Session 数据。</p><p>这种方法一般不会使用，存在以下缺点：</p><ul><li>URL 会变长且不美观；</li><li><code>SessionID</code> 暴露在 URL 中，安全性较低（容易被复制、分享或记录在日志中）；</li><li>对搜索引擎优化 (SEO) 可能不友好。</li></ul><p><strong>方案三：Token-based 认证 (如 JWT - JSON Web Tokens)</strong></p><p>这是一种越来越流行的无状态认证方式，尤其适用于前后端分离的架构和微服务。</p><p><img src="https://oss.javaguide.cn/github/javaguide/system-design/jwt/jwt-authentication process.png" alt=" JWT 身份验证示意图"></p><p>以 JWT 为例（普通 Token 方案也可以），简化后的步骤如下</p><ol><li>用户向服务器发送用户名、密码以及验证码用于登陆系统；</li><li>如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT；</li><li>客户端收到 Token 后自己保存起来（比如浏览器的 <code>localStorage</code> ）；</li><li>用户以后每次向后端发请求都在 Header 中带上这个 JWT ；</li><li>服务端检查 JWT 并从中获取用户相关信息。</li></ol><p>JWT 详细介绍可以查看这两篇文章：</p><ul><li><a href="https://javaguide.cn/system-design/security/jwt-intro.html" target="_blank" rel="noopener noreferrer">JWT 基础概念详解</a></li><li><a href="https://javaguide.cn/system-design/security/advantages-and-disadvantages-of-jwt.html" target="_blank" rel="noopener noreferrer">JWT 身份认证优缺点分析</a></li></ul><p>总结来说，虽然 HTTP 本身是无状态的，但通过 Cookie + Session、URL 重写或 Token 等机制，我们能够有效地在 Web 应用中跟踪和管理用户状态。其中，<strong>Cookie + Session 是最传统也最广泛使用的方式，而 Token-based 认证则在现代 Web 应用中越来越受欢迎。</strong></p><h3 id="uri-和-url-的区别是什么" tabindex="-1"><a class="header-anchor" href="#uri-和-url-的区别是什么"><span>URI 和 URL 的区别是什么?</span></a></h3><ul><li>URI(Uniform Resource Identifier) 是统一资源标志符，可以唯一标识一个资源。</li><li>URL(Uniform Resource Locator) 是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</li></ul><p>URI 的作用像身份证号一样，URL 的作用更像家庭住址一样。URL 是一种具体的 URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。</p><h3 id="cookie-和-session-有什么区别" tabindex="-1"><a class="header-anchor" href="#cookie-和-session-有什么区别"><span>Cookie 和 Session 有什么区别？</span></a></h3>',50)),s("p",null,[t[28]||(t[28]=e("准确点来说，这个问题属于认证授权的范畴，你可以在 ")),l(i,{to:"/system-design/security/basis-of-authority-certification.html"},{default:n(()=>t[27]||(t[27]=[e("认证授权基础概念详解")])),_:1}),t[29]||(t[29]=e(" 这篇文章中找到详细的答案。"))]),t[42]||(t[42]=a(`<h3 id="get-和-post-的区别" tabindex="-1"><a class="header-anchor" href="#get-和-post-的区别"><span>GET 和 POST 的区别</span></a></h3><p>这个问题在知乎上被讨论的挺火热的，地址：<a href="https://www.zhihu.com/question/28586791" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/28586791</a> 。</p><p><img src="https://static001.geekbang.org/infoq/04/0454a5fff1437c32754f1dfcc3881148.png" alt=""></p><p>GET 和 POST 是 HTTP 协议中两种常用的请求方法，它们在不同的场景和目的下有不同的特点和用法。一般来说，可以从以下几个方面来区分二者（重点搞清两者在语义上的区别即可）：</p><ul><li>语义（主要区别）：GET 通常用于获取或查询资源，而 POST 通常用于创建或修改资源。</li><li>幂等：GET 请求是幂等的，即多次重复执行不会改变资源的状态，而 POST 请求是不幂等的，即每次执行可能会产生不同的结果或影响资源的状态。</li><li>格式：GET 请求的参数通常放在 URL 中，形成查询字符串（querystring），而 POST 请求的参数通常放在请求体（body）中，可以有多种编码格式，如 application/x-www-form-urlencoded、multipart/form-data、application/json 等。GET 请求的 URL 长度受到浏览器和服务器的限制，而 POST 请求的 body 大小则没有明确的限制。不过，实际上 GET 请求也可以用 body 传输数据，只是并不推荐这样做，因为这样可能会导致一些兼容性或者语义上的问题。</li><li>缓存：由于 GET 请求是幂等的，它可以被浏览器或其他中间节点（如代理、网关）缓存起来，以提高性能和效率。而 POST 请求则不适合被缓存，因为它可能有副作用，每次执行可能需要实时的响应。</li><li>安全性：GET 请求和 POST 请求如果使用 HTTP 协议的话，那都不安全，因为 HTTP 协议本身是明文传输的，必须使用 HTTPS 协议来加密传输数据。另外，GET 请求相比 POST 请求更容易泄露敏感数据，因为 GET 请求的参数通常放在 URL 中。</li></ul><p>再次提示，重点搞清两者在语义上的区别即可，实际使用过程中，也是通过语义来区分使用 GET 还是 POST。不过，也有一些项目所有的请求都用 POST，这个并不是固定的，项目组达成共识即可。</p><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h2><h3 id="什么是-websocket" tabindex="-1"><a class="header-anchor" href="#什么是-websocket"><span>什么是 WebSocket?</span></a></h3><p>WebSocket 是一种基于 TCP 连接的全双工通信协议，即客户端和服务器可以同时发送和接收数据。</p><p>WebSocket 协议在 2008 年诞生，2011 年成为国际标准，几乎所有主流较新版本的浏览器都支持该协议。不过，WebSocket 不只能在基于浏览器的应用程序中使用，很多编程语言、框架和服务器都提供了 WebSocket 支持。</p><p>WebSocket 协议本质上是应用层的协议，用于弥补 HTTP 协议在持久通信能力上的不足。客户端和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png" alt="Websocket 示意图"></p><p>下面是 WebSocket 的常见应用场景：</p><ul><li>视频弹幕</li><li>实时消息推送，详见<a href="https://javaguide.cn/system-design/web-real-time-message-push.html" target="_blank" rel="noopener noreferrer">Web 实时消息推送详解</a>这篇文章</li><li>实时游戏对战</li><li>多用户协同编辑</li><li>社交聊天</li><li>……</li></ul><h3 id="websocket-和-http-有什么区别" tabindex="-1"><a class="header-anchor" href="#websocket-和-http-有什么区别"><span>WebSocket 和 HTTP 有什么区别？</span></a></h3><p>WebSocket 和 HTTP 两者都是基于 TCP 的应用层协议，都可以在网络中传输数据。</p><p>下面是二者的主要区别：</p><ul><li>WebSocket 是一种双向实时通信协议，而 HTTP 是一种单向通信协议。并且，HTTP 协议下的通信只能由客户端发起，服务器无法主动通知客户端。</li><li>WebSocket 使用 ws:// 或 wss://（使用 SSL/TLS 加密后的协议，类似于 HTTP 和 HTTPS 的关系） 作为协议前缀，HTTP 使用 http:// 或 https:// 作为协议前缀。</li><li>WebSocket 可以支持扩展，用户可以扩展协议，实现部分自定义的子协议，如支持压缩、加密等。</li><li>WebSocket 通信数据格式比较轻量，用于协议控制的数据包头部相对较小，网络开销小，而 HTTP 通信每次都要携带完整的头部，网络开销较大（HTTP/2.0 使用二进制帧进行数据传输，还支持头部压缩，减少了网络开销）。</li></ul><h3 id="websocket-的工作过程是什么样的" tabindex="-1"><a class="header-anchor" href="#websocket-的工作过程是什么样的"><span>WebSocket 的工作过程是什么样的？</span></a></h3><p>WebSocket 的工作过程可以分为以下几个步骤：</p><ol><li>客户端向服务器发送一个 HTTP 请求，请求头中包含 <code>Upgrade: websocket</code> 和 <code>Sec-WebSocket-Key</code> 等字段，表示要求升级协议为 WebSocket；</li><li>服务器收到这个请求后，会进行升级协议的操作，如果支持 WebSocket，它将回复一个 HTTP 101 状态码，响应头中包含 ，<code>Connection: Upgrade</code>和 <code>Sec-WebSocket-Accept: xxx</code> 等字段、表示成功升级到 WebSocket 协议。</li><li>客户端和服务器之间建立了一个 WebSocket 连接，可以进行双向的数据传输。数据以帧（frames）的形式进行传送，WebSocket 的每条消息可能会被切分成多个数据帧（最小单位）。发送端会将消息切割成多个帧发送给接收端，接收端接收消息帧，并将关联的帧重新组装成完整的消息。</li><li>客户端或服务器可以主动发送一个关闭帧，表示要断开连接。另一方收到后，也会回复一个关闭帧，然后双方关闭 TCP 连接。</li></ol><p>另外，建立 WebSocket 连接之后，通过心跳机制来保持 WebSocket 连接的稳定性和活跃性。</p><h3 id="websocket-与短轮询、长轮询的区别" tabindex="-1"><a class="header-anchor" href="#websocket-与短轮询、长轮询的区别"><span>WebSocket 与短轮询、长轮询的区别</span></a></h3><p>这三种方式，都是为了解决“<strong>客户端如何及时获取服务器最新数据，实现实时更新</strong>”的问题。它们的实现方式和效率、实时性差异较大。</p><p><strong>1.短轮询（Short Polling）</strong></p><ul><li><strong>原理</strong>：客户端每隔固定时间（如 5 秒）发起一次 HTTP 请求，询问服务器是否有新数据。服务器收到请求后立即响应。</li><li><strong>优点</strong>：实现简单，兼容性好，直接用常规 HTTP 请求即可。</li><li><strong>缺点</strong>： <ul><li><strong>实时性一般</strong>：消息可能在两次轮询间到达，用户需等到下次请求才知晓。</li><li><strong>资源浪费大</strong>：反复建立/关闭连接，且大多数请求收到的都是“无新消息”，极大增加服务器和网络压力。</li></ul></li></ul><p><strong>2.长轮询（Long Polling）</strong></p><ul><li><strong>原理</strong>：客户端发起请求后，若服务器暂时无新数据，则会保持连接，直到有新数据或超时才响应。客户端收到响应后立即发起下一次请求，实现“伪实时”。</li><li><strong>优点</strong>： <ul><li><strong>实时性较好</strong>：一旦有新数据可立即推送，无需等待下次定时请求。</li><li><strong>空响应减少</strong>：减少了无效的空响应，提升了效率。</li></ul></li><li><strong>缺点</strong>： <ul><li><strong>服务器资源占用高</strong>：需长时间维护大量连接，消耗服务器线程/连接数。</li><li><strong>资源浪费大</strong>：每次响应后仍需重新建立连接，且依然基于 HTTP 单向请求-响应机制。</li></ul></li></ul><p><strong>3. WebSocket</strong></p><ul><li><strong>原理</strong>：客户端与服务器通过一次 HTTP Upgrade 握手后，建立一条持久的 TCP 连接。之后，双方可以随时、主动地发送数据，实现真正的全双工、低延迟通信。</li><li><strong>优点</strong>： <ul><li><strong>实时性强</strong>：数据可即时双向收发，延迟极低。</li><li><strong>资源效率高</strong>：连接持续，无需反复建立/关闭，减少资源消耗。</li><li><strong>功能强大</strong>：支持服务端主动推送消息、客户端主动发起通信。</li></ul></li><li><strong>缺点</strong>： <ul><li><strong>使用限制</strong>：需要服务器和客户端都支持 WebSocket 协议。对连接管理有一定要求（如心跳保活、断线重连等）。</li><li><strong>实现麻烦</strong>：实现起来比短轮询和长轮询要更麻烦一些。</li></ul></li></ul><p><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png" alt="Websocket 示意图"></p><h3 id="sse-与-websocket-有什么区别" tabindex="-1"><a class="header-anchor" href="#sse-与-websocket-有什么区别"><span>SSE 与 WebSocket 有什么区别？</span></a></h3><p>SSE (Server-Sent Events) 和 WebSocket 都是用来实现服务器向浏览器实时推送消息的技术，让网页内容能自动更新，而不需要用户手动刷新。虽然目标相似，但它们在工作方式和适用场景上有几个关键区别：</p><ol><li><strong>通信方式:</strong><ul><li><strong>SSE:</strong> <strong>单向通信</strong>。只有服务器能向客户端（浏览器）发送数据。客户端不能通过同一个连接向服务器发送数据（需要发起新的 HTTP 请求）。</li><li><strong>WebSocket:</strong> <strong>双向通信 (全双工)</strong>。客户端和服务器可以随时互相发送消息，实现真正的实时交互。</li></ul></li><li><strong>底层协议:</strong><ul><li><strong>SSE:</strong> 基于<strong>标准的 HTTP/HTTPS 协议</strong>。它本质上是一个“长连接”的 HTTP 请求，服务器保持连接打开并持续发送事件流。不需要特殊的服务器或协议支持，现有的 HTTP 基础设施就能用。</li><li><strong>WebSocket:</strong> 使用<strong>独立的 ws:// 或 wss:// 协议</strong>。它需要通过一个特定的 HTTP &quot;Upgrade&quot; 请求来建立连接，并且服务器需要明确支持 WebSocket 协议来处理连接和消息帧。</li></ul></li><li><strong>实现复杂度和成本:</strong><ul><li><strong>SSE:</strong> <strong>实现相对简单</strong>，主要在服务器端处理。浏览器端有标准的 EventSource API，使用方便。开发和维护成本较低。</li><li><strong>WebSocket:</strong> <strong>稍微复杂一些</strong>。需要服务器端专门处理 WebSocket 连接和协议，客户端也需要使用 WebSocket API。如果需要考虑兼容性、心跳、重连等，开发成本会更高。</li></ul></li><li><strong>断线重连:</strong><ul><li><strong>SSE:</strong> <strong>浏览器原生支持</strong>。EventSource API 提供了自动断线重连的机制。</li><li><strong>WebSocket:</strong> <strong>需要手动实现</strong>。开发者需要自己编写逻辑来检测断线并进行重连尝试。</li></ul></li><li><strong>数据类型:</strong><ul><li><strong>SSE:</strong> <strong>主要设计用来传输文本</strong> (UTF-8 编码)。如果需要传输二进制数据，需要先进行 Base64 等编码转换成文本。</li><li><strong>WebSocket:</strong> <strong>原生支持传输文本和二进制数据</strong>，无需额外编码。</li></ul></li></ol><p>为了提供更好的用户体验和利用其简单、高效、基于标准 HTTP 的特性，<strong>Server-Sent Events (SSE) 是目前大型语言模型 API（如 OpenAI、DeepSeek 等）实现流式响应的常用甚至可以说是标准的技木选择</strong>。</p><p>这里以 DeepSeek 为例，我们发送一个请求并打开浏览器控制台验证一下：</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/deepseek-sse.png" alt=""></p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/deepseek-sse-eventstream.png" alt=""></p><p>可以看到，响应头应里包含了 <code>text/event-stream</code>，说明使用的确实是SSE。并且，响应数据也确实是持续分块传输。</p><h2 id="ping" tabindex="-1"><a class="header-anchor" href="#ping"><span>PING</span></a></h2><h3 id="ping-命令的作用是什么" tabindex="-1"><a class="header-anchor" href="#ping-命令的作用是什么"><span>PING 命令的作用是什么？</span></a></h3><p>PING 命令是一种常用的网络诊断工具，经常用来测试网络中主机之间的连通性和网络延迟。</p><p>这里简单举一个例子，我们来 PING 一下百度。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 发送4个PING请求数据包到 www.baidu.com</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">❯</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ping</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.baidu.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PING</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.a.shifen.com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (14.119.104.189): 56 data bytes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14.119.104.189:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">54</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">27.867</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14.119.104.189:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">54</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">28.732</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14.119.104.189:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">54</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">27.571</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14.119.104.189:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">54</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">27.581</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ms</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.a.shifen.com</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ping</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> statistics</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ---</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> packets</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> transmitted,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> packets</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> received,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0.0%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> packet</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> loss</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">round-trip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> min/avg/max/stddev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 27.571/27.938/28.732/0.474</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PING 命令的输出结果通常包括以下几部分信息：</p><ol><li><strong>ICMP Echo Request（请求报文）信息</strong>：序列号、TTL（Time to Live）值。</li><li><strong>目标主机的域名或 IP 地址</strong>：输出结果的第一行。</li><li><strong>往返时间（RTT，Round-Trip Time）</strong>：从发送 ICMP Echo Request（请求报文）到接收到 ICMP Echo Reply（响应报文）的总时间，用来衡量网络连接的延迟。</li><li><strong>统计结果（Statistics）</strong>：包括发送的 ICMP 请求数据包数量、接收到的 ICMP 响应数据包数量、丢包率、往返时间（RTT）的最小、平均、最大和标准偏差值。</li></ol><p>如果 PING 对应的目标主机无法得到正确的响应，则表明这两个主机之间的连通性存在问题（有些主机或网络管理员可能禁用了对 ICMP 请求的回复，这样也会导致无法得到正确的响应）。如果往返时间（RTT）过高，则表明网络延迟过高。</p><h3 id="ping-命令的工作原理是什么" tabindex="-1"><a class="header-anchor" href="#ping-命令的工作原理是什么"><span>PING 命令的工作原理是什么？</span></a></h3><p>PING 基于网络层的 <strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>，其主要原理就是通过在网络上发送和接收 ICMP 报文实现的。</p><p>ICMP 报文中包含了类型字段，用于标识 ICMP 报文类型。ICMP 报文的类型有很多种，但大致可以分为两类：</p><ul><li><strong>查询报文类型</strong>：向目标主机发送请求并期望得到响应。</li><li><strong>差错报文类型</strong>：向源主机发送错误信息，用于报告网络中的错误情况。</li></ul><p>PING 用到的 ICMP Echo Request（类型为 8 ） 和 ICMP Echo Reply（类型为 0） 属于查询报文类型 。</p><ul><li>PING 命令会向目标主机发送 ICMP Echo Request。</li><li>如果两个主机的连通性正常，目标主机会返回一个对应的 ICMP Echo Reply。</li></ul><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>DNS</span></a></h2><h3 id="dns-的作用是什么" tabindex="-1"><a class="header-anchor" href="#dns-的作用是什么"><span>DNS 的作用是什么？</span></a></h3><p>DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是<strong>域名和 IP 地址的映射问题</strong>。</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png" alt="DNS:域名系统"></p><p>在一台电脑上，可能存在浏览器 DNS 缓存，操作系统 DNS 缓存，路由器 DNS 缓存。如果以上缓存都查询不到，那么 DNS 就闪亮登场了。</p><p>目前 DNS 的设计采用的是分布式、层次数据库结构，<strong>DNS 是应用层协议，它可以在 UDP 或 TCP 协议之上运行，端口为 53</strong> 。</p><h3 id="dns-服务器有哪些-根服务器有多少个" tabindex="-1"><a class="header-anchor" href="#dns-服务器有哪些-根服务器有多少个"><span>DNS 服务器有哪些？根服务器有多少个？</span></a></h3><p>DNS 服务器自底向上可以依次分为以下几个层级(所有 DNS 服务器都属于以下四个类别之一):</p><ul><li>根 DNS 服务器。根 DNS 服务器提供 TLD 服务器的 IP 地址。目前世界上只有 13 组根服务器，我国境内目前仍没有根服务器。</li><li>顶级域 DNS 服务器（TLD 服务器）。顶级域是指域名的后缀，如<code>com</code>、<code>org</code>、<code>net</code>和<code>edu</code>等。国家也有自己的顶级域，如<code>uk</code>、<code>fr</code>和<code>ca</code>。TLD 服务器提供了权威 DNS 服务器的 IP 地址。</li><li>权威 DNS 服务器。在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。</li><li>本地 DNS 服务器。每个 ISP（互联网服务提供商）都有一个自己的本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，它起着代理的作用，并将该请求转发到 DNS 层次结构中。严格说来，不属于 DNS 层级结构</li></ul><p>世界上并不是只有 13 台根服务器，这是很多人普遍的误解，网上很多文章也是这么写的。实际上，现在根服务器数量远远超过这个数量。最初确实是为 DNS 根服务器分配了 13 个 IP 地址，每个 IP 地址对应一个不同的根 DNS 服务器。然而，由于互联网的快速发展和增长，这个原始的架构变得不太适应当前的需求。为了提高 DNS 的可靠性、安全性和性能，目前这 13 个 IP 地址中的每一个都有多个服务器，截止到 2023 年底，所有根服务器之和达到了 1700 多台，未来还会继续增加。</p><h3 id="dns-解析的过程是什么样的" tabindex="-1"><a class="header-anchor" href="#dns-解析的过程是什么样的"><span>DNS 解析的过程是什么样的？</span></a></h3>`,64)),s("p",null,[t[31]||(t[31]=e("整个过程的步骤比较多，我单独写了一篇文章详细介绍：")),l(i,{to:"/cs-basics/network/dns.html"},{default:n(()=>t[30]||(t[30]=[e("DNS 域名系统详解（应用层）")])),_:1}),t[32]||(t[32]=e(" 。"))]),t[43]||(t[43]=a('<h3 id="dns-劫持了解吗-如何应对" tabindex="-1"><a class="header-anchor" href="#dns-劫持了解吗-如何应对"><span>DNS 劫持了解吗？如何应对？</span></a></h3><p>DNS 劫持是一种网络攻击，它通过修改 DNS 服务器的解析结果，使用户访问的域名指向错误的 IP 地址，从而导致用户无法访问正常的网站，或者被引导到恶意的网站。DNS 劫持有时也被称为 DNS 重定向、DNS 欺骗或 DNS 污染。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li>《图解 HTTP》</li><li>《计算机网络自顶向下方法》（第七版）</li><li>详解 HTTP/2.0 及 HTTPS 协议：<a href="https://juejin.cn/post/7034668672262242318" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7034668672262242318</a></li><li>HTTP 请求头字段大全| HTTP Request Headers：<a href="https://www.flysnow.org/tools/table/http-request-headers/" target="_blank" rel="noopener noreferrer">https://www.flysnow.org/tools/table/http-request-headers/</a></li><li>HTTP1、HTTP2、HTTP3：<a href="https://juejin.cn/post/6855470356657307662" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6855470356657307662</a></li><li>如何看待 HTTP/3 ？ - 车小胖的回答 - 知乎: <a href="https://www.zhihu.com/question/302412059/answer/533223530" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/302412059/answer/533223530</a></li></ul><p><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号"></p>',5))])}const f=r(h,[["render",c],["__file","other-network-questions.html.vue"]]),S=JSON.parse('{"path":"/cs-basics/network/other-network-questions.html","title":"计算机网络常见面试题总结(上)","lang":"zh-CN","frontmatter":{"title":"计算机网络常见面试题总结(上)","category":"计算机基础","tag":["计算机网络"],"description":"这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 上篇主要是计算机网络基础和应用层相关的内容。 计算机网络基础 网络分层模型 OSI 七层模型是什么？每一层...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/cs-basics/network/other-network-questions.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"计算机网络常见面试题总结(上)"}],["meta",{"property":"og:description","content":"这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版： (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。 知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 。 上篇主要是计算机网络基础和应用层相关的内容。 计算机网络基础 网络分层模型 OSI 七层模型是什么？每一层..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T03:45:21.000Z"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:modified_time","content":"2025-06-22T03:45:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机网络常见面试题总结(上)\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png\\",\\"https://oss.javaguide.cn/github/javaguide/osi七层模型2.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/application-layer-protocol.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/transport-layer-protocol.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-vs-https.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http1.0-vs-http1.1.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http1.1-vs-http2.0.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http2.0-multiplexing.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http2.0-vs-http3.0.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-3-implementation.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/http2-and-http3-stacks-comparison.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/security/session-cookie-authentication-process.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/jwt/jwt-authentication%20process.png\\",\\"https://static001.geekbang.org/infoq/04/0454a5fff1437c32754f1dfcc3881148.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/deepseek-sse.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/deepseek-sse-eventstream.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png\\"],\\"dateModified\\":\\"2025-06-22T03:45:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"计算机网络基础","slug":"计算机网络基础","link":"#计算机网络基础","children":[{"level":3,"title":"网络分层模型","slug":"网络分层模型","link":"#网络分层模型","children":[]},{"level":3,"title":"常见网络协议","slug":"常见网络协议","link":"#常见网络协议","children":[]}]},{"level":2,"title":"HTTP","slug":"http","link":"#http","children":[{"level":3,"title":"从输入 URL 到页面展示到底发生了什么？（非常重要）","slug":"从输入-url-到页面展示到底发生了什么-非常重要","link":"#从输入-url-到页面展示到底发生了什么-非常重要","children":[]},{"level":3,"title":"HTTP 状态码有哪些？","slug":"http-状态码有哪些","link":"#http-状态码有哪些","children":[]},{"level":3,"title":"HTTP Header 中常见的字段有哪些？","slug":"http-header-中常见的字段有哪些","link":"#http-header-中常见的字段有哪些","children":[]},{"level":3,"title":"HTTP 和 HTTPS 有什么区别？（重要）","slug":"http-和-https-有什么区别-重要","link":"#http-和-https-有什么区别-重要","children":[]},{"level":3,"title":"HTTP/1.0 和 HTTP/1.1 有什么区别？","slug":"http-1-0-和-http-1-1-有什么区别","link":"#http-1-0-和-http-1-1-有什么区别","children":[]},{"level":3,"title":"HTTP/1.1 和 HTTP/2.0 有什么区别？","slug":"http-1-1-和-http-2-0-有什么区别","link":"#http-1-1-和-http-2-0-有什么区别","children":[]},{"level":3,"title":"HTTP/2.0 和 HTTP/3.0 有什么区别？","slug":"http-2-0-和-http-3-0-有什么区别","link":"#http-2-0-和-http-3-0-有什么区别","children":[]},{"level":3,"title":"HTTP/1.1 和 HTTP/2.0 的队头阻塞有什么不同？","slug":"http-1-1-和-http-2-0-的队头阻塞有什么不同","link":"#http-1-1-和-http-2-0-的队头阻塞有什么不同","children":[]},{"level":3,"title":"HTTP 是不保存状态的协议, 如何保存用户状态?","slug":"http-是不保存状态的协议-如何保存用户状态","link":"#http-是不保存状态的协议-如何保存用户状态","children":[]},{"level":3,"title":"URI 和 URL 的区别是什么?","slug":"uri-和-url-的区别是什么","link":"#uri-和-url-的区别是什么","children":[]},{"level":3,"title":"Cookie 和 Session 有什么区别？","slug":"cookie-和-session-有什么区别","link":"#cookie-和-session-有什么区别","children":[]},{"level":3,"title":"GET 和 POST 的区别","slug":"get-和-post-的区别","link":"#get-和-post-的区别","children":[]}]},{"level":2,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[{"level":3,"title":"什么是 WebSocket?","slug":"什么是-websocket","link":"#什么是-websocket","children":[]},{"level":3,"title":"WebSocket 和 HTTP 有什么区别？","slug":"websocket-和-http-有什么区别","link":"#websocket-和-http-有什么区别","children":[]},{"level":3,"title":"WebSocket 的工作过程是什么样的？","slug":"websocket-的工作过程是什么样的","link":"#websocket-的工作过程是什么样的","children":[]},{"level":3,"title":"WebSocket 与短轮询、长轮询的区别","slug":"websocket-与短轮询、长轮询的区别","link":"#websocket-与短轮询、长轮询的区别","children":[]},{"level":3,"title":"SSE 与 WebSocket 有什么区别？","slug":"sse-与-websocket-有什么区别","link":"#sse-与-websocket-有什么区别","children":[]}]},{"level":2,"title":"PING","slug":"ping","link":"#ping","children":[{"level":3,"title":"PING 命令的作用是什么？","slug":"ping-命令的作用是什么","link":"#ping-命令的作用是什么","children":[]},{"level":3,"title":"PING 命令的工作原理是什么？","slug":"ping-命令的工作原理是什么","link":"#ping-命令的工作原理是什么","children":[]}]},{"level":2,"title":"DNS","slug":"dns","link":"#dns","children":[{"level":3,"title":"DNS 的作用是什么？","slug":"dns-的作用是什么","link":"#dns-的作用是什么","children":[]},{"level":3,"title":"DNS 服务器有哪些？根服务器有多少个？","slug":"dns-服务器有哪些-根服务器有多少个","link":"#dns-服务器有哪些-根服务器有多少个","children":[]},{"level":3,"title":"DNS 解析的过程是什么样的？","slug":"dns-解析的过程是什么样的","link":"#dns-解析的过程是什么样的","children":[]},{"level":3,"title":"DNS 劫持了解吗？如何应对？","slug":"dns-劫持了解吗-如何应对","link":"#dns-劫持了解吗-如何应对","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1750563921000,"updatedTime":1750563921000,"contributors":[{"name":"DanlionYou","username":"DanlionYou","email":"3184877618.com","commits":1,"url":"https://github.com/DanlionYou"}]},"readingTime":{"minutes":40.93,"words":12280},"filePathRelative":"cs-basics/network/other-network-questions.md","localizedDate":"2025年6月22日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">这是一则或许对你有用的小广告</p>\\n<ul>\\n<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href=\\"/zhuanlan/java-mian-shi-zhi-bei.html\\" target=\\"_blank\\">《Java 面试指北 》</a></strong> (质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。</li>\\n<li><strong>知识星球</strong>：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 <strong><a href=\\"/about-the-author/zhishixingqiu-two-years.html\\" target=\\"_blank\\">JavaGuide 官方知识星球</a></strong>。</li>\\n</ul>\\n</div>","autoDesc":true}');export{f as comp,S as data};
