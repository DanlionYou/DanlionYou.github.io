import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as t}from"./app-DIPkjwKa.js";const n="/assets/%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0-BhVyMqLd.png",l={};function r(h,i){return t(),e("div",null,i[0]||(i[0]=[a('<blockquote><p>本文由 JavaGuide 翻译自 <a href="https://www.baeldung.com/jvm-parameters" target="_blank" rel="noopener noreferrer">https://www.baeldung.com/jvm-parameters</a>，并对文章进行了大量的完善补充。<br> 文档参数 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p><p>JDK 版本：1.8 为主，也会补充新版本常用参数</p></blockquote><p>在本篇文章中，我们将一起掌握 Java 虚拟机（JVM）中最常用的一些参数配置，帮助你更好地理解和调优 Java 应用的运行环境。</p><h2 id="堆内存相关" tabindex="-1"><a class="header-anchor" href="#堆内存相关"><span>堆内存相关</span></a></h2><blockquote><p>Java 堆（Java Heap）是 JVM 所管理的内存中最大的一块区域，<strong>所有线程共享</strong>，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都要在堆上分配内存。</strong></p></blockquote><p><img src="'+n+`" alt="内存区域常见配置参数"></p><h3 id="设置堆内存大小-xms-和-xmx" tabindex="-1"><a class="header-anchor" href="#设置堆内存大小-xms-和-xmx"><span>设置堆内存大小 (-Xms 和 -Xmx)</span></a></h3><p>根据应用程序的实际需求设置初始和最大堆内存大小，是性能调优中最常见的实践之一。<strong>推荐显式设置这两个参数，并且通常建议将它们设置为相同的值</strong>，以避免运行时堆内存的动态调整带来的性能开销。</p><p>使用以下参数进行设置：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;heap </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">siz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[unit]</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 设置 JVM 初始堆大小</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xmx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;heap </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">siz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[unit]</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 设置 JVM 最大堆大小</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&lt;heap size&gt;</code>: 指定内存的具体数值。</li><li><code>[unit]</code>: 指定内存的单位，如 g (GB)、m (MB)、k (KB)。</li></ul><p><strong>示例：</strong> 将 JVM 的初始堆和最大堆都设置为 4GB：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xms4G</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx4G</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="设置新生代内存大小-young-generation" tabindex="-1"><a class="header-anchor" href="#设置新生代内存大小-young-generation"><span>设置新生代内存大小 (Young Generation)</span></a></h3><p>根据<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html" target="_blank" rel="noopener noreferrer">Oracle 官方文档</a>，在堆总可用内存配置完成之后，第二大影响因素是为 <code>Young Generation</code> 在堆内存所占的比例。默认情况下，YG 的最小大小为 <strong>1310 MB</strong>，最大大小为 <strong>无限制</strong>。</p><p>可以通过以下两种方式设置新生代内存大小：</p><p><strong>1.通过<code>-XX:NewSize</code>和<code>-XX:MaxNewSize</code>指定</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:NewSize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;young </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">siz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[unit]</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 设置新生代初始大小</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:MaxNewSize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;young </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">siz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[unit]</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 设置新生代最大大小</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong> 设置新生代最小 512MB，最大 1024MB：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:NewSize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=512m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MaxNewSize=1024m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2.通过<code>-Xmn&lt;young size&gt;[unit]</code>指定</strong></p><p><strong>示例：</strong> 将新生代大小固定为 512MB：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xmn512m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>GC 调优策略中很重要的一条经验总结是这样说的：</p><blockquote><p>尽量让新创建的对象在新生代分配内存并被回收，因为 Minor GC 的成本通常远低于 Full GC。通过分析 GC 日志，判断新生代空间分配是否合理。如果大量新对象过早进入老年代（Promotion），可以适当通过 <code>-Xmn</code> 或 -<code>XX:NewSize/-XX:MaxNewSize</code> 调整新生代大小，目标是最大限度地减少对象直接进入老年代的情况。</p></blockquote><p>另外，你还可以通过 <strong><code>-XX:NewRatio=&lt;int&gt;</code></strong> 参数来设置<strong>老年代与新生代（不含 Survivor 区）的内存大小比例</strong>。</p><p>例如，<code>-XX:NewRatio=2</code> （默认值）表示老年代 : 新生代 = 2 : 1。即新生代占整个堆大小的 1/3。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:NewRatio</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="设置永久代-元空间大小-permgen-metaspace" tabindex="-1"><a class="header-anchor" href="#设置永久代-元空间大小-permgen-metaspace"><span>设置永久代/元空间大小 (PermGen/Metaspace)</span></a></h3><p><strong>从 Java 8 开始，如果我们没有指定 Metaspace 的大小，随着更多类的创建，虚拟机会耗尽所有可用的系统内存（永久代并不会出现这种情况）。</strong></p><p>JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:PermSize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=N</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #方法区 (永久代) 初始大小</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:MaxPermSize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=N</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</p><p><strong>JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。</strong></p><p>下面是一些常用参数：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:MetaspaceSize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=N</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #设置 Metaspace 的初始大小（是一个常见的误区，后面会解释）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:MaxMetaspaceSize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=N</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #设置 Metaspace 的最大大小</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>🐛 修正（参见：<a href="https://github.com/Snailclimb/JavaGuide/issues/1947" target="_blank" rel="noopener noreferrer">issue#1947</a>）</strong>：</p><p><strong>1、<code>-XX:MetaspaceSize</code> 并非初始容量：</strong> Metaspace 的初始容量并不是 <code>-XX:MetaspaceSize</code> 设置，无论 <code>-XX:MetaspaceSize</code> 配置什么值，对于 64 位 JVM，元空间的初始容量通常是一个固定的较小值（Oracle 文档提到约 12MB 到 20MB 之间，实际观察约 20.8MB）。</p><p>可以参考 Oracle 官方文档 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/considerations.html" target="_blank" rel="noopener noreferrer">Other Considerations</a> 中提到的：</p><blockquote><p>Specify a higher value for the option MetaspaceSize to avoid early garbage collections induced for class metadata. The amount of class metadata allocated for an application is application-dependent and general guidelines do not exist for the selection of MetaspaceSize. The default size of MetaspaceSize is platform-dependent and ranges from 12 MB to about 20 MB.</p><p>MetaspaceSize 的默认大小取决于平台，范围从 12 MB 到大约 20 MB。</p></blockquote><p>另外，还可以看一下这个试验：<a href="https://mp.weixin.qq.com/s/jqfppqqd98DfAJHZhFbmxA" target="_blank" rel="noopener noreferrer">JVM 参数 MetaspaceSize 的误解</a>。</p><p><strong>2、扩容与 Full GC：</strong> 当 Metaspace 的使用量增长并首次达到<code>-XX:MetaspaceSize</code> 指定的阈值时，会触发一次 Full GC。在此之后，JVM 会动态调整这个触发 GC 的阈值。如果元空间继续增长，每次达到新的阈值需要扩容时，仍然可能触发 Full GC（具体行为与垃圾收集器和版本有关）。垃圾搜集器内部是根据变量 <code>_capacity_until_GC</code>来判断 Metaspace 区域是否达到阈值的，初始化代码如下所示：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MetaspaceGC::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">initialize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Set the high-water mark to MaxMetapaceSize during VM initialization since</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // we can&#39;t do a GC during initialization.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  _capacity_until_GC </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MaxMetaspaceSize;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、<code>-XX:MaxMetaspaceSize</code> 的重要性：<strong>如果不显式设置 -<code>XX:MaxMetaspaceSize</code>，元空间的最大大小理论上受限于可用的本地内存。在极端情况下（如类加载器泄漏导致不断加载类），这确实</strong>可能耗尽大量本地内存</strong>。因此，<strong>强烈建议设置一个合理的 <code>-XX:MaxMetaspaceSize</code> 上限</strong>，以防止对系统造成影响。</p><p>相关阅读：<a href="https://github.com/Snailclimb/JavaGuide/issues/1204" target="_blank" rel="noopener noreferrer">issue 更正：MaxMetaspaceSize 如果不指定大小的话，不会耗尽内存 #1204</a> 。</p><h2 id="垃圾收集相关" tabindex="-1"><a class="header-anchor" href="#垃圾收集相关"><span>垃圾收集相关</span></a></h2><h3 id="选择垃圾回收器" tabindex="-1"><a class="header-anchor" href="#选择垃圾回收器"><span>选择垃圾回收器</span></a></h3><p>选择合适的垃圾收集器（Garbage Collector, GC）对于应用的吞吐量和响应延迟至关重要。关于垃圾收集算法和收集器的详细介绍，可以看笔者写的这篇：<a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html" target="_blank" rel="noopener noreferrer">JVM 垃圾回收详解（重点）</a>。</p><p>JVM 提供了多种 GC 实现，适用于不同的场景：</p><ul><li><strong>Serial GC (串行垃圾收集器):</strong> 单线程执行 GC，适用于客户端模式或单核 CPU 环境。参数：<code>-XX:+UseSerialGC</code>。</li><li><strong>Parallel GC (并行垃圾收集器):</strong> 多线程执行新生代 GC (Minor GC)，以及可选的多线程执行老年代 GC (Full GC，通过 <code>-XX:+UseParallelOldGC</code>)。关注吞吐量，是 JDK 8 的默认 GC。参数：<code>-XX:+UseParallelGC</code>。</li><li><strong>CMS GC (Concurrent Mark Sweep 并发标记清除收集器):</strong> 以获取最短回收停顿时间为目标，大部分 GC 阶段可与用户线程并发执行。适用于对响应时间要求高的应用。在 JDK 9 中被标记为弃用，JDK 14 中被移除。参数：<code>-XX:+UseConcMarkSweepGC</code>。</li><li><strong>G1 GC (Garbage-First Garbage Collector):</strong> JDK 9 及之后版本的默认 GC。将堆划分为多个 Region，兼顾吞吐量和停顿时间，试图在可预测的停顿时间内完成 GC。参数：<code>-XX:+UseG1GC</code>。</li><li><strong>ZGC:</strong> 更新的低延迟 GC，目标是将 GC 停顿时间控制在几毫秒甚至亚毫秒级别，需要较新版本的 JDK 支持。参数（具体参数可能随版本变化）：<code>-XX:+UseZGC</code>、<code>-XX:+UseShenandoahGC</code>。</li></ul><h3 id="gc-日志记录" tabindex="-1"><a class="header-anchor" href="#gc-日志记录"><span>GC 日志记录</span></a></h3><p>在生产环境或进行 GC 问题排查时，<strong>务必开启 GC 日志记录</strong>。详细的 GC 日志是分析和解决 GC 问题的关键依据。</p><p>以下是一些推荐配置的 GC 日志参数（适用于 JDK 8/11 等常见版本）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --- 推荐的基础配置 ---</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印详细 GC 信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintGCDetails</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印 GC 发生的时间戳 (相对于 JVM 启动时间)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -XX:+PrintGCTimeStamps</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印 GC 发生的日期和时间 (更常用)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintGCDateStamps</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定 GC 日志文件的输出路径，%t 可以输出日期时间戳</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xloggc:/path/to/gc-%t.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --- 推荐的进阶配置 ---</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印对象年龄分布 (有助于判断对象晋升老年代的情况)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintTenuringDistribution</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在 GC 前后打印堆信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintHeapAtGC</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印各种类型引用 (强/软/弱/虚) 的处理信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintReferenceGC</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印应用暂停时间 (Stop-The-World, STW)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintGCApplicationStoppedTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --- GC 日志文件滚动配置 ---</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启用 GC 日志文件滚动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+UseGCLogFileRotation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置滚动日志文件的数量 (例如，保留最近 14 个)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:NumberOfGCLogFiles</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=14</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置每个日志文件的最大大小 (例如，50MB)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:GCLogFileSize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=50M</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --- 可选的辅助诊断配置 ---</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印安全点 (Safepoint) 统计信息 (有助于分析 STW 原因)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -XX:+PrintSafepointStatistics</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -XX:PrintSafepointStatisticsCount=1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:</strong> JDK 9 及之后版本引入了统一的 JVM 日志框架 (<code>-Xlog</code>)，配置方式有所不同，但上述 <code>-Xloggc</code> 和滚动参数通常仍然兼容或有对应的新参数。</p><h2 id="处理-oom" tabindex="-1"><a class="header-anchor" href="#处理-oom"><span>处理 OOM</span></a></h2><p>对于大型应用程序来说，面对内存不足错误是非常常见的，这反过来会导致应用程序崩溃。这是一个非常关键的场景，很难通过复制来解决这个问题。</p><p>这就是为什么 JVM 提供了一些参数，这些参数将堆内存转储到一个物理文件中，以后可以用来查找泄漏:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在发生 OOM 时生成堆转储文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+HeapDumpOnOutOfMemoryError</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定堆转储文件的输出路径。&lt;pid&gt; 会被替换为进程 ID</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:HeapDumpPath</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=/path/to/heapdump/java_pid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;pid&gt;.hprof</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 示例：-XX:HeapDumpPath=/data/dumps/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (可选) 在发生 OOM 时执行指定的命令或脚本</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 例如，发送告警通知或尝试重启服务（需谨慎使用）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -XX:OnOutOfMemoryError=&quot;&lt;command&gt; &lt;args&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 示例：-XX:OnOutOfMemoryError=&quot;sh /path/to/notify.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (可选) 启用 GC 开销限制检查</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果 GC 时间占总时间比例过高（默认 98%）且回收效果甚微（默认小于 2% 堆内存），</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 会提前抛出 OOM，防止应用长时间卡死在 GC 中。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+UseGCOverheadLimit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他常用参数" tabindex="-1"><a class="header-anchor" href="#其他常用参数"><span>其他常用参数</span></a></h2><ul><li><code>-server</code>: 明确启用 Server 模式的 HotSpot VM。（在 64 位 JVM 上通常是默认值）。</li><li><code>-XX:+UseStringDeduplication</code>: (JDK 8u20+) 尝试识别并共享底层 <code>char[]</code> 数组相同的 String 对象，以减少内存占用。适用于存在大量重复字符串的场景。</li><li><code>-XX:SurvivorRatio=&lt;ratio&gt;</code>: 设置 Eden 区与单个 Survivor 区的大小比例。例如 <code>-XX:SurvivorRatio=8</code> 表示 Eden:Survivor = 8:1。</li><li><code>-XX:MaxTenuringThreshold=&lt;threshold&gt;</code>: 设置对象从新生代晋升到老年代的最大年龄阈值（对象每经历一次 Minor GC 且存活，年龄加 1）。默认值通常是 15。</li><li><code>-XX:+DisableExplicitGC</code>: 禁止代码中显式调用 <code>System.gc()</code>。推荐开启，避免人为触发不必要的 Full GC。</li><li><code>-XX:+UseLargePages</code>: (需要操作系统支持) 尝试使用大内存页（如 2MB 而非 4KB），可能提升内存密集型应用的性能，但需谨慎测试。</li><li>-<code>XX:MinHeapFreeRatio=&lt;percent&gt; / -XX:MaxHeapFreeRatio=&lt;percent&gt;</code>: 控制 GC 后堆内存保持空闲的最小/最大百分比，用于动态调整堆大小（如果 <code>-Xms</code> 和 <code>-Xmx</code> 不相等）。通常建议将 <code>-Xms</code> 和 <code>-Xmx</code> 设为一致，避免调整开销。</li></ul><p><strong>注意：</strong> 以下参数在现代 JVM 版本中可能已<strong>弃用、移除或默认开启且无需手动设置</strong>：</p><ul><li><code>-XX:+UseLWPSynchronization</code>: 较旧的同步策略选项，现代 JVM 通常有更优化的实现。</li><li><code>-XX:LargePageSizeInBytes</code>: 通常由 <code>-XX:+UseLargePages</code> 自动确定或通过 OS 配置。</li><li><code>-XX:+UseStringCache</code>: 已被移除。</li><li><code>-XX:+UseCompressedStrings</code>: 已被 Java 9 及之后默认开启的 Compact Strings 特性取代。</li><li><code>-XX:+OptimizeStringConcat</code>: 字符串连接优化（invokedynamic）在 Java 9 及之后是默认行为。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本文为 Java 开发者提供了一份实用的 JVM 常用参数配置指南，旨在帮助读者理解和优化 Java 应用的性能与稳定性。文章重点强调了以下几个方面：</p><ol><li><strong>堆内存配置：</strong> 建议显式设置初始与最大堆内存 (<code>-Xms</code>, -<code>Xmx</code>，通常设为一致) 和新生代大小 (<code>-Xmn</code> 或 <code>-XX:NewSize/-XX:MaxNewSize</code>)，这对 GC 性能至关重要。</li><li><strong>元空间管理 (Java 8+)：</strong> 澄清了 <code>-XX:MetaspaceSize</code> 的实际作用（首次触发 Full GC 的阈值，而非初始容量），并强烈建议设置 <code>-XX:MaxMetaspaceSize</code> 以防止潜在的本地内存耗尽。</li><li>**垃圾收集器选择与日志：**介绍了不同 GC 算法的适用场景，并强调在生产和测试环境中开启详细 GC 日志 (<code>-Xloggc</code>, <code>-XX:+PrintGCDetails</code> 等) 对于问题排查的必要性。</li><li><strong>OOM 故障排查：</strong> 说明了如何通过 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 等参数在发生 OOM 时自动生成堆转储文件，以便进行后续的内存泄漏分析。</li><li><strong>其他参数：</strong> 简要介绍了如字符串去重等其他有用参数，并指出了部分旧参数的现状。</li></ol><p>具体的问题排查和调优案例，可以参考笔者整理的这篇文章：<a href="https://javaguide.cn/java/jvm/jvm-in-action.html" target="_blank" rel="noopener noreferrer">JVM 线上问题排查和性能调优案例</a>。</p><p><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号"></p>`,67)]))}const p=s(l,[["render",r],["__file","jvm-parameters-intro.html.vue"]]),c=JSON.parse('{"path":"/java/jvm/jvm-parameters-intro.html","title":"最重要的JVM参数总结","lang":"zh-CN","frontmatter":{"title":"最重要的JVM参数总结","category":"Java","tag":["JVM"],"description":"本文由 JavaGuide 翻译自 https://www.baeldung.com/jvm-parameters，并对文章进行了大量的完善补充。 文档参数 https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html JDK 版本：1.8 为主，也会补充新版本常用参数 在本篇...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/java/jvm/jvm-parameters-intro.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"最重要的JVM参数总结"}],["meta",{"property":"og:description","content":"本文由 JavaGuide 翻译自 https://www.baeldung.com/jvm-parameters，并对文章进行了大量的完善补充。 文档参数 https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html JDK 版本：1.8 为主，也会补充新版本常用参数 在本篇..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T03:42:59.000Z"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:modified_time","content":"2025-06-22T03:42:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最重要的JVM参数总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-22T03:42:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"堆内存相关","slug":"堆内存相关","link":"#堆内存相关","children":[{"level":3,"title":"设置堆内存大小 (-Xms 和 -Xmx)","slug":"设置堆内存大小-xms-和-xmx","link":"#设置堆内存大小-xms-和-xmx","children":[]},{"level":3,"title":"设置新生代内存大小 (Young Generation)","slug":"设置新生代内存大小-young-generation","link":"#设置新生代内存大小-young-generation","children":[]},{"level":3,"title":"设置永久代/元空间大小 (PermGen/Metaspace)","slug":"设置永久代-元空间大小-permgen-metaspace","link":"#设置永久代-元空间大小-permgen-metaspace","children":[]}]},{"level":2,"title":"垃圾收集相关","slug":"垃圾收集相关","link":"#垃圾收集相关","children":[{"level":3,"title":"选择垃圾回收器","slug":"选择垃圾回收器","link":"#选择垃圾回收器","children":[]},{"level":3,"title":"GC 日志记录","slug":"gc-日志记录","link":"#gc-日志记录","children":[]}]},{"level":2,"title":"处理 OOM","slug":"处理-oom","link":"#处理-oom","children":[]},{"level":2,"title":"其他常用参数","slug":"其他常用参数","link":"#其他常用参数","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1750563779000,"updatedTime":1750563779000,"contributors":[{"name":"DanlionYou","username":"DanlionYou","email":"3184877618.com","commits":1,"url":"https://github.com/DanlionYou"}]},"readingTime":{"minutes":10.91,"words":3272},"filePathRelative":"java/jvm/jvm-parameters-intro.md","localizedDate":"2025年6月22日","excerpt":"<blockquote>\\n<p>本文由 JavaGuide 翻译自 <a href=\\"https://www.baeldung.com/jvm-parameters\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.baeldung.com/jvm-parameters</a>，并对文章进行了大量的完善补充。<br>\\n文档参数 <a href=\\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p>\\n<p>JDK 版本：1.8 为主，也会补充新版本常用参数</p>\\n</blockquote>","autoDesc":true}');export{p as comp,c as data};
