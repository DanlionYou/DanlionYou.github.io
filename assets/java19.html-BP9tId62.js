import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,b as l,f as s,d as h,e as r,r as k,o as p}from"./app-BF0hwt7B.js";const d={};function o(g,i){const e=k("RouteLink");return p(),t("div",null,[i[3]||(i[3]=a(`<p>JDK 19 定于 2022 年 9 月 20 日正式发布以供生产使用，非长期支持版本。不过，JDK 19 中有一些比较重要的新特性值得关注。</p><p>JDK 19 只有 7 个新特性：</p><ul><li><a href="https://openjdk.org/jeps/405" target="_blank" rel="noopener noreferrer">JEP 405: Record Patterns（记录模式）</a>（预览）</li><li><a href="https://openjdk.org/jeps/422" target="_blank" rel="noopener noreferrer">JEP 422: Linux/RISC-V Port</a></li><li><a href="https://openjdk.org/jeps/424" target="_blank" rel="noopener noreferrer">JEP 424: Foreign Function &amp; Memory API（外部函数和内存 API）</a>（预览）</li><li><a href="https://openjdk.org/jeps/425" target="_blank" rel="noopener noreferrer">JEP 425: Virtual Threads（虚拟线程）</a>（预览）</li><li><a href="https://openjdk.java.net/jeps/426" target="_blank" rel="noopener noreferrer">JEP 426: Vector（向量）API</a>（第四次孵化）</li><li><a href="https://openjdk.java.net/jeps/427" target="_blank" rel="noopener noreferrer">JEP 427: Pattern Matching for switch（switch 模式匹配）</a></li><li><a href="https://openjdk.org/jeps/428" target="_blank" rel="noopener noreferrer">JEP 428: Structured Concurrency（结构化并发）</a>（孵化）</li></ul><p>这里只对 424、425、426、428 这 4 个我觉得比较重要的新特性进行详细介绍。</p><p>相关阅读：<a href="https://openjdk.org/projects/jdk/19/" target="_blank" rel="noopener noreferrer">OpenJDK Java 19 文档</a></p><h2 id="jep-424-外部函数和内存-api-预览" tabindex="-1"><a class="header-anchor" href="#jep-424-外部函数和内存-api-预览"><span>JEP 424: 外部函数和内存 API（预览）</span></a></h2><p>Java 程序可以通过该 API 与 Java 运行时之外的代码和数据进行互操作。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱。</p><p>外部函数和内存 API 在 Java 17 中进行了第一轮孵化，由 <a href="https://openjdk.java.net/jeps/412" target="_blank" rel="noopener noreferrer">JEP 412</a> 提出。第二轮孵化由<a href="https://openjdk.org/jeps/419" target="_blank" rel="noopener noreferrer">JEP 419</a> 提出并集成到了 Java 18 中，预览由 <a href="https://openjdk.org/jeps/424" target="_blank" rel="noopener noreferrer">JEP 424</a> 提出并集成到了 Java 19 中。</p><p>在没有外部函数和内存 API 之前：</p><ul><li>Java 通过 <a href="https://hg.openjdk.java.net/jdk/jdk/file/tip/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java" target="_blank" rel="noopener noreferrer"><code>sun.misc.Unsafe</code></a> 提供一些执行低级别、不安全操作的方法（如直接访问系统内存资源、自主管理内存资源等），<code>Unsafe</code> 类让 Java 语言拥有了类似 C 语言指针一样操作内存空间的能力的同时，也增加了 Java 语言的不安全性，不正确使用 <code>Unsafe</code> 类会使得程序出错的概率变大。</li><li>Java 1.1 就已通过 Java 原生接口（JNI）支持了原生方法调用，但并不好用。JNI 实现起来过于复杂，步骤繁琐（具体的步骤可以参考这篇文章：<a href="https://www.baeldung.com/jni" target="_blank" rel="noopener noreferrer">Guide to JNI (Java Native Interface)</a> ），不受 JVM 的语言安全机制控制，影响 Java 语言的跨平台特性。并且，JNI 的性能也不行，因为 JNI 方法调用不能从许多常见的 JIT 优化(如内联)中受益。虽然<a href="https://github.com/java-native-access/jna" target="_blank" rel="noopener noreferrer">JNA</a>、<a href="https://github.com/jnr/jnr-ffi" target="_blank" rel="noopener noreferrer">JNR</a>和<a href="https://github.com/bytedeco/javacpp" target="_blank" rel="noopener noreferrer">JavaCPP</a>等框架对 JNI 进行了改进，但效果还是不太理想。</li></ul><p>引入外部函数和内存 API 就是为了解决 Java 访问外部函数和外部内存存在的一些痛点。</p><p>Foreign Function &amp; Memory API (FFM API) 定义了类和接口：</p><ul><li>分配外部内存：<code>MemorySegment</code>、<code>MemoryAddress</code>和<code>SegmentAllocator</code>；</li><li>操作和访问结构化的外部内存：<code>MemoryLayout</code>, <code>VarHandle</code>；</li><li>控制外部内存的分配和释放：<code>MemorySession</code>；</li><li>调用外部函数：<code>Linker</code>、<code>FunctionDescriptor</code>和<code>SymbolLookup</code>。</li></ul><p>下面是 FFM API 使用示例，这段代码获取了 C 库函数的 <code>radixsort</code> 方法句柄，然后使用它对 Java 数组中的四个字符串进行排序。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 在C库路径上查找外部函数</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Linker</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> linker </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Linker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nativeLinker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SymbolLookup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stdlib </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> linker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defaultLookup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MethodHandle</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> radixSort </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> linker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">downcallHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                             stdlib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lookup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;radixsort&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), ...);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 分配堆上内存以存储四个字符串</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] javaStrings   </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mouse&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;cat&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;dog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;car&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 3. 分配堆外内存以存储四个指针</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SegmentAllocator</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> allocator </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> implicitAllocator</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MemorySegment</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> offHeap  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> allocator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allocateArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ValueLayout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ADDRESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">javaStrings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 4. 将字符串从堆上复制到堆外</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> javaStrings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 在堆外分配一个字符串，然后存储指向它的指针</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    MemorySegment</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cString </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> allocator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allocateUtf8String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(javaStrings[i]);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    offHeap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAtIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ValueLayout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ADDRESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, i, cString);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 5. 通过调用外部函数对堆外数据进行排序</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">radixSort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(offHeap, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">javaStrings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MemoryAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 6. 将(重新排序的)字符串从堆外复制到堆上</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> javaStrings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    MemoryAddress</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cStringPtr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> offHeap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAtIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ValueLayout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ADDRESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, i);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    javaStrings[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cStringPtr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUtf8String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(javaStrings, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;car&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cat&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mouse&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jep-425-虚拟线程-预览" tabindex="-1"><a class="header-anchor" href="#jep-425-虚拟线程-预览"><span>JEP 425: 虚拟线程（预览）</span></a></h2><p>虚拟线程（Virtual Thread-）是 JDK 而不是 OS 实现的轻量级线程(Lightweight Process，LWP），许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。</p><p>虚拟线程在其他多线程语言中已经被证实是十分有用的，比如 Go 中的 Goroutine、Erlang 中的进程。</p><p>虚拟线程避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂，可以有效减少编写、维护和观察高吞吐量并发应用程序的工作量。</p><p>知乎有一个关于 Java 19 虚拟线程的讨论，感兴趣的可以去看看：<a href="https://www.zhihu.com/question/536743167" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/536743167</a> 。</p><p>Java 虚拟线程的详细解读和原理可以看下面这两篇文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/vdLXhZdWyxc6K-D3Aj03LA" target="_blank" rel="noopener noreferrer">虚拟线程原理及性能分析｜得物技术</a></li><li><a href="https://mp.weixin.qq.com/s/yyApBXxpXxVwttr01Hld6Q" target="_blank" rel="noopener noreferrer">Java19 正式 GA！看虚拟线程如何大幅提高系统吞吐量</a></li><li><a href="https://www.cnblogs.com/throwable/p/16758997.html" target="_blank" rel="noopener noreferrer">虚拟线程 - VirtualThread 源码透视</a></li></ul><h2 id="jep-426-向量-api-第四次孵化" tabindex="-1"><a class="header-anchor" href="#jep-426-向量-api-第四次孵化"><span>JEP 426: 向量 API（第四次孵化）</span></a></h2><p>向量（Vector） API 最初由 <a href="https://openjdk.java.net/jeps/338" target="_blank" rel="noopener noreferrer">JEP 338</a> 提出，并作为<a href="http://openjdk.java.net/jeps/11" target="_blank" rel="noopener noreferrer">孵化 API</a>集成到 Java 16 中。第二轮孵化由 <a href="https://openjdk.java.net/jeps/414" target="_blank" rel="noopener noreferrer">JEP 414</a> 提出并集成到 Java 17 中，第三轮孵化由 <a href="https://openjdk.java.net/jeps/417" target="_blank" rel="noopener noreferrer">JEP 417</a> 提出并集成到 Java 18 中，第四轮由 <a href="https://openjdk.java.net/jeps/426" target="_blank" rel="noopener noreferrer">JEP 426</a> 提出并集成到了 Java 19 中。</p>`,24)),l("p",null,[i[1]||(i[1]=s("在 ")),h(e,{to:"/java/new-features/java18.html"},{default:r(()=>i[0]||(i[0]=[s("Java 18 新特性概览")])),_:1}),i[2]||(i[2]=s(" 中，我有详细介绍到向量 API，这里就不再做额外的介绍了。"))]),i[4]||(i[4]=a(`<h2 id="jep-428-结构化并发-孵化" tabindex="-1"><a class="header-anchor" href="#jep-428-结构化并发-孵化"><span>JEP 428: 结构化并发(孵化)</span></a></h2><p>JDK 19 引入了结构化并发，一种多线程编程方法，目的是为了通过结构化并发 API 来简化多线程编程，并不是为了取代<code>java.util.concurrent</code>，目前处于孵化器阶段。</p><p>结构化并发将不同线程中运行的多个任务视为单个工作单元，从而简化错误处理、提高可靠性并增强可观察性。也就是说，结构化并发保留了单线程代码的可读性、可维护性和可观察性。</p><p>结构化并发的基本 API 是<a href="https://download.java.net/java/early_access/loom/docs/api/jdk.incubator.concurrent/jdk/incubator/concurrent/StructuredTaskScope.html" target="_blank" rel="noopener noreferrer"><code>StructuredTaskScope</code></a>。<code>StructuredTaskScope</code> 支持将任务拆分为多个并发子任务，在它们自己的线程中执行，并且子任务必须在主任务继续之前完成。</p><p><code>StructuredTaskScope</code> 的基本用法如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> scope </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StructuredTaskScope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用fork方法派生线程来执行子任务</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> future1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(task1);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> future2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(task2);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 等待线程完成</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 结果的处理可能包括处理或重新抛出异常</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> process</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> results</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">exceptions </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// close</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构化并发非常适合虚拟线程，虚拟线程是 JDK 实现的轻量级线程。许多虚拟线程共享同一个操作系统线程，从而允许非常多的虚拟线程。</p><p><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号"></p>`,8))])}const y=n(d,[["render",o],["__file","java19.html.vue"]]),B=JSON.parse('{"path":"/java/new-features/java19.html","title":"Java 19 新特性概览","lang":"zh-CN","frontmatter":{"title":"Java 19 新特性概览","category":"Java","tag":["Java新特性"],"description":"JDK 19 定于 2022 年 9 月 20 日正式发布以供生产使用，非长期支持版本。不过，JDK 19 中有一些比较重要的新特性值得关注。 JDK 19 只有 7 个新特性： JEP 405: Record Patterns（记录模式）（预览） JEP 422: Linux/RISC-V Port JEP 424: Foreign Function...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/java/new-features/java19.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"Java 19 新特性概览"}],["meta",{"property":"og:description","content":"JDK 19 定于 2022 年 9 月 20 日正式发布以供生产使用，非长期支持版本。不过，JDK 19 中有一些比较重要的新特性值得关注。 JDK 19 只有 7 个新特性： JEP 405: Record Patterns（记录模式）（预览） JEP 422: Linux/RISC-V Port JEP 424: Foreign Function..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T03:45:21.000Z"}],["meta",{"property":"article:tag","content":"Java新特性"}],["meta",{"property":"article:modified_time","content":"2025-06-22T03:45:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 19 新特性概览\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-22T03:45:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"JEP 424: 外部函数和内存 API（预览）","slug":"jep-424-外部函数和内存-api-预览","link":"#jep-424-外部函数和内存-api-预览","children":[]},{"level":2,"title":"JEP 425: 虚拟线程（预览）","slug":"jep-425-虚拟线程-预览","link":"#jep-425-虚拟线程-预览","children":[]},{"level":2,"title":"JEP 426: 向量 API（第四次孵化）","slug":"jep-426-向量-api-第四次孵化","link":"#jep-426-向量-api-第四次孵化","children":[]},{"level":2,"title":"JEP 428: 结构化并发(孵化)","slug":"jep-428-结构化并发-孵化","link":"#jep-428-结构化并发-孵化","children":[]}],"git":{"createdTime":1750563921000,"updatedTime":1750563921000,"contributors":[{"name":"DanlionYou","username":"DanlionYou","email":"3184877618.com","commits":1,"url":"https://github.com/DanlionYou"}]},"readingTime":{"minutes":5.66,"words":1698},"filePathRelative":"java/new-features/java19.md","localizedDate":"2025年6月22日","excerpt":"<p>JDK 19 定于 2022 年 9 月 20 日正式发布以供生产使用，非长期支持版本。不过，JDK 19 中有一些比较重要的新特性值得关注。</p>\\n<p>JDK 19 只有 7 个新特性：</p>\\n<ul>\\n<li><a href=\\"https://openjdk.org/jeps/405\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 405: Record Patterns（记录模式）</a>（预览）</li>\\n<li><a href=\\"https://openjdk.org/jeps/422\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 422: Linux/RISC-V Port</a></li>\\n<li><a href=\\"https://openjdk.org/jeps/424\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 424: Foreign Function &amp; Memory API（外部函数和内存 API）</a>（预览）</li>\\n<li><a href=\\"https://openjdk.org/jeps/425\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 425: Virtual Threads（虚拟线程）</a>（预览）</li>\\n<li><a href=\\"https://openjdk.java.net/jeps/426\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 426: Vector（向量）API</a>（第四次孵化）</li>\\n<li><a href=\\"https://openjdk.java.net/jeps/427\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 427: Pattern Matching for switch（switch 模式匹配）</a></li>\\n<li><a href=\\"https://openjdk.org/jeps/428\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 428: Structured Concurrency（结构化并发）</a>（孵化）</li>\\n</ul>","autoDesc":true}');export{y as comp,B as data};
