import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as t,f as a,d as l,e as o,a as r,r as d,o as h}from"./app-DIPkjwKa.js";const p={};function c(g,e){const i=d("RouteLink");return h(),n("div",null,[e[2]||(e[2]=t("blockquote",null,[t("p",null,[a("本文由 "),t("a",{href:"https://github.com/Snailclimb",target:"_blank",rel:"noopener noreferrer"},"SnailClimb"),a(" 和 "),t("a",{href:"https://github.com/guang19",target:"_blank",rel:"noopener noreferrer"},"guang19"),a(" 共同完成。")])],-1)),t("p",null,[e[1]||(e[1]=a("关于事务基本概览的介绍，请看这篇文章的介绍：")),l(i,{to:"/database/mysql/mysql-questions-01.html#MySQL-%E4%BA%8B%E5%8A%A1"},{default:o(()=>e[0]||(e[0]=[a("MySQL 常见知识点&面试题总结")])),_:1})]),e[3]||(e[3]=r(`<h2 id="事务隔离级别总结" tabindex="-1"><a class="header-anchor" href="#事务隔离级别总结"><span>事务隔离级别总结</span></a></h2><p>SQL 标准定义了四种事务隔离级别，用来平衡事务的隔离性（Isolation）和并发性能。级别越高，数据一致性越好，但并发性能可能越低。这四个级别是：</p><ul><li><strong>READ-UNCOMMITTED(读取未提交)</strong> ：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。这种级别在实际应用中很少使用，因为它对数据一致性的保证太弱。</li><li><strong>READ-COMMITTED(读取已提交)</strong> ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。这是大多数数据库（如 Oracle, SQL Server）的默认隔离级别。</li><li><strong>REPEATABLE-READ(可重复读)</strong> ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。MySQL InnoDB 存储引擎的默认隔离级别正是 REPEATABLE READ。并且，InnoDB 在此级别下通过 MVCC（多版本并发控制） 和 Next-Key Locks（间隙锁+行锁） 机制，在很大程度上解决了幻读问题。</li><li><strong>SERIALIZABLE(可串行化)</strong> ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><table><thead><tr><th>隔离级别</th><th>脏读 (Dirty Read)</th><th>不可重复读 (Non-Repeatable Read)</th><th>幻读 (Phantom Read)</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>×</td><td>√ (标准) / ≈× (InnoDB)</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p><strong>默认级别查询：</strong></p><p>MySQL InnoDB 存储引擎的默认隔离级别是 <strong>REPEATABLE READ</strong>。可以通过以下命令查看：</p><ul><li>MySQL 8.0 之前：<code>SELECT @@tx_isolation;</code></li><li>MySQL 8.0 及之后：<code>SELECT @@transaction_isolation;</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SELECT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @@transaction_isolation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+-------------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@@transaction_isolation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+-------------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">REPEATABLE-READ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         |</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+-------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>InnoDB 的 REPEATABLE READ 对幻读的处理：</strong></p><p>标准的 SQL 隔离级别定义里，REPEATABLE READ 是无法防止幻读的。但 InnoDB 的实现通过以下机制很大程度上避免了幻读：</p><ul><li><strong>快照读 (Snapshot Read)</strong>:普通的 SELECT 语句，通过 <strong>MVCC</strong> 机制实现。事务启动时创建一个数据快照，后续的快照读都读取这个版本的数据，从而避免了看到其他事务新插入的行（幻读）或修改的行（不可重复读）。</li><li><strong>当前读 (Current Read)</strong>:像 <code>SELECT ... FOR UPDATE</code>, <code>SELECT ... LOCK IN SHARE MODE</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code> 这些操作。InnoDB 使用 <strong>Next-Key Lock</strong> 来锁定扫描到的索引记录及其间的范围（间隙），防止其他事务在这个范围内插入新的记录，从而避免幻读。Next-Key Lock 是行锁（Record Lock）和间隙锁（Gap Lock）的组合。</li></ul><p>值得注意的是，虽然通常认为隔离级别越高、并发性越差，但 InnoDB 存储引擎通过 MVCC 机制优化了 REPEATABLE READ 级别。对于许多常见的只读或读多写少的场景，其性能<strong>与 READ COMMITTED 相比可能没有显著差异</strong>。不过，在写密集型且并发冲突较高的场景下，RR 的间隙锁机制可能会比 RC 带来更多的锁等待。</p><p>此外，在某些特定场景下，如需要严格一致性的分布式事务（XA Transactions），InnoDB 可能要求或推荐使用 SERIALIZABLE 隔离级别来确保全局数据的一致性。</p><p>《MySQL 技术内幕：InnoDB 存储引擎(第 2 版)》7.7 章这样写到：</p><blockquote><p>InnoDB 存储引擎提供了对 XA 事务的支持，并通过 XA 事务来支持分布式事务的实现。分布式事务指的是允许多个独立的事务资源（transactional resources）参与到一个全局的事务中。事务资源通常是关系型数据库系统，但也可以是其他类型的资源。全局事务要求在其中的所有参与的事务要么都提交，要么都回滚，这对于事务原有的 ACID 要求又有了提高。另外，在使用分布式事务时，InnoDB 存储引擎的事务隔离级别必须设置为 SERIALIZABLE。</p></blockquote><h2 id="实际情况演示" tabindex="-1"><a class="header-anchor" href="#实际情况演示"><span>实际情况演示</span></a></h2><p>在下面我会使用 2 个命令行 MySQL ，模拟多线程（多事务）对同一份数据的脏读问题。</p><p>MySQL 命令行的默认配置中事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。如果要显式地开启一个事务需要使用命令：<code>START TRANSACTION</code>。</p><p>我们可以通过下面的命令来设置隔离级别。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [SESSION|GLOBAL]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TRANSACTION</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ISOLATION</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> LEVEL</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [READ UNCOMMITTED|READ COMMITTED|REPEATABLE READ|SERIALIZABLE]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们再来看一下我们在下面实际操作中使用到的一些并发控制语句:</p><ul><li><code>START TRANSACTION</code> |<code>BEGIN</code>：显式地开启一个事务。</li><li><code>COMMIT</code>：提交事务，使得对数据库做的所有修改成为永久性。</li><li><code>ROLLBACK</code>：回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。</li></ul><h3 id="脏读-读未提交" tabindex="-1"><a class="header-anchor" href="#脏读-读未提交"><span>脏读(读未提交)</span></a></h3><p><img src="https://oss.javaguide.cn/github/javaguide/2019-31-1脏读(读未提交)实例.jpg" alt=""></p><h3 id="避免脏读-读已提交" tabindex="-1"><a class="header-anchor" href="#避免脏读-读已提交"><span>避免脏读(读已提交)</span></a></h3><p><img src="https://oss.javaguide.cn/github/javaguide/2019-31-2读已提交实例.jpg" alt=""></p><h3 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读"><span>不可重复读</span></a></h3><p>还是刚才上面的读已提交的图，虽然避免了读未提交，但是却出现了，一个事务还没有结束，就发生了 不可重复读问题。</p><p><img src="https://oss.javaguide.cn/github/javaguide/2019-32-1不可重复读实例.jpg" alt=""></p><h3 id="可重复读" tabindex="-1"><a class="header-anchor" href="#可重复读"><span>可重复读</span></a></h3><p><img src="https://oss.javaguide.cn/github/javaguide/2019-33-2可重复读.jpg" alt=""></p><h3 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读"><span>幻读</span></a></h3><h4 id="演示幻读出现的情况" tabindex="-1"><a class="header-anchor" href="#演示幻读出现的情况"><span>演示幻读出现的情况</span></a></h4><p><img src="https://oss.javaguide.cn/github/javaguide/phantom_read.png" alt=""></p><p>SQL 脚本 1 在第一次查询工资为 500 的记录时只有一条，SQL 脚本 2 插入了一条工资为 500 的记录，提交之后；SQL 脚本 1 在同一个事务中再次使用当前读查询发现出现了两条工资为 500 的记录这种就是幻读。</p><h4 id="解决幻读的方法" tabindex="-1"><a class="header-anchor" href="#解决幻读的方法"><span>解决幻读的方法</span></a></h4><p>解决幻读的方式有很多，但是它们的核心思想就是一个事务在操作某张表数据的时候，另外一个事务不允许新增或者删除这张表中的数据了。解决幻读的方式主要有以下几种：</p><ol><li>将事务隔离级别调整为 <code>SERIALIZABLE</code> 。</li><li>在可重复读的事务级别下，给事务操作的这张表添加表锁。</li><li>在可重复读的事务级别下，给事务操作的这张表添加 <code>Next-key Lock（Record Lock+Gap Lock）</code>。</li></ol><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3><ul><li>《MySQL 技术内幕：InnoDB 存储引擎》</li><li><a href="https://dev.MySQL.com/doc/refman/5.7/en/" target="_blank" rel="noopener noreferrer">https://dev.MySQL.com/doc/refman/5.7/en/</a></li><li><a href="https://tech.youzan.com/seven-questions-about-the-lock-of-MySQL/" target="_blank" rel="noopener noreferrer">Mysql 锁：灵魂七拷问</a></li><li><a href="https://tech.meituan.com/2014/08/20/innodb-lock.html" target="_blank" rel="noopener noreferrer">Innodb 中的事务隔离级别和锁的关系</a></li></ul><p><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号"></p>`,41))])}const u=s(p,[["render",c],["__file","transaction-isolation-level.html.vue"]]),k=JSON.parse('{"path":"/database/mysql/transaction-isolation-level.html","title":"MySQL事务隔离级别详解","lang":"zh-CN","frontmatter":{"title":"MySQL事务隔离级别详解","category":"数据库","tag":["MySQL"],"description":"本文由 SnailClimb 和 guang19 共同完成。 关于事务基本概览的介绍，请看这篇文章的介绍： 事务隔离级别总结 SQL 标准定义了四种事务隔离级别，用来平衡事务的隔离性（Isolation）和并发性能。级别越高，数据一致性越好，但并发性能可能越低。这四个级别是： READ-UNCOMMITTED(读取未提交) ：最低的隔离级别，允许读取尚...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/database/mysql/transaction-isolation-level.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"MySQL事务隔离级别详解"}],["meta",{"property":"og:description","content":"本文由 SnailClimb 和 guang19 共同完成。 关于事务基本概览的介绍，请看这篇文章的介绍： 事务隔离级别总结 SQL 标准定义了四种事务隔离级别，用来平衡事务的隔离性（Isolation）和并发性能。级别越高，数据一致性越好，但并发性能可能越低。这四个级别是： READ-UNCOMMITTED(读取未提交) ：最低的隔离级别，允许读取尚..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/2019-31-2%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4%E5%AE%9E%E4%BE%8B.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T03:42:59.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2025-06-22T03:42:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL事务隔离级别详解\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/2019-31-2%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4%E5%AE%9E%E4%BE%8B.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/2019-32-1%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E5%AE%9E%E4%BE%8B.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/2019-33-2%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/phantom_read.png\\"],\\"dateModified\\":\\"2025-06-22T03:42:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"事务隔离级别总结","slug":"事务隔离级别总结","link":"#事务隔离级别总结","children":[]},{"level":2,"title":"实际情况演示","slug":"实际情况演示","link":"#实际情况演示","children":[{"level":3,"title":"脏读(读未提交)","slug":"脏读-读未提交","link":"#脏读-读未提交","children":[]},{"level":3,"title":"避免脏读(读已提交)","slug":"避免脏读-读已提交","link":"#避免脏读-读已提交","children":[]},{"level":3,"title":"不可重复读","slug":"不可重复读","link":"#不可重复读","children":[]},{"level":3,"title":"可重复读","slug":"可重复读","link":"#可重复读","children":[]},{"level":3,"title":"幻读","slug":"幻读","link":"#幻读","children":[]},{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{"createdTime":1750563779000,"updatedTime":1750563779000,"contributors":[{"name":"DanlionYou","username":"DanlionYou","email":"3184877618.com","commits":1,"url":"https://github.com/DanlionYou"}]},"readingTime":{"minutes":5.91,"words":1773},"filePathRelative":"database/mysql/transaction-isolation-level.md","localizedDate":"2025年6月22日","excerpt":"<blockquote>\\n<p>本文由 <a href=\\"https://github.com/Snailclimb\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">SnailClimb</a> 和 <a href=\\"https://github.com/guang19\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">guang19</a> 共同完成。</p>\\n</blockquote>\\n<p>关于事务基本概览的介绍，请看这篇文章的介绍：<a href=\\"/database/mysql/mysql-questions-01.html#MySQL-%E4%BA%8B%E5%8A%A1\\" target=\\"_blank\\">MySQL 常见知识点&amp;面试题总结</a></p>","autoDesc":true}');export{u as comp,k as data};
